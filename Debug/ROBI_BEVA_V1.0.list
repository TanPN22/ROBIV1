
ROBI_BEVA_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c0  08009020  08009020  00019020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e0  0800a7e0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7e0  0800a7e0  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7e0  0800a7e0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7e4  0800a7e4  0001a7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800a7e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  200000b8  0800a8a0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800a8a0  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d91c  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003521  00000000  00000000  0002da3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00030f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c99  00000000  00000000  00032050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ef4e  00000000  00000000  00032ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106bd  00000000  00000000  00041c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004ab61  00000000  00000000  000522f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004238  00000000  00000000  0009ce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000a1090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b8 	.word	0x200000b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009004 	.word	0x08009004

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000bc 	.word	0x200000bc
 8000104:	08009004 	.word	0x08009004

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fc29 	bl	8001c6c <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fb79 	bl	8001b1c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fc1b 	bl	8001c6c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fc11 	bl	8001c6c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fba1 	bl	8001ba0 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb97 	bl	8001ba0 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_fadd>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	4647      	mov	r7, r8
 8000484:	46ce      	mov	lr, r9
 8000486:	024a      	lsls	r2, r1, #9
 8000488:	0243      	lsls	r3, r0, #9
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	0fc4      	lsrs	r4, r0, #31
 800048e:	0a50      	lsrs	r0, r2, #9
 8000490:	4680      	mov	r8, r0
 8000492:	0048      	lsls	r0, r1, #1
 8000494:	0a5b      	lsrs	r3, r3, #9
 8000496:	0e00      	lsrs	r0, r0, #24
 8000498:	0992      	lsrs	r2, r2, #6
 800049a:	4694      	mov	ip, r2
 800049c:	b580      	push	{r7, lr}
 800049e:	001e      	movs	r6, r3
 80004a0:	4681      	mov	r9, r0
 80004a2:	0002      	movs	r2, r0
 80004a4:	0e2d      	lsrs	r5, r5, #24
 80004a6:	00df      	lsls	r7, r3, #3
 80004a8:	0fc9      	lsrs	r1, r1, #31
 80004aa:	428c      	cmp	r4, r1
 80004ac:	d024      	beq.n	80004f8 <__aeabi_fadd+0x78>
 80004ae:	1a28      	subs	r0, r5, r0
 80004b0:	2800      	cmp	r0, #0
 80004b2:	dd0e      	ble.n	80004d2 <__aeabi_fadd+0x52>
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	d13e      	bne.n	8000536 <__aeabi_fadd+0xb6>
 80004b8:	4662      	mov	r2, ip
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fadd+0x40>
 80004be:	e0fd      	b.n	80006bc <__aeabi_fadd+0x23c>
 80004c0:	1e42      	subs	r2, r0, #1
 80004c2:	2801      	cmp	r0, #1
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x48>
 80004c6:	e137      	b.n	8000738 <__aeabi_fadd+0x2b8>
 80004c8:	28ff      	cmp	r0, #255	; 0xff
 80004ca:	d100      	bne.n	80004ce <__aeabi_fadd+0x4e>
 80004cc:	e0a9      	b.n	8000622 <__aeabi_fadd+0x1a2>
 80004ce:	0010      	movs	r0, r2
 80004d0:	e039      	b.n	8000546 <__aeabi_fadd+0xc6>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d063      	beq.n	800059e <__aeabi_fadd+0x11e>
 80004d6:	464b      	mov	r3, r9
 80004d8:	1b52      	subs	r2, r2, r5
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x60>
 80004de:	e0e0      	b.n	80006a2 <__aeabi_fadd+0x222>
 80004e0:	2f00      	cmp	r7, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x66>
 80004e4:	e0ce      	b.n	8000684 <__aeabi_fadd+0x204>
 80004e6:	1e53      	subs	r3, r2, #1
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x6e>
 80004ec:	e155      	b.n	800079a <__aeabi_fadd+0x31a>
 80004ee:	2aff      	cmp	r2, #255	; 0xff
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x74>
 80004f2:	e094      	b.n	800061e <__aeabi_fadd+0x19e>
 80004f4:	001a      	movs	r2, r3
 80004f6:	e0d9      	b.n	80006ac <__aeabi_fadd+0x22c>
 80004f8:	1a2a      	subs	r2, r5, r0
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_fadd+0x80>
 80004fe:	e099      	b.n	8000634 <__aeabi_fadd+0x1b4>
 8000500:	2800      	cmp	r0, #0
 8000502:	d062      	beq.n	80005ca <__aeabi_fadd+0x14a>
 8000504:	2dff      	cmp	r5, #255	; 0xff
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0x8a>
 8000508:	e08b      	b.n	8000622 <__aeabi_fadd+0x1a2>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	4661      	mov	r1, ip
 800050e:	04db      	lsls	r3, r3, #19
 8000510:	4319      	orrs	r1, r3
 8000512:	468c      	mov	ip, r1
 8000514:	2a1b      	cmp	r2, #27
 8000516:	dc00      	bgt.n	800051a <__aeabi_fadd+0x9a>
 8000518:	e0d2      	b.n	80006c0 <__aeabi_fadd+0x240>
 800051a:	2301      	movs	r3, #1
 800051c:	19db      	adds	r3, r3, r7
 800051e:	015a      	lsls	r2, r3, #5
 8000520:	d56a      	bpl.n	80005f8 <__aeabi_fadd+0x178>
 8000522:	3501      	adds	r5, #1
 8000524:	2dff      	cmp	r5, #255	; 0xff
 8000526:	d05b      	beq.n	80005e0 <__aeabi_fadd+0x160>
 8000528:	2201      	movs	r2, #1
 800052a:	49a3      	ldr	r1, [pc, #652]	; (80007b8 <__aeabi_fadd+0x338>)
 800052c:	401a      	ands	r2, r3
 800052e:	085b      	lsrs	r3, r3, #1
 8000530:	400b      	ands	r3, r1
 8000532:	4313      	orrs	r3, r2
 8000534:	e01c      	b.n	8000570 <__aeabi_fadd+0xf0>
 8000536:	2dff      	cmp	r5, #255	; 0xff
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0xbc>
 800053a:	e072      	b.n	8000622 <__aeabi_fadd+0x1a2>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	4662      	mov	r2, ip
 8000540:	04db      	lsls	r3, r3, #19
 8000542:	431a      	orrs	r2, r3
 8000544:	4694      	mov	ip, r2
 8000546:	281b      	cmp	r0, #27
 8000548:	dc00      	bgt.n	800054c <__aeabi_fadd+0xcc>
 800054a:	e090      	b.n	800066e <__aeabi_fadd+0x1ee>
 800054c:	2301      	movs	r3, #1
 800054e:	1afb      	subs	r3, r7, r3
 8000550:	015a      	lsls	r2, r3, #5
 8000552:	d551      	bpl.n	80005f8 <__aeabi_fadd+0x178>
 8000554:	019b      	lsls	r3, r3, #6
 8000556:	099e      	lsrs	r6, r3, #6
 8000558:	0030      	movs	r0, r6
 800055a:	f002 fb39 	bl	8002bd0 <__clzsi2>
 800055e:	0033      	movs	r3, r6
 8000560:	3805      	subs	r0, #5
 8000562:	4083      	lsls	r3, r0
 8000564:	4285      	cmp	r5, r0
 8000566:	dc00      	bgt.n	800056a <__aeabi_fadd+0xea>
 8000568:	e075      	b.n	8000656 <__aeabi_fadd+0x1d6>
 800056a:	4a94      	ldr	r2, [pc, #592]	; (80007bc <__aeabi_fadd+0x33c>)
 800056c:	1a2d      	subs	r5, r5, r0
 800056e:	4013      	ands	r3, r2
 8000570:	075a      	lsls	r2, r3, #29
 8000572:	d004      	beq.n	800057e <__aeabi_fadd+0xfe>
 8000574:	220f      	movs	r2, #15
 8000576:	401a      	ands	r2, r3
 8000578:	2a04      	cmp	r2, #4
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xfe>
 800057c:	3304      	adds	r3, #4
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	d53c      	bpl.n	80005fc <__aeabi_fadd+0x17c>
 8000582:	1c68      	adds	r0, r5, #1
 8000584:	2dfe      	cmp	r5, #254	; 0xfe
 8000586:	d02b      	beq.n	80005e0 <__aeabi_fadd+0x160>
 8000588:	019b      	lsls	r3, r3, #6
 800058a:	0a5e      	lsrs	r6, r3, #9
 800058c:	b2c0      	uxtb	r0, r0
 800058e:	05c0      	lsls	r0, r0, #23
 8000590:	4330      	orrs	r0, r6
 8000592:	07e4      	lsls	r4, r4, #31
 8000594:	4320      	orrs	r0, r4
 8000596:	bcc0      	pop	{r6, r7}
 8000598:	46b9      	mov	r9, r7
 800059a:	46b0      	mov	r8, r6
 800059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059e:	20fe      	movs	r0, #254	; 0xfe
 80005a0:	1c6a      	adds	r2, r5, #1
 80005a2:	4210      	tst	r0, r2
 80005a4:	d172      	bne.n	800068c <__aeabi_fadd+0x20c>
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x12c>
 80005aa:	e0ae      	b.n	800070a <__aeabi_fadd+0x28a>
 80005ac:	2f00      	cmp	r7, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x132>
 80005b0:	e0ec      	b.n	800078c <__aeabi_fadd+0x30c>
 80005b2:	4663      	mov	r3, ip
 80005b4:	2000      	movs	r0, #0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0e9      	beq.n	800058e <__aeabi_fadd+0x10e>
 80005ba:	1afb      	subs	r3, r7, r3
 80005bc:	015a      	lsls	r2, r3, #5
 80005be:	d400      	bmi.n	80005c2 <__aeabi_fadd+0x142>
 80005c0:	e0f3      	b.n	80007aa <__aeabi_fadd+0x32a>
 80005c2:	4663      	mov	r3, ip
 80005c4:	000c      	movs	r4, r1
 80005c6:	1bdb      	subs	r3, r3, r7
 80005c8:	e7d2      	b.n	8000570 <__aeabi_fadd+0xf0>
 80005ca:	4661      	mov	r1, ip
 80005cc:	2900      	cmp	r1, #0
 80005ce:	d05b      	beq.n	8000688 <__aeabi_fadd+0x208>
 80005d0:	1e51      	subs	r1, r2, #1
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x158>
 80005d6:	e0a7      	b.n	8000728 <__aeabi_fadd+0x2a8>
 80005d8:	2aff      	cmp	r2, #255	; 0xff
 80005da:	d022      	beq.n	8000622 <__aeabi_fadd+0x1a2>
 80005dc:	000a      	movs	r2, r1
 80005de:	e799      	b.n	8000514 <__aeabi_fadd+0x94>
 80005e0:	20ff      	movs	r0, #255	; 0xff
 80005e2:	2600      	movs	r6, #0
 80005e4:	e7d3      	b.n	800058e <__aeabi_fadd+0x10e>
 80005e6:	21fe      	movs	r1, #254	; 0xfe
 80005e8:	1c6a      	adds	r2, r5, #1
 80005ea:	4211      	tst	r1, r2
 80005ec:	d073      	beq.n	80006d6 <__aeabi_fadd+0x256>
 80005ee:	2aff      	cmp	r2, #255	; 0xff
 80005f0:	d0f6      	beq.n	80005e0 <__aeabi_fadd+0x160>
 80005f2:	0015      	movs	r5, r2
 80005f4:	4467      	add	r7, ip
 80005f6:	087b      	lsrs	r3, r7, #1
 80005f8:	075a      	lsls	r2, r3, #29
 80005fa:	d1bb      	bne.n	8000574 <__aeabi_fadd+0xf4>
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	2dff      	cmp	r5, #255	; 0xff
 8000600:	d00f      	beq.n	8000622 <__aeabi_fadd+0x1a2>
 8000602:	025b      	lsls	r3, r3, #9
 8000604:	0a5e      	lsrs	r6, r3, #9
 8000606:	b2e8      	uxtb	r0, r5
 8000608:	e7c1      	b.n	800058e <__aeabi_fadd+0x10e>
 800060a:	4662      	mov	r2, ip
 800060c:	2a00      	cmp	r2, #0
 800060e:	d008      	beq.n	8000622 <__aeabi_fadd+0x1a2>
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	03d2      	lsls	r2, r2, #15
 8000614:	4213      	tst	r3, r2
 8000616:	d004      	beq.n	8000622 <__aeabi_fadd+0x1a2>
 8000618:	4640      	mov	r0, r8
 800061a:	4210      	tst	r0, r2
 800061c:	d101      	bne.n	8000622 <__aeabi_fadd+0x1a2>
 800061e:	000c      	movs	r4, r1
 8000620:	4643      	mov	r3, r8
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0dc      	beq.n	80005e0 <__aeabi_fadd+0x160>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	03f6      	lsls	r6, r6, #15
 800062a:	431e      	orrs	r6, r3
 800062c:	0276      	lsls	r6, r6, #9
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	0a76      	lsrs	r6, r6, #9
 8000632:	e7ac      	b.n	800058e <__aeabi_fadd+0x10e>
 8000634:	2a00      	cmp	r2, #0
 8000636:	d0d6      	beq.n	80005e6 <__aeabi_fadd+0x166>
 8000638:	1b42      	subs	r2, r0, r5
 800063a:	2d00      	cmp	r5, #0
 800063c:	d05c      	beq.n	80006f8 <__aeabi_fadd+0x278>
 800063e:	28ff      	cmp	r0, #255	; 0xff
 8000640:	d0ee      	beq.n	8000620 <__aeabi_fadd+0x1a0>
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	04db      	lsls	r3, r3, #19
 8000646:	431f      	orrs	r7, r3
 8000648:	2a1b      	cmp	r2, #27
 800064a:	dc00      	bgt.n	800064e <__aeabi_fadd+0x1ce>
 800064c:	e082      	b.n	8000754 <__aeabi_fadd+0x2d4>
 800064e:	2301      	movs	r3, #1
 8000650:	464d      	mov	r5, r9
 8000652:	4463      	add	r3, ip
 8000654:	e763      	b.n	800051e <__aeabi_fadd+0x9e>
 8000656:	2220      	movs	r2, #32
 8000658:	1b40      	subs	r0, r0, r5
 800065a:	3001      	adds	r0, #1
 800065c:	1a12      	subs	r2, r2, r0
 800065e:	0019      	movs	r1, r3
 8000660:	4093      	lsls	r3, r2
 8000662:	40c1      	lsrs	r1, r0
 8000664:	1e5a      	subs	r2, r3, #1
 8000666:	4193      	sbcs	r3, r2
 8000668:	2500      	movs	r5, #0
 800066a:	430b      	orrs	r3, r1
 800066c:	e780      	b.n	8000570 <__aeabi_fadd+0xf0>
 800066e:	2320      	movs	r3, #32
 8000670:	4661      	mov	r1, ip
 8000672:	1a1b      	subs	r3, r3, r0
 8000674:	4099      	lsls	r1, r3
 8000676:	4662      	mov	r2, ip
 8000678:	000b      	movs	r3, r1
 800067a:	40c2      	lsrs	r2, r0
 800067c:	1e59      	subs	r1, r3, #1
 800067e:	418b      	sbcs	r3, r1
 8000680:	4313      	orrs	r3, r2
 8000682:	e764      	b.n	800054e <__aeabi_fadd+0xce>
 8000684:	000c      	movs	r4, r1
 8000686:	4643      	mov	r3, r8
 8000688:	0015      	movs	r5, r2
 800068a:	e7b8      	b.n	80005fe <__aeabi_fadd+0x17e>
 800068c:	4663      	mov	r3, ip
 800068e:	1afe      	subs	r6, r7, r3
 8000690:	0173      	lsls	r3, r6, #5
 8000692:	d445      	bmi.n	8000720 <__aeabi_fadd+0x2a0>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d000      	beq.n	800069a <__aeabi_fadd+0x21a>
 8000698:	e75e      	b.n	8000558 <__aeabi_fadd+0xd8>
 800069a:	2400      	movs	r4, #0
 800069c:	2000      	movs	r0, #0
 800069e:	2600      	movs	r6, #0
 80006a0:	e775      	b.n	800058e <__aeabi_fadd+0x10e>
 80006a2:	2bff      	cmp	r3, #255	; 0xff
 80006a4:	d0bb      	beq.n	800061e <__aeabi_fadd+0x19e>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	04db      	lsls	r3, r3, #19
 80006aa:	431f      	orrs	r7, r3
 80006ac:	2a1b      	cmp	r2, #27
 80006ae:	dd47      	ble.n	8000740 <__aeabi_fadd+0x2c0>
 80006b0:	2301      	movs	r3, #1
 80006b2:	4662      	mov	r2, ip
 80006b4:	000c      	movs	r4, r1
 80006b6:	464d      	mov	r5, r9
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	e749      	b.n	8000550 <__aeabi_fadd+0xd0>
 80006bc:	0005      	movs	r5, r0
 80006be:	e79e      	b.n	80005fe <__aeabi_fadd+0x17e>
 80006c0:	4661      	mov	r1, ip
 80006c2:	2320      	movs	r3, #32
 80006c4:	40d1      	lsrs	r1, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4662      	mov	r2, ip
 80006ca:	409a      	lsls	r2, r3
 80006cc:	0013      	movs	r3, r2
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	4193      	sbcs	r3, r2
 80006d2:	430b      	orrs	r3, r1
 80006d4:	e722      	b.n	800051c <__aeabi_fadd+0x9c>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d146      	bne.n	8000768 <__aeabi_fadd+0x2e8>
 80006da:	2f00      	cmp	r7, #0
 80006dc:	d062      	beq.n	80007a4 <__aeabi_fadd+0x324>
 80006de:	4663      	mov	r3, ip
 80006e0:	2000      	movs	r0, #0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x268>
 80006e6:	e752      	b.n	800058e <__aeabi_fadd+0x10e>
 80006e8:	003b      	movs	r3, r7
 80006ea:	4463      	add	r3, ip
 80006ec:	015a      	lsls	r2, r3, #5
 80006ee:	d583      	bpl.n	80005f8 <__aeabi_fadd+0x178>
 80006f0:	4a32      	ldr	r2, [pc, #200]	; (80007bc <__aeabi_fadd+0x33c>)
 80006f2:	3501      	adds	r5, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	e77f      	b.n	80005f8 <__aeabi_fadd+0x178>
 80006f8:	2f00      	cmp	r7, #0
 80006fa:	d0c4      	beq.n	8000686 <__aeabi_fadd+0x206>
 80006fc:	1e53      	subs	r3, r2, #1
 80006fe:	2a01      	cmp	r2, #1
 8000700:	d012      	beq.n	8000728 <__aeabi_fadd+0x2a8>
 8000702:	2aff      	cmp	r2, #255	; 0xff
 8000704:	d08c      	beq.n	8000620 <__aeabi_fadd+0x1a0>
 8000706:	001a      	movs	r2, r3
 8000708:	e79e      	b.n	8000648 <__aeabi_fadd+0x1c8>
 800070a:	2f00      	cmp	r7, #0
 800070c:	d000      	beq.n	8000710 <__aeabi_fadd+0x290>
 800070e:	e77c      	b.n	800060a <__aeabi_fadd+0x18a>
 8000710:	4663      	mov	r3, ip
 8000712:	2b00      	cmp	r3, #0
 8000714:	d183      	bne.n	800061e <__aeabi_fadd+0x19e>
 8000716:	2680      	movs	r6, #128	; 0x80
 8000718:	2400      	movs	r4, #0
 800071a:	20ff      	movs	r0, #255	; 0xff
 800071c:	03f6      	lsls	r6, r6, #15
 800071e:	e736      	b.n	800058e <__aeabi_fadd+0x10e>
 8000720:	4663      	mov	r3, ip
 8000722:	000c      	movs	r4, r1
 8000724:	1bde      	subs	r6, r3, r7
 8000726:	e717      	b.n	8000558 <__aeabi_fadd+0xd8>
 8000728:	003b      	movs	r3, r7
 800072a:	4463      	add	r3, ip
 800072c:	2501      	movs	r5, #1
 800072e:	015a      	lsls	r2, r3, #5
 8000730:	d400      	bmi.n	8000734 <__aeabi_fadd+0x2b4>
 8000732:	e761      	b.n	80005f8 <__aeabi_fadd+0x178>
 8000734:	2502      	movs	r5, #2
 8000736:	e6f7      	b.n	8000528 <__aeabi_fadd+0xa8>
 8000738:	4663      	mov	r3, ip
 800073a:	2501      	movs	r5, #1
 800073c:	1afb      	subs	r3, r7, r3
 800073e:	e707      	b.n	8000550 <__aeabi_fadd+0xd0>
 8000740:	2320      	movs	r3, #32
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	0038      	movs	r0, r7
 8000746:	409f      	lsls	r7, r3
 8000748:	003b      	movs	r3, r7
 800074a:	40d0      	lsrs	r0, r2
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	4193      	sbcs	r3, r2
 8000750:	4303      	orrs	r3, r0
 8000752:	e7ae      	b.n	80006b2 <__aeabi_fadd+0x232>
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	0039      	movs	r1, r7
 800075a:	409f      	lsls	r7, r3
 800075c:	003b      	movs	r3, r7
 800075e:	40d1      	lsrs	r1, r2
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	4193      	sbcs	r3, r2
 8000764:	430b      	orrs	r3, r1
 8000766:	e773      	b.n	8000650 <__aeabi_fadd+0x1d0>
 8000768:	2f00      	cmp	r7, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x2ee>
 800076c:	e758      	b.n	8000620 <__aeabi_fadd+0x1a0>
 800076e:	4662      	mov	r2, ip
 8000770:	2a00      	cmp	r2, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x2f6>
 8000774:	e755      	b.n	8000622 <__aeabi_fadd+0x1a2>
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	03d2      	lsls	r2, r2, #15
 800077a:	4213      	tst	r3, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x300>
 800077e:	e750      	b.n	8000622 <__aeabi_fadd+0x1a2>
 8000780:	4641      	mov	r1, r8
 8000782:	4211      	tst	r1, r2
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x308>
 8000786:	e74c      	b.n	8000622 <__aeabi_fadd+0x1a2>
 8000788:	4643      	mov	r3, r8
 800078a:	e74a      	b.n	8000622 <__aeabi_fadd+0x1a2>
 800078c:	4663      	mov	r3, ip
 800078e:	2b00      	cmp	r3, #0
 8000790:	d083      	beq.n	800069a <__aeabi_fadd+0x21a>
 8000792:	000c      	movs	r4, r1
 8000794:	4646      	mov	r6, r8
 8000796:	2000      	movs	r0, #0
 8000798:	e6f9      	b.n	800058e <__aeabi_fadd+0x10e>
 800079a:	4663      	mov	r3, ip
 800079c:	000c      	movs	r4, r1
 800079e:	1bdb      	subs	r3, r3, r7
 80007a0:	3501      	adds	r5, #1
 80007a2:	e6d5      	b.n	8000550 <__aeabi_fadd+0xd0>
 80007a4:	4646      	mov	r6, r8
 80007a6:	2000      	movs	r0, #0
 80007a8:	e6f1      	b.n	800058e <__aeabi_fadd+0x10e>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x330>
 80007ae:	e723      	b.n	80005f8 <__aeabi_fadd+0x178>
 80007b0:	2400      	movs	r4, #0
 80007b2:	2600      	movs	r6, #0
 80007b4:	e6eb      	b.n	800058e <__aeabi_fadd+0x10e>
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	7dffffff 	.word	0x7dffffff
 80007bc:	fbffffff 	.word	0xfbffffff

080007c0 <__aeabi_fmul>:
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	4646      	mov	r6, r8
 80007ca:	4699      	mov	r9, r3
 80007cc:	46d6      	mov	lr, sl
 80007ce:	0fc3      	lsrs	r3, r0, #31
 80007d0:	0045      	lsls	r5, r0, #1
 80007d2:	4698      	mov	r8, r3
 80007d4:	b5c0      	push	{r6, r7, lr}
 80007d6:	464b      	mov	r3, r9
 80007d8:	1c0f      	adds	r7, r1, #0
 80007da:	0e2d      	lsrs	r5, r5, #24
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fmul+0x20>
 80007de:	e0cb      	b.n	8000978 <__aeabi_fmul+0x1b8>
 80007e0:	2dff      	cmp	r5, #255	; 0xff
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fmul+0x26>
 80007e4:	e0cf      	b.n	8000986 <__aeabi_fmul+0x1c6>
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	04d2      	lsls	r2, r2, #19
 80007ec:	431a      	orrs	r2, r3
 80007ee:	2300      	movs	r3, #0
 80007f0:	4691      	mov	r9, r2
 80007f2:	2600      	movs	r6, #0
 80007f4:	469a      	mov	sl, r3
 80007f6:	3d7f      	subs	r5, #127	; 0x7f
 80007f8:	027c      	lsls	r4, r7, #9
 80007fa:	007b      	lsls	r3, r7, #1
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0e1b      	lsrs	r3, r3, #24
 8000800:	0fff      	lsrs	r7, r7, #31
 8000802:	2b00      	cmp	r3, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fmul+0x48>
 8000806:	e0a9      	b.n	800095c <__aeabi_fmul+0x19c>
 8000808:	2bff      	cmp	r3, #255	; 0xff
 800080a:	d011      	beq.n	8000830 <__aeabi_fmul+0x70>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4314      	orrs	r4, r2
 8000814:	4642      	mov	r2, r8
 8000816:	3b7f      	subs	r3, #127	; 0x7f
 8000818:	195b      	adds	r3, r3, r5
 800081a:	407a      	eors	r2, r7
 800081c:	2000      	movs	r0, #0
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	1c5d      	adds	r5, r3, #1
 8000822:	2e0a      	cmp	r6, #10
 8000824:	dd13      	ble.n	800084e <__aeabi_fmul+0x8e>
 8000826:	003a      	movs	r2, r7
 8000828:	2e0b      	cmp	r6, #11
 800082a:	d047      	beq.n	80008bc <__aeabi_fmul+0xfc>
 800082c:	4647      	mov	r7, r8
 800082e:	e03f      	b.n	80008b0 <__aeabi_fmul+0xf0>
 8000830:	002b      	movs	r3, r5
 8000832:	33ff      	adds	r3, #255	; 0xff
 8000834:	2c00      	cmp	r4, #0
 8000836:	d11e      	bne.n	8000876 <__aeabi_fmul+0xb6>
 8000838:	2202      	movs	r2, #2
 800083a:	4316      	orrs	r6, r2
 800083c:	4642      	mov	r2, r8
 800083e:	3501      	adds	r5, #1
 8000840:	407a      	eors	r2, r7
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	35ff      	adds	r5, #255	; 0xff
 8000846:	2e0a      	cmp	r6, #10
 8000848:	dd00      	ble.n	800084c <__aeabi_fmul+0x8c>
 800084a:	e0e4      	b.n	8000a16 <__aeabi_fmul+0x256>
 800084c:	2002      	movs	r0, #2
 800084e:	2e02      	cmp	r6, #2
 8000850:	dc1c      	bgt.n	800088c <__aeabi_fmul+0xcc>
 8000852:	3e01      	subs	r6, #1
 8000854:	2e01      	cmp	r6, #1
 8000856:	d842      	bhi.n	80008de <__aeabi_fmul+0x11e>
 8000858:	2802      	cmp	r0, #2
 800085a:	d03d      	beq.n	80008d8 <__aeabi_fmul+0x118>
 800085c:	2801      	cmp	r0, #1
 800085e:	d166      	bne.n	800092e <__aeabi_fmul+0x16e>
 8000860:	2000      	movs	r0, #0
 8000862:	2100      	movs	r1, #0
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	4308      	orrs	r0, r1
 8000868:	07d2      	lsls	r2, r2, #31
 800086a:	4310      	orrs	r0, r2
 800086c:	bce0      	pop	{r5, r6, r7}
 800086e:	46ba      	mov	sl, r7
 8000870:	46b1      	mov	r9, r6
 8000872:	46a8      	mov	r8, r5
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	2203      	movs	r2, #3
 8000878:	4316      	orrs	r6, r2
 800087a:	4642      	mov	r2, r8
 800087c:	3501      	adds	r5, #1
 800087e:	407a      	eors	r2, r7
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	35ff      	adds	r5, #255	; 0xff
 8000884:	2e0a      	cmp	r6, #10
 8000886:	dd00      	ble.n	800088a <__aeabi_fmul+0xca>
 8000888:	e0e4      	b.n	8000a54 <__aeabi_fmul+0x294>
 800088a:	2003      	movs	r0, #3
 800088c:	2101      	movs	r1, #1
 800088e:	40b1      	lsls	r1, r6
 8000890:	26a6      	movs	r6, #166	; 0xa6
 8000892:	00f6      	lsls	r6, r6, #3
 8000894:	4231      	tst	r1, r6
 8000896:	d10a      	bne.n	80008ae <__aeabi_fmul+0xee>
 8000898:	2690      	movs	r6, #144	; 0x90
 800089a:	00b6      	lsls	r6, r6, #2
 800089c:	4231      	tst	r1, r6
 800089e:	d116      	bne.n	80008ce <__aeabi_fmul+0x10e>
 80008a0:	3eb9      	subs	r6, #185	; 0xb9
 80008a2:	3eff      	subs	r6, #255	; 0xff
 80008a4:	420e      	tst	r6, r1
 80008a6:	d01a      	beq.n	80008de <__aeabi_fmul+0x11e>
 80008a8:	46a1      	mov	r9, r4
 80008aa:	4682      	mov	sl, r0
 80008ac:	e000      	b.n	80008b0 <__aeabi_fmul+0xf0>
 80008ae:	0017      	movs	r7, r2
 80008b0:	4653      	mov	r3, sl
 80008b2:	003a      	movs	r2, r7
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d00f      	beq.n	80008d8 <__aeabi_fmul+0x118>
 80008b8:	464c      	mov	r4, r9
 80008ba:	4650      	mov	r0, sl
 80008bc:	2803      	cmp	r0, #3
 80008be:	d1cd      	bne.n	800085c <__aeabi_fmul+0x9c>
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	03c9      	lsls	r1, r1, #15
 80008c4:	4321      	orrs	r1, r4
 80008c6:	0249      	lsls	r1, r1, #9
 80008c8:	20ff      	movs	r0, #255	; 0xff
 80008ca:	0a49      	lsrs	r1, r1, #9
 80008cc:	e7ca      	b.n	8000864 <__aeabi_fmul+0xa4>
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	2200      	movs	r2, #0
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	03c9      	lsls	r1, r1, #15
 80008d6:	e7c5      	b.n	8000864 <__aeabi_fmul+0xa4>
 80008d8:	20ff      	movs	r0, #255	; 0xff
 80008da:	2100      	movs	r1, #0
 80008dc:	e7c2      	b.n	8000864 <__aeabi_fmul+0xa4>
 80008de:	0c20      	lsrs	r0, r4, #16
 80008e0:	4649      	mov	r1, r9
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	0c24      	lsrs	r4, r4, #16
 80008e6:	0027      	movs	r7, r4
 80008e8:	0c0e      	lsrs	r6, r1, #16
 80008ea:	0409      	lsls	r1, r1, #16
 80008ec:	0c09      	lsrs	r1, r1, #16
 80008ee:	4374      	muls	r4, r6
 80008f0:	434f      	muls	r7, r1
 80008f2:	4346      	muls	r6, r0
 80008f4:	4348      	muls	r0, r1
 80008f6:	0c39      	lsrs	r1, r7, #16
 80008f8:	1900      	adds	r0, r0, r4
 80008fa:	1809      	adds	r1, r1, r0
 80008fc:	428c      	cmp	r4, r1
 80008fe:	d903      	bls.n	8000908 <__aeabi_fmul+0x148>
 8000900:	2080      	movs	r0, #128	; 0x80
 8000902:	0240      	lsls	r0, r0, #9
 8000904:	4684      	mov	ip, r0
 8000906:	4466      	add	r6, ip
 8000908:	043f      	lsls	r7, r7, #16
 800090a:	0408      	lsls	r0, r1, #16
 800090c:	0c3f      	lsrs	r7, r7, #16
 800090e:	19c0      	adds	r0, r0, r7
 8000910:	0184      	lsls	r4, r0, #6
 8000912:	1e67      	subs	r7, r4, #1
 8000914:	41bc      	sbcs	r4, r7
 8000916:	0c09      	lsrs	r1, r1, #16
 8000918:	0e80      	lsrs	r0, r0, #26
 800091a:	1989      	adds	r1, r1, r6
 800091c:	4304      	orrs	r4, r0
 800091e:	0189      	lsls	r1, r1, #6
 8000920:	430c      	orrs	r4, r1
 8000922:	0109      	lsls	r1, r1, #4
 8000924:	d571      	bpl.n	8000a0a <__aeabi_fmul+0x24a>
 8000926:	2301      	movs	r3, #1
 8000928:	0861      	lsrs	r1, r4, #1
 800092a:	401c      	ands	r4, r3
 800092c:	430c      	orrs	r4, r1
 800092e:	002b      	movs	r3, r5
 8000930:	337f      	adds	r3, #127	; 0x7f
 8000932:	2b00      	cmp	r3, #0
 8000934:	dd51      	ble.n	80009da <__aeabi_fmul+0x21a>
 8000936:	0761      	lsls	r1, r4, #29
 8000938:	d004      	beq.n	8000944 <__aeabi_fmul+0x184>
 800093a:	210f      	movs	r1, #15
 800093c:	4021      	ands	r1, r4
 800093e:	2904      	cmp	r1, #4
 8000940:	d000      	beq.n	8000944 <__aeabi_fmul+0x184>
 8000942:	3404      	adds	r4, #4
 8000944:	0121      	lsls	r1, r4, #4
 8000946:	d503      	bpl.n	8000950 <__aeabi_fmul+0x190>
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <__aeabi_fmul+0x298>)
 800094a:	401c      	ands	r4, r3
 800094c:	002b      	movs	r3, r5
 800094e:	3380      	adds	r3, #128	; 0x80
 8000950:	2bfe      	cmp	r3, #254	; 0xfe
 8000952:	dcc1      	bgt.n	80008d8 <__aeabi_fmul+0x118>
 8000954:	01a1      	lsls	r1, r4, #6
 8000956:	0a49      	lsrs	r1, r1, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e783      	b.n	8000864 <__aeabi_fmul+0xa4>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d12c      	bne.n	80009ba <__aeabi_fmul+0x1fa>
 8000960:	2301      	movs	r3, #1
 8000962:	4642      	mov	r2, r8
 8000964:	431e      	orrs	r6, r3
 8000966:	002b      	movs	r3, r5
 8000968:	407a      	eors	r2, r7
 800096a:	2001      	movs	r0, #1
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	1c5d      	adds	r5, r3, #1
 8000970:	2e0a      	cmp	r6, #10
 8000972:	dd00      	ble.n	8000976 <__aeabi_fmul+0x1b6>
 8000974:	e757      	b.n	8000826 <__aeabi_fmul+0x66>
 8000976:	e76a      	b.n	800084e <__aeabi_fmul+0x8e>
 8000978:	2b00      	cmp	r3, #0
 800097a:	d110      	bne.n	800099e <__aeabi_fmul+0x1de>
 800097c:	2301      	movs	r3, #1
 800097e:	2604      	movs	r6, #4
 8000980:	2500      	movs	r5, #0
 8000982:	469a      	mov	sl, r3
 8000984:	e738      	b.n	80007f8 <__aeabi_fmul+0x38>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d104      	bne.n	8000994 <__aeabi_fmul+0x1d4>
 800098a:	2302      	movs	r3, #2
 800098c:	2608      	movs	r6, #8
 800098e:	25ff      	movs	r5, #255	; 0xff
 8000990:	469a      	mov	sl, r3
 8000992:	e731      	b.n	80007f8 <__aeabi_fmul+0x38>
 8000994:	2303      	movs	r3, #3
 8000996:	260c      	movs	r6, #12
 8000998:	25ff      	movs	r5, #255	; 0xff
 800099a:	469a      	mov	sl, r3
 800099c:	e72c      	b.n	80007f8 <__aeabi_fmul+0x38>
 800099e:	4648      	mov	r0, r9
 80009a0:	f002 f916 	bl	8002bd0 <__clzsi2>
 80009a4:	464a      	mov	r2, r9
 80009a6:	1f43      	subs	r3, r0, #5
 80009a8:	2576      	movs	r5, #118	; 0x76
 80009aa:	409a      	lsls	r2, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	426d      	negs	r5, r5
 80009b0:	4691      	mov	r9, r2
 80009b2:	2600      	movs	r6, #0
 80009b4:	469a      	mov	sl, r3
 80009b6:	1a2d      	subs	r5, r5, r0
 80009b8:	e71e      	b.n	80007f8 <__aeabi_fmul+0x38>
 80009ba:	0020      	movs	r0, r4
 80009bc:	f002 f908 	bl	8002bd0 <__clzsi2>
 80009c0:	4642      	mov	r2, r8
 80009c2:	1f43      	subs	r3, r0, #5
 80009c4:	409c      	lsls	r4, r3
 80009c6:	1a2b      	subs	r3, r5, r0
 80009c8:	3b76      	subs	r3, #118	; 0x76
 80009ca:	407a      	eors	r2, r7
 80009cc:	2000      	movs	r0, #0
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	1c5d      	adds	r5, r3, #1
 80009d2:	2e0a      	cmp	r6, #10
 80009d4:	dd00      	ble.n	80009d8 <__aeabi_fmul+0x218>
 80009d6:	e726      	b.n	8000826 <__aeabi_fmul+0x66>
 80009d8:	e739      	b.n	800084e <__aeabi_fmul+0x8e>
 80009da:	2101      	movs	r1, #1
 80009dc:	1acb      	subs	r3, r1, r3
 80009de:	2b1b      	cmp	r3, #27
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_fmul+0x224>
 80009e2:	e73d      	b.n	8000860 <__aeabi_fmul+0xa0>
 80009e4:	359e      	adds	r5, #158	; 0x9e
 80009e6:	0021      	movs	r1, r4
 80009e8:	40ac      	lsls	r4, r5
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	1e63      	subs	r3, r4, #1
 80009ee:	419c      	sbcs	r4, r3
 80009f0:	4321      	orrs	r1, r4
 80009f2:	074b      	lsls	r3, r1, #29
 80009f4:	d004      	beq.n	8000a00 <__aeabi_fmul+0x240>
 80009f6:	230f      	movs	r3, #15
 80009f8:	400b      	ands	r3, r1
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fmul+0x240>
 80009fe:	3104      	adds	r1, #4
 8000a00:	014b      	lsls	r3, r1, #5
 8000a02:	d504      	bpl.n	8000a0e <__aeabi_fmul+0x24e>
 8000a04:	2001      	movs	r0, #1
 8000a06:	2100      	movs	r1, #0
 8000a08:	e72c      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a0a:	001d      	movs	r5, r3
 8000a0c:	e78f      	b.n	800092e <__aeabi_fmul+0x16e>
 8000a0e:	0189      	lsls	r1, r1, #6
 8000a10:	2000      	movs	r0, #0
 8000a12:	0a49      	lsrs	r1, r1, #9
 8000a14:	e726      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a16:	2302      	movs	r3, #2
 8000a18:	2e0f      	cmp	r6, #15
 8000a1a:	d10c      	bne.n	8000a36 <__aeabi_fmul+0x276>
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	464b      	mov	r3, r9
 8000a20:	03c9      	lsls	r1, r1, #15
 8000a22:	420b      	tst	r3, r1
 8000a24:	d00d      	beq.n	8000a42 <__aeabi_fmul+0x282>
 8000a26:	420c      	tst	r4, r1
 8000a28:	d10b      	bne.n	8000a42 <__aeabi_fmul+0x282>
 8000a2a:	4321      	orrs	r1, r4
 8000a2c:	0249      	lsls	r1, r1, #9
 8000a2e:	003a      	movs	r2, r7
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	0a49      	lsrs	r1, r1, #9
 8000a34:	e716      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a36:	2e0b      	cmp	r6, #11
 8000a38:	d000      	beq.n	8000a3c <__aeabi_fmul+0x27c>
 8000a3a:	e6f7      	b.n	800082c <__aeabi_fmul+0x6c>
 8000a3c:	46a1      	mov	r9, r4
 8000a3e:	469a      	mov	sl, r3
 8000a40:	e736      	b.n	80008b0 <__aeabi_fmul+0xf0>
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	464b      	mov	r3, r9
 8000a46:	03c9      	lsls	r1, r1, #15
 8000a48:	4319      	orrs	r1, r3
 8000a4a:	0249      	lsls	r1, r1, #9
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	20ff      	movs	r0, #255	; 0xff
 8000a50:	0a49      	lsrs	r1, r1, #9
 8000a52:	e707      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e7df      	b.n	8000a18 <__aeabi_fmul+0x258>
 8000a58:	f7ffffff 	.word	0xf7ffffff

08000a5c <__aeabi_fsub>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	46c6      	mov	lr, r8
 8000a60:	0243      	lsls	r3, r0, #9
 8000a62:	0a5b      	lsrs	r3, r3, #9
 8000a64:	0045      	lsls	r5, r0, #1
 8000a66:	00da      	lsls	r2, r3, #3
 8000a68:	0fc4      	lsrs	r4, r0, #31
 8000a6a:	0248      	lsls	r0, r1, #9
 8000a6c:	004f      	lsls	r7, r1, #1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	0a42      	lsrs	r2, r0, #9
 8000a72:	001e      	movs	r6, r3
 8000a74:	4690      	mov	r8, r2
 8000a76:	b500      	push	{lr}
 8000a78:	0e2d      	lsrs	r5, r5, #24
 8000a7a:	0e3f      	lsrs	r7, r7, #24
 8000a7c:	0fc9      	lsrs	r1, r1, #31
 8000a7e:	0980      	lsrs	r0, r0, #6
 8000a80:	2fff      	cmp	r7, #255	; 0xff
 8000a82:	d059      	beq.n	8000b38 <__aeabi_fsub+0xdc>
 8000a84:	2201      	movs	r2, #1
 8000a86:	4051      	eors	r1, r2
 8000a88:	428c      	cmp	r4, r1
 8000a8a:	d039      	beq.n	8000b00 <__aeabi_fsub+0xa4>
 8000a8c:	1bea      	subs	r2, r5, r7
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	dd58      	ble.n	8000b44 <__aeabi_fsub+0xe8>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d068      	beq.n	8000b68 <__aeabi_fsub+0x10c>
 8000a96:	2dff      	cmp	r5, #255	; 0xff
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x40>
 8000a9a:	e0d1      	b.n	8000c40 <__aeabi_fsub+0x1e4>
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	04db      	lsls	r3, r3, #19
 8000aa0:	4318      	orrs	r0, r3
 8000aa2:	2a1b      	cmp	r2, #27
 8000aa4:	dc00      	bgt.n	8000aa8 <__aeabi_fsub+0x4c>
 8000aa6:	e0e3      	b.n	8000c70 <__aeabi_fsub+0x214>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4662      	mov	r2, ip
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	015a      	lsls	r2, r3, #5
 8000ab0:	d400      	bmi.n	8000ab4 <__aeabi_fsub+0x58>
 8000ab2:	e0ac      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000ab4:	019b      	lsls	r3, r3, #6
 8000ab6:	099e      	lsrs	r6, r3, #6
 8000ab8:	0030      	movs	r0, r6
 8000aba:	f002 f889 	bl	8002bd0 <__clzsi2>
 8000abe:	0033      	movs	r3, r6
 8000ac0:	3805      	subs	r0, #5
 8000ac2:	4083      	lsls	r3, r0
 8000ac4:	4285      	cmp	r5, r0
 8000ac6:	dc00      	bgt.n	8000aca <__aeabi_fsub+0x6e>
 8000ac8:	e0c6      	b.n	8000c58 <__aeabi_fsub+0x1fc>
 8000aca:	4ab2      	ldr	r2, [pc, #712]	; (8000d94 <__aeabi_fsub+0x338>)
 8000acc:	1a2d      	subs	r5, r5, r0
 8000ace:	4013      	ands	r3, r2
 8000ad0:	075a      	lsls	r2, r3, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fsub+0x82>
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fsub+0x82>
 8000adc:	3304      	adds	r3, #4
 8000ade:	015a      	lsls	r2, r3, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x88>
 8000ae2:	e097      	b.n	8000c14 <__aeabi_fsub+0x1b8>
 8000ae4:	1c6a      	adds	r2, r5, #1
 8000ae6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x90>
 8000aea:	e084      	b.n	8000bf6 <__aeabi_fsub+0x19a>
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	0a5e      	lsrs	r6, r3, #9
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	05d0      	lsls	r0, r2, #23
 8000af4:	4330      	orrs	r0, r6
 8000af6:	07e4      	lsls	r4, r4, #31
 8000af8:	4320      	orrs	r0, r4
 8000afa:	bc80      	pop	{r7}
 8000afc:	46b8      	mov	r8, r7
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	1bea      	subs	r2, r5, r7
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	dd41      	ble.n	8000b8a <__aeabi_fsub+0x12e>
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d06b      	beq.n	8000be2 <__aeabi_fsub+0x186>
 8000b0a:	2dff      	cmp	r5, #255	; 0xff
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fsub+0xb4>
 8000b0e:	e097      	b.n	8000c40 <__aeabi_fsub+0x1e4>
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	04db      	lsls	r3, r3, #19
 8000b14:	4318      	orrs	r0, r3
 8000b16:	2a1b      	cmp	r2, #27
 8000b18:	dc00      	bgt.n	8000b1c <__aeabi_fsub+0xc0>
 8000b1a:	e0cc      	b.n	8000cb6 <__aeabi_fsub+0x25a>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4463      	add	r3, ip
 8000b20:	015a      	lsls	r2, r3, #5
 8000b22:	d574      	bpl.n	8000c0e <__aeabi_fsub+0x1b2>
 8000b24:	3501      	adds	r5, #1
 8000b26:	2dff      	cmp	r5, #255	; 0xff
 8000b28:	d065      	beq.n	8000bf6 <__aeabi_fsub+0x19a>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	499a      	ldr	r1, [pc, #616]	; (8000d98 <__aeabi_fsub+0x33c>)
 8000b2e:	401a      	ands	r2, r3
 8000b30:	085b      	lsrs	r3, r3, #1
 8000b32:	400b      	ands	r3, r1
 8000b34:	4313      	orrs	r3, r2
 8000b36:	e7cb      	b.n	8000ad0 <__aeabi_fsub+0x74>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d01f      	beq.n	8000b7c <__aeabi_fsub+0x120>
 8000b3c:	428c      	cmp	r4, r1
 8000b3e:	d022      	beq.n	8000b86 <__aeabi_fsub+0x12a>
 8000b40:	002a      	movs	r2, r5
 8000b42:	3aff      	subs	r2, #255	; 0xff
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d035      	beq.n	8000bb4 <__aeabi_fsub+0x158>
 8000b48:	1b7a      	subs	r2, r7, r5
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0xf4>
 8000b4e:	e099      	b.n	8000c84 <__aeabi_fsub+0x228>
 8000b50:	4663      	mov	r3, ip
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0xfc>
 8000b56:	e0dd      	b.n	8000d14 <__aeabi_fsub+0x2b8>
 8000b58:	1e53      	subs	r3, r2, #1
 8000b5a:	2a01      	cmp	r2, #1
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fsub+0x104>
 8000b5e:	e105      	b.n	8000d6c <__aeabi_fsub+0x310>
 8000b60:	2aff      	cmp	r2, #255	; 0xff
 8000b62:	d06b      	beq.n	8000c3c <__aeabi_fsub+0x1e0>
 8000b64:	001a      	movs	r2, r3
 8000b66:	e094      	b.n	8000c92 <__aeabi_fsub+0x236>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d073      	beq.n	8000c54 <__aeabi_fsub+0x1f8>
 8000b6c:	1e51      	subs	r1, r2, #1
 8000b6e:	2a01      	cmp	r2, #1
 8000b70:	d100      	bne.n	8000b74 <__aeabi_fsub+0x118>
 8000b72:	e0df      	b.n	8000d34 <__aeabi_fsub+0x2d8>
 8000b74:	2aff      	cmp	r2, #255	; 0xff
 8000b76:	d063      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000b78:	000a      	movs	r2, r1
 8000b7a:	e792      	b.n	8000aa2 <__aeabi_fsub+0x46>
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4051      	eors	r1, r2
 8000b80:	42a1      	cmp	r1, r4
 8000b82:	d000      	beq.n	8000b86 <__aeabi_fsub+0x12a>
 8000b84:	e782      	b.n	8000a8c <__aeabi_fsub+0x30>
 8000b86:	002a      	movs	r2, r5
 8000b88:	3aff      	subs	r2, #255	; 0xff
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d036      	beq.n	8000bfc <__aeabi_fsub+0x1a0>
 8000b8e:	1b7a      	subs	r2, r7, r5
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fsub+0x13a>
 8000b94:	e0aa      	b.n	8000cec <__aeabi_fsub+0x290>
 8000b96:	2fff      	cmp	r7, #255	; 0xff
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x140>
 8000b9a:	e0da      	b.n	8000d52 <__aeabi_fsub+0x2f6>
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	04db      	lsls	r3, r3, #19
 8000ba2:	4319      	orrs	r1, r3
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2a1b      	cmp	r2, #27
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0x150>
 8000baa:	e0d4      	b.n	8000d56 <__aeabi_fsub+0x2fa>
 8000bac:	2301      	movs	r3, #1
 8000bae:	003d      	movs	r5, r7
 8000bb0:	181b      	adds	r3, r3, r0
 8000bb2:	e7b5      	b.n	8000b20 <__aeabi_fsub+0xc4>
 8000bb4:	27fe      	movs	r7, #254	; 0xfe
 8000bb6:	1c6a      	adds	r2, r5, #1
 8000bb8:	4217      	tst	r7, r2
 8000bba:	d171      	bne.n	8000ca0 <__aeabi_fsub+0x244>
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fsub+0x166>
 8000bc0:	e09e      	b.n	8000d00 <__aeabi_fsub+0x2a4>
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x16e>
 8000bc8:	e0d5      	b.n	8000d76 <__aeabi_fsub+0x31a>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_fsub+0x176>
 8000bd0:	e78f      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000bd2:	1a1b      	subs	r3, r3, r0
 8000bd4:	015e      	lsls	r6, r3, #5
 8000bd6:	d400      	bmi.n	8000bda <__aeabi_fsub+0x17e>
 8000bd8:	e0d6      	b.n	8000d88 <__aeabi_fsub+0x32c>
 8000bda:	4663      	mov	r3, ip
 8000bdc:	000c      	movs	r4, r1
 8000bde:	1ac3      	subs	r3, r0, r3
 8000be0:	e776      	b.n	8000ad0 <__aeabi_fsub+0x74>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d036      	beq.n	8000c54 <__aeabi_fsub+0x1f8>
 8000be6:	1e51      	subs	r1, r2, #1
 8000be8:	2a01      	cmp	r2, #1
 8000bea:	d100      	bne.n	8000bee <__aeabi_fsub+0x192>
 8000bec:	e09a      	b.n	8000d24 <__aeabi_fsub+0x2c8>
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d026      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	e78f      	b.n	8000b16 <__aeabi_fsub+0xba>
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e77a      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000bfc:	27fe      	movs	r7, #254	; 0xfe
 8000bfe:	1c6a      	adds	r2, r5, #1
 8000c00:	4217      	tst	r7, r2
 8000c02:	d062      	beq.n	8000cca <__aeabi_fsub+0x26e>
 8000c04:	2aff      	cmp	r2, #255	; 0xff
 8000c06:	d0f6      	beq.n	8000bf6 <__aeabi_fsub+0x19a>
 8000c08:	0015      	movs	r5, r2
 8000c0a:	4460      	add	r0, ip
 8000c0c:	0843      	lsrs	r3, r0, #1
 8000c0e:	075a      	lsls	r2, r3, #29
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fsub+0x1b8>
 8000c12:	e75f      	b.n	8000ad4 <__aeabi_fsub+0x78>
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	2dff      	cmp	r5, #255	; 0xff
 8000c18:	d012      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c1a:	025b      	lsls	r3, r3, #9
 8000c1c:	0a5e      	lsrs	r6, r3, #9
 8000c1e:	b2ea      	uxtb	r2, r5
 8000c20:	e767      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000c22:	4662      	mov	r2, ip
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fsub+0x1ce>
 8000c28:	e093      	b.n	8000d52 <__aeabi_fsub+0x2f6>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d008      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	03d2      	lsls	r2, r2, #15
 8000c32:	4213      	tst	r3, r2
 8000c34:	d004      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c36:	4640      	mov	r0, r8
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d101      	bne.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0d8      	beq.n	8000bf6 <__aeabi_fsub+0x19a>
 8000c44:	2680      	movs	r6, #128	; 0x80
 8000c46:	03f6      	lsls	r6, r6, #15
 8000c48:	431e      	orrs	r6, r3
 8000c4a:	0276      	lsls	r6, r6, #9
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	0a76      	lsrs	r6, r6, #9
 8000c50:	e74f      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000c52:	4643      	mov	r3, r8
 8000c54:	0015      	movs	r5, r2
 8000c56:	e7de      	b.n	8000c16 <__aeabi_fsub+0x1ba>
 8000c58:	2220      	movs	r2, #32
 8000c5a:	1b40      	subs	r0, r0, r5
 8000c5c:	3001      	adds	r0, #1
 8000c5e:	1a12      	subs	r2, r2, r0
 8000c60:	0019      	movs	r1, r3
 8000c62:	4093      	lsls	r3, r2
 8000c64:	40c1      	lsrs	r1, r0
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	4193      	sbcs	r3, r2
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	e72f      	b.n	8000ad0 <__aeabi_fsub+0x74>
 8000c70:	2320      	movs	r3, #32
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	0001      	movs	r1, r0
 8000c76:	4098      	lsls	r0, r3
 8000c78:	0003      	movs	r3, r0
 8000c7a:	40d1      	lsrs	r1, r2
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	4193      	sbcs	r3, r2
 8000c80:	430b      	orrs	r3, r1
 8000c82:	e712      	b.n	8000aaa <__aeabi_fsub+0x4e>
 8000c84:	2fff      	cmp	r7, #255	; 0xff
 8000c86:	d0d9      	beq.n	8000c3c <__aeabi_fsub+0x1e0>
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	4664      	mov	r4, ip
 8000c8c:	04db      	lsls	r3, r3, #19
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	46a4      	mov	ip, r4
 8000c92:	2a1b      	cmp	r2, #27
 8000c94:	dd52      	ble.n	8000d3c <__aeabi_fsub+0x2e0>
 8000c96:	2301      	movs	r3, #1
 8000c98:	000c      	movs	r4, r1
 8000c9a:	003d      	movs	r5, r7
 8000c9c:	1ac3      	subs	r3, r0, r3
 8000c9e:	e706      	b.n	8000aae <__aeabi_fsub+0x52>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	1a1e      	subs	r6, r3, r0
 8000ca4:	0173      	lsls	r3, r6, #5
 8000ca6:	d439      	bmi.n	8000d1c <__aeabi_fsub+0x2c0>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d000      	beq.n	8000cae <__aeabi_fsub+0x252>
 8000cac:	e704      	b.n	8000ab8 <__aeabi_fsub+0x5c>
 8000cae:	2400      	movs	r4, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	e71d      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	0001      	movs	r1, r0
 8000cbc:	4098      	lsls	r0, r3
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	40d1      	lsrs	r1, r2
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4193      	sbcs	r3, r2
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	e729      	b.n	8000b1e <__aeabi_fsub+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d1a9      	bne.n	8000c22 <__aeabi_fsub+0x1c6>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d056      	beq.n	8000d82 <__aeabi_fsub+0x326>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x280>
 8000cda:	e70a      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	4463      	add	r3, ip
 8000ce0:	015a      	lsls	r2, r3, #5
 8000ce2:	d594      	bpl.n	8000c0e <__aeabi_fsub+0x1b2>
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <__aeabi_fsub+0x338>)
 8000ce6:	3501      	adds	r5, #1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	e790      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000cec:	4663      	mov	r3, ip
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0af      	beq.n	8000c52 <__aeabi_fsub+0x1f6>
 8000cf2:	1e53      	subs	r3, r2, #1
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	d015      	beq.n	8000d24 <__aeabi_fsub+0x2c8>
 8000cf8:	2aff      	cmp	r2, #255	; 0xff
 8000cfa:	d02a      	beq.n	8000d52 <__aeabi_fsub+0x2f6>
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	e752      	b.n	8000ba6 <__aeabi_fsub+0x14a>
 8000d00:	4662      	mov	r2, ip
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d191      	bne.n	8000c2a <__aeabi_fsub+0x1ce>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d198      	bne.n	8000c3c <__aeabi_fsub+0x1e0>
 8000d0a:	2680      	movs	r6, #128	; 0x80
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	03f6      	lsls	r6, r6, #15
 8000d12:	e6ee      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d14:	000c      	movs	r4, r1
 8000d16:	4643      	mov	r3, r8
 8000d18:	0015      	movs	r5, r2
 8000d1a:	e77c      	b.n	8000c16 <__aeabi_fsub+0x1ba>
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	000c      	movs	r4, r1
 8000d20:	1ac6      	subs	r6, r0, r3
 8000d22:	e6c9      	b.n	8000ab8 <__aeabi_fsub+0x5c>
 8000d24:	0003      	movs	r3, r0
 8000d26:	4463      	add	r3, ip
 8000d28:	2501      	movs	r5, #1
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d400      	bmi.n	8000d30 <__aeabi_fsub+0x2d4>
 8000d2e:	e76e      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000d30:	2502      	movs	r5, #2
 8000d32:	e6fa      	b.n	8000b2a <__aeabi_fsub+0xce>
 8000d34:	4663      	mov	r3, ip
 8000d36:	2501      	movs	r5, #1
 8000d38:	1a1b      	subs	r3, r3, r0
 8000d3a:	e6b8      	b.n	8000aae <__aeabi_fsub+0x52>
 8000d3c:	4664      	mov	r4, ip
 8000d3e:	2320      	movs	r3, #32
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	4662      	mov	r2, ip
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	4193      	sbcs	r3, r2
 8000d4e:	4323      	orrs	r3, r4
 8000d50:	e7a2      	b.n	8000c98 <__aeabi_fsub+0x23c>
 8000d52:	4643      	mov	r3, r8
 8000d54:	e774      	b.n	8000c40 <__aeabi_fsub+0x1e4>
 8000d56:	4661      	mov	r1, ip
 8000d58:	2320      	movs	r3, #32
 8000d5a:	40d1      	lsrs	r1, r2
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	4662      	mov	r2, ip
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	1e5a      	subs	r2, r3, #1
 8000d66:	4193      	sbcs	r3, r2
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	e720      	b.n	8000bae <__aeabi_fsub+0x152>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2501      	movs	r5, #1
 8000d72:	1ac3      	subs	r3, r0, r3
 8000d74:	e69b      	b.n	8000aae <__aeabi_fsub+0x52>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d099      	beq.n	8000cae <__aeabi_fsub+0x252>
 8000d7a:	000c      	movs	r4, r1
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	e6b7      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d82:	4646      	mov	r6, r8
 8000d84:	2200      	movs	r2, #0
 8000d86:	e6b4      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fsub+0x332>
 8000d8c:	e73f      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000d8e:	2400      	movs	r4, #0
 8000d90:	2600      	movs	r6, #0
 8000d92:	e6ae      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d94:	fbffffff 	.word	0xfbffffff
 8000d98:	7dffffff 	.word	0x7dffffff

08000d9c <__aeabi_f2iz>:
 8000d9c:	0241      	lsls	r1, r0, #9
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0fc3      	lsrs	r3, r0, #31
 8000da2:	0a49      	lsrs	r1, r1, #9
 8000da4:	2000      	movs	r0, #0
 8000da6:	0e12      	lsrs	r2, r2, #24
 8000da8:	2a7e      	cmp	r2, #126	; 0x7e
 8000daa:	dd03      	ble.n	8000db4 <__aeabi_f2iz+0x18>
 8000dac:	2a9d      	cmp	r2, #157	; 0x9d
 8000dae:	dd02      	ble.n	8000db6 <__aeabi_f2iz+0x1a>
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <__aeabi_f2iz+0x3c>)
 8000db2:	1898      	adds	r0, r3, r2
 8000db4:	4770      	bx	lr
 8000db6:	2080      	movs	r0, #128	; 0x80
 8000db8:	0400      	lsls	r0, r0, #16
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	2a95      	cmp	r2, #149	; 0x95
 8000dbe:	dc07      	bgt.n	8000dd0 <__aeabi_f2iz+0x34>
 8000dc0:	2096      	movs	r0, #150	; 0x96
 8000dc2:	1a82      	subs	r2, r0, r2
 8000dc4:	40d1      	lsrs	r1, r2
 8000dc6:	4248      	negs	r0, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_f2iz+0x18>
 8000dcc:	0008      	movs	r0, r1
 8000dce:	e7f1      	b.n	8000db4 <__aeabi_f2iz+0x18>
 8000dd0:	3a96      	subs	r2, #150	; 0x96
 8000dd2:	4091      	lsls	r1, r2
 8000dd4:	e7f7      	b.n	8000dc6 <__aeabi_f2iz+0x2a>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	7fffffff 	.word	0x7fffffff

08000ddc <__aeabi_i2f>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d013      	beq.n	8000e0a <__aeabi_i2f+0x2e>
 8000de2:	17c3      	asrs	r3, r0, #31
 8000de4:	18c5      	adds	r5, r0, r3
 8000de6:	405d      	eors	r5, r3
 8000de8:	0fc4      	lsrs	r4, r0, #31
 8000dea:	0028      	movs	r0, r5
 8000dec:	f001 fef0 	bl	8002bd0 <__clzsi2>
 8000df0:	239e      	movs	r3, #158	; 0x9e
 8000df2:	0001      	movs	r1, r0
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	2b96      	cmp	r3, #150	; 0x96
 8000df8:	dc0f      	bgt.n	8000e1a <__aeabi_i2f+0x3e>
 8000dfa:	2808      	cmp	r0, #8
 8000dfc:	d031      	beq.n	8000e62 <__aeabi_i2f+0x86>
 8000dfe:	3908      	subs	r1, #8
 8000e00:	408d      	lsls	r5, r1
 8000e02:	026d      	lsls	r5, r5, #9
 8000e04:	0a6d      	lsrs	r5, r5, #9
 8000e06:	b2d8      	uxtb	r0, r3
 8000e08:	e002      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2500      	movs	r5, #0
 8000e10:	05c0      	lsls	r0, r0, #23
 8000e12:	4328      	orrs	r0, r5
 8000e14:	07e4      	lsls	r4, r4, #31
 8000e16:	4320      	orrs	r0, r4
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	2b99      	cmp	r3, #153	; 0x99
 8000e1c:	dd0c      	ble.n	8000e38 <__aeabi_i2f+0x5c>
 8000e1e:	2205      	movs	r2, #5
 8000e20:	1a12      	subs	r2, r2, r0
 8000e22:	0028      	movs	r0, r5
 8000e24:	40d0      	lsrs	r0, r2
 8000e26:	0002      	movs	r2, r0
 8000e28:	0008      	movs	r0, r1
 8000e2a:	301b      	adds	r0, #27
 8000e2c:	4085      	lsls	r5, r0
 8000e2e:	0028      	movs	r0, r5
 8000e30:	1e45      	subs	r5, r0, #1
 8000e32:	41a8      	sbcs	r0, r5
 8000e34:	4302      	orrs	r2, r0
 8000e36:	0015      	movs	r5, r2
 8000e38:	2905      	cmp	r1, #5
 8000e3a:	dc16      	bgt.n	8000e6a <__aeabi_i2f+0x8e>
 8000e3c:	002a      	movs	r2, r5
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <__aeabi_i2f+0xa0>)
 8000e40:	4002      	ands	r2, r0
 8000e42:	076e      	lsls	r6, r5, #29
 8000e44:	d009      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e46:	260f      	movs	r6, #15
 8000e48:	4035      	ands	r5, r6
 8000e4a:	2d04      	cmp	r5, #4
 8000e4c:	d005      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e4e:	3204      	adds	r2, #4
 8000e50:	0155      	lsls	r5, r2, #5
 8000e52:	d502      	bpl.n	8000e5a <__aeabi_i2f+0x7e>
 8000e54:	239f      	movs	r3, #159	; 0x9f
 8000e56:	4002      	ands	r2, r0
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	0192      	lsls	r2, r2, #6
 8000e5c:	0a55      	lsrs	r5, r2, #9
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	e7d6      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e62:	026d      	lsls	r5, r5, #9
 8000e64:	2096      	movs	r0, #150	; 0x96
 8000e66:	0a6d      	lsrs	r5, r5, #9
 8000e68:	e7d2      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e6a:	1f4a      	subs	r2, r1, #5
 8000e6c:	4095      	lsls	r5, r2
 8000e6e:	002a      	movs	r2, r5
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <__aeabi_i2f+0xa0>)
 8000e72:	4002      	ands	r2, r0
 8000e74:	076e      	lsls	r6, r5, #29
 8000e76:	d0f0      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e78:	e7e5      	b.n	8000e46 <__aeabi_i2f+0x6a>
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	fbffffff 	.word	0xfbffffff

08000e80 <__aeabi_dadd>:
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e82:	464f      	mov	r7, r9
 8000e84:	4646      	mov	r6, r8
 8000e86:	46d6      	mov	lr, sl
 8000e88:	0004      	movs	r4, r0
 8000e8a:	b5c0      	push	{r6, r7, lr}
 8000e8c:	001f      	movs	r7, r3
 8000e8e:	030b      	lsls	r3, r1, #12
 8000e90:	0010      	movs	r0, r2
 8000e92:	004e      	lsls	r6, r1, #1
 8000e94:	0a5b      	lsrs	r3, r3, #9
 8000e96:	0fcd      	lsrs	r5, r1, #31
 8000e98:	0f61      	lsrs	r1, r4, #29
 8000e9a:	007a      	lsls	r2, r7, #1
 8000e9c:	4319      	orrs	r1, r3
 8000e9e:	00e3      	lsls	r3, r4, #3
 8000ea0:	033c      	lsls	r4, r7, #12
 8000ea2:	0fff      	lsrs	r7, r7, #31
 8000ea4:	46bc      	mov	ip, r7
 8000ea6:	0a64      	lsrs	r4, r4, #9
 8000ea8:	0f47      	lsrs	r7, r0, #29
 8000eaa:	4327      	orrs	r7, r4
 8000eac:	0d76      	lsrs	r6, r6, #21
 8000eae:	0d52      	lsrs	r2, r2, #21
 8000eb0:	00c0      	lsls	r0, r0, #3
 8000eb2:	46b9      	mov	r9, r7
 8000eb4:	4680      	mov	r8, r0
 8000eb6:	1ab7      	subs	r7, r6, r2
 8000eb8:	4565      	cmp	r5, ip
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0x3e>
 8000ebc:	e09b      	b.n	8000ff6 <__aeabi_dadd+0x176>
 8000ebe:	2f00      	cmp	r7, #0
 8000ec0:	dc00      	bgt.n	8000ec4 <__aeabi_dadd+0x44>
 8000ec2:	e084      	b.n	8000fce <__aeabi_dadd+0x14e>
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x4a>
 8000ec8:	e0be      	b.n	8001048 <__aeabi_dadd+0x1c8>
 8000eca:	4ac8      	ldr	r2, [pc, #800]	; (80011ec <__aeabi_dadd+0x36c>)
 8000ecc:	4296      	cmp	r6, r2
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_dadd+0x52>
 8000ed0:	e124      	b.n	800111c <__aeabi_dadd+0x29c>
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	464c      	mov	r4, r9
 8000ed6:	0412      	lsls	r2, r2, #16
 8000ed8:	4314      	orrs	r4, r2
 8000eda:	46a1      	mov	r9, r4
 8000edc:	2f38      	cmp	r7, #56	; 0x38
 8000ede:	dd00      	ble.n	8000ee2 <__aeabi_dadd+0x62>
 8000ee0:	e167      	b.n	80011b2 <__aeabi_dadd+0x332>
 8000ee2:	2f1f      	cmp	r7, #31
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_dadd+0x68>
 8000ee6:	e1d6      	b.n	8001296 <__aeabi_dadd+0x416>
 8000ee8:	2220      	movs	r2, #32
 8000eea:	464c      	mov	r4, r9
 8000eec:	1bd2      	subs	r2, r2, r7
 8000eee:	4094      	lsls	r4, r2
 8000ef0:	46a2      	mov	sl, r4
 8000ef2:	4644      	mov	r4, r8
 8000ef4:	40fc      	lsrs	r4, r7
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	4654      	mov	r4, sl
 8000efa:	4304      	orrs	r4, r0
 8000efc:	4640      	mov	r0, r8
 8000efe:	4090      	lsls	r0, r2
 8000f00:	1e42      	subs	r2, r0, #1
 8000f02:	4190      	sbcs	r0, r2
 8000f04:	464a      	mov	r2, r9
 8000f06:	40fa      	lsrs	r2, r7
 8000f08:	4304      	orrs	r4, r0
 8000f0a:	1a89      	subs	r1, r1, r2
 8000f0c:	1b1c      	subs	r4, r3, r4
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	4192      	sbcs	r2, r2
 8000f12:	4252      	negs	r2, r2
 8000f14:	1a8b      	subs	r3, r1, r2
 8000f16:	469a      	mov	sl, r3
 8000f18:	4653      	mov	r3, sl
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	d400      	bmi.n	8000f20 <__aeabi_dadd+0xa0>
 8000f1e:	e0d4      	b.n	80010ca <__aeabi_dadd+0x24a>
 8000f20:	4653      	mov	r3, sl
 8000f22:	025a      	lsls	r2, r3, #9
 8000f24:	0a53      	lsrs	r3, r2, #9
 8000f26:	469a      	mov	sl, r3
 8000f28:	4653      	mov	r3, sl
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dadd+0xb0>
 8000f2e:	e104      	b.n	800113a <__aeabi_dadd+0x2ba>
 8000f30:	4650      	mov	r0, sl
 8000f32:	f001 fe4d 	bl	8002bd0 <__clzsi2>
 8000f36:	0003      	movs	r3, r0
 8000f38:	3b08      	subs	r3, #8
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	0020      	movs	r0, r4
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	4651      	mov	r1, sl
 8000f42:	40d0      	lsrs	r0, r2
 8000f44:	4099      	lsls	r1, r3
 8000f46:	0002      	movs	r2, r0
 8000f48:	409c      	lsls	r4, r3
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	42b3      	cmp	r3, r6
 8000f4e:	da00      	bge.n	8000f52 <__aeabi_dadd+0xd2>
 8000f50:	e102      	b.n	8001158 <__aeabi_dadd+0x2d8>
 8000f52:	1b9b      	subs	r3, r3, r6
 8000f54:	1c59      	adds	r1, r3, #1
 8000f56:	291f      	cmp	r1, #31
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dadd+0xdc>
 8000f5a:	e0a7      	b.n	80010ac <__aeabi_dadd+0x22c>
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	0010      	movs	r0, r2
 8000f60:	0026      	movs	r6, r4
 8000f62:	1a5b      	subs	r3, r3, r1
 8000f64:	409c      	lsls	r4, r3
 8000f66:	4098      	lsls	r0, r3
 8000f68:	40ce      	lsrs	r6, r1
 8000f6a:	40ca      	lsrs	r2, r1
 8000f6c:	1e63      	subs	r3, r4, #1
 8000f6e:	419c      	sbcs	r4, r3
 8000f70:	4330      	orrs	r0, r6
 8000f72:	4692      	mov	sl, r2
 8000f74:	2600      	movs	r6, #0
 8000f76:	4304      	orrs	r4, r0
 8000f78:	0763      	lsls	r3, r4, #29
 8000f7a:	d009      	beq.n	8000f90 <__aeabi_dadd+0x110>
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	4023      	ands	r3, r4
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d005      	beq.n	8000f90 <__aeabi_dadd+0x110>
 8000f84:	1d23      	adds	r3, r4, #4
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	41a4      	sbcs	r4, r4
 8000f8a:	4264      	negs	r4, r4
 8000f8c:	44a2      	add	sl, r4
 8000f8e:	001c      	movs	r4, r3
 8000f90:	4653      	mov	r3, sl
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	d400      	bmi.n	8000f98 <__aeabi_dadd+0x118>
 8000f96:	e09b      	b.n	80010d0 <__aeabi_dadd+0x250>
 8000f98:	4b94      	ldr	r3, [pc, #592]	; (80011ec <__aeabi_dadd+0x36c>)
 8000f9a:	3601      	adds	r6, #1
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dadd+0x122>
 8000fa0:	e0b8      	b.n	8001114 <__aeabi_dadd+0x294>
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	4992      	ldr	r1, [pc, #584]	; (80011f0 <__aeabi_dadd+0x370>)
 8000fa6:	08e4      	lsrs	r4, r4, #3
 8000fa8:	400b      	ands	r3, r1
 8000faa:	0019      	movs	r1, r3
 8000fac:	075b      	lsls	r3, r3, #29
 8000fae:	4323      	orrs	r3, r4
 8000fb0:	0572      	lsls	r2, r6, #21
 8000fb2:	024c      	lsls	r4, r1, #9
 8000fb4:	0b24      	lsrs	r4, r4, #12
 8000fb6:	0d52      	lsrs	r2, r2, #21
 8000fb8:	0512      	lsls	r2, r2, #20
 8000fba:	07ed      	lsls	r5, r5, #31
 8000fbc:	4322      	orrs	r2, r4
 8000fbe:	432a      	orrs	r2, r5
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	bce0      	pop	{r5, r6, r7}
 8000fc6:	46ba      	mov	sl, r7
 8000fc8:	46b1      	mov	r9, r6
 8000fca:	46a8      	mov	r8, r5
 8000fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fce:	2f00      	cmp	r7, #0
 8000fd0:	d048      	beq.n	8001064 <__aeabi_dadd+0x1e4>
 8000fd2:	1b97      	subs	r7, r2, r6
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dadd+0x15a>
 8000fd8:	e10e      	b.n	80011f8 <__aeabi_dadd+0x378>
 8000fda:	000c      	movs	r4, r1
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dadd+0x162>
 8000fe0:	e1b7      	b.n	8001352 <__aeabi_dadd+0x4d2>
 8000fe2:	1e7c      	subs	r4, r7, #1
 8000fe4:	2f01      	cmp	r7, #1
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dadd+0x16a>
 8000fe8:	e226      	b.n	8001438 <__aeabi_dadd+0x5b8>
 8000fea:	4d80      	ldr	r5, [pc, #512]	; (80011ec <__aeabi_dadd+0x36c>)
 8000fec:	42af      	cmp	r7, r5
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_dadd+0x172>
 8000ff0:	e1d5      	b.n	800139e <__aeabi_dadd+0x51e>
 8000ff2:	0027      	movs	r7, r4
 8000ff4:	e107      	b.n	8001206 <__aeabi_dadd+0x386>
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	dc00      	bgt.n	8000ffc <__aeabi_dadd+0x17c>
 8000ffa:	e0b2      	b.n	8001162 <__aeabi_dadd+0x2e2>
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d047      	beq.n	8001090 <__aeabi_dadd+0x210>
 8001000:	4a7a      	ldr	r2, [pc, #488]	; (80011ec <__aeabi_dadd+0x36c>)
 8001002:	4296      	cmp	r6, r2
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x188>
 8001006:	e089      	b.n	800111c <__aeabi_dadd+0x29c>
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	464c      	mov	r4, r9
 800100c:	0412      	lsls	r2, r2, #16
 800100e:	4314      	orrs	r4, r2
 8001010:	46a1      	mov	r9, r4
 8001012:	2f38      	cmp	r7, #56	; 0x38
 8001014:	dc6b      	bgt.n	80010ee <__aeabi_dadd+0x26e>
 8001016:	2f1f      	cmp	r7, #31
 8001018:	dc00      	bgt.n	800101c <__aeabi_dadd+0x19c>
 800101a:	e16e      	b.n	80012fa <__aeabi_dadd+0x47a>
 800101c:	003a      	movs	r2, r7
 800101e:	4648      	mov	r0, r9
 8001020:	3a20      	subs	r2, #32
 8001022:	40d0      	lsrs	r0, r2
 8001024:	4684      	mov	ip, r0
 8001026:	2f20      	cmp	r7, #32
 8001028:	d007      	beq.n	800103a <__aeabi_dadd+0x1ba>
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	4648      	mov	r0, r9
 800102e:	1bd2      	subs	r2, r2, r7
 8001030:	4090      	lsls	r0, r2
 8001032:	0002      	movs	r2, r0
 8001034:	4640      	mov	r0, r8
 8001036:	4310      	orrs	r0, r2
 8001038:	4680      	mov	r8, r0
 800103a:	4640      	mov	r0, r8
 800103c:	1e42      	subs	r2, r0, #1
 800103e:	4190      	sbcs	r0, r2
 8001040:	4662      	mov	r2, ip
 8001042:	0004      	movs	r4, r0
 8001044:	4314      	orrs	r4, r2
 8001046:	e057      	b.n	80010f8 <__aeabi_dadd+0x278>
 8001048:	464a      	mov	r2, r9
 800104a:	4302      	orrs	r2, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_dadd+0x1d0>
 800104e:	e103      	b.n	8001258 <__aeabi_dadd+0x3d8>
 8001050:	1e7a      	subs	r2, r7, #1
 8001052:	2f01      	cmp	r7, #1
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0x1d8>
 8001056:	e193      	b.n	8001380 <__aeabi_dadd+0x500>
 8001058:	4c64      	ldr	r4, [pc, #400]	; (80011ec <__aeabi_dadd+0x36c>)
 800105a:	42a7      	cmp	r7, r4
 800105c:	d100      	bne.n	8001060 <__aeabi_dadd+0x1e0>
 800105e:	e18a      	b.n	8001376 <__aeabi_dadd+0x4f6>
 8001060:	0017      	movs	r7, r2
 8001062:	e73b      	b.n	8000edc <__aeabi_dadd+0x5c>
 8001064:	4c63      	ldr	r4, [pc, #396]	; (80011f4 <__aeabi_dadd+0x374>)
 8001066:	1c72      	adds	r2, r6, #1
 8001068:	4222      	tst	r2, r4
 800106a:	d000      	beq.n	800106e <__aeabi_dadd+0x1ee>
 800106c:	e0e0      	b.n	8001230 <__aeabi_dadd+0x3b0>
 800106e:	000a      	movs	r2, r1
 8001070:	431a      	orrs	r2, r3
 8001072:	2e00      	cmp	r6, #0
 8001074:	d000      	beq.n	8001078 <__aeabi_dadd+0x1f8>
 8001076:	e174      	b.n	8001362 <__aeabi_dadd+0x4e2>
 8001078:	2a00      	cmp	r2, #0
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x1fe>
 800107c:	e1d0      	b.n	8001420 <__aeabi_dadd+0x5a0>
 800107e:	464a      	mov	r2, r9
 8001080:	4302      	orrs	r2, r0
 8001082:	d000      	beq.n	8001086 <__aeabi_dadd+0x206>
 8001084:	e1e3      	b.n	800144e <__aeabi_dadd+0x5ce>
 8001086:	074a      	lsls	r2, r1, #29
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	4313      	orrs	r3, r2
 800108c:	08c9      	lsrs	r1, r1, #3
 800108e:	e029      	b.n	80010e4 <__aeabi_dadd+0x264>
 8001090:	464a      	mov	r2, r9
 8001092:	4302      	orrs	r2, r0
 8001094:	d100      	bne.n	8001098 <__aeabi_dadd+0x218>
 8001096:	e17d      	b.n	8001394 <__aeabi_dadd+0x514>
 8001098:	1e7a      	subs	r2, r7, #1
 800109a:	2f01      	cmp	r7, #1
 800109c:	d100      	bne.n	80010a0 <__aeabi_dadd+0x220>
 800109e:	e0e0      	b.n	8001262 <__aeabi_dadd+0x3e2>
 80010a0:	4c52      	ldr	r4, [pc, #328]	; (80011ec <__aeabi_dadd+0x36c>)
 80010a2:	42a7      	cmp	r7, r4
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dadd+0x228>
 80010a6:	e166      	b.n	8001376 <__aeabi_dadd+0x4f6>
 80010a8:	0017      	movs	r7, r2
 80010aa:	e7b2      	b.n	8001012 <__aeabi_dadd+0x192>
 80010ac:	0010      	movs	r0, r2
 80010ae:	3b1f      	subs	r3, #31
 80010b0:	40d8      	lsrs	r0, r3
 80010b2:	2920      	cmp	r1, #32
 80010b4:	d003      	beq.n	80010be <__aeabi_dadd+0x23e>
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	1a5b      	subs	r3, r3, r1
 80010ba:	409a      	lsls	r2, r3
 80010bc:	4314      	orrs	r4, r2
 80010be:	1e63      	subs	r3, r4, #1
 80010c0:	419c      	sbcs	r4, r3
 80010c2:	2300      	movs	r3, #0
 80010c4:	2600      	movs	r6, #0
 80010c6:	469a      	mov	sl, r3
 80010c8:	4304      	orrs	r4, r0
 80010ca:	0763      	lsls	r3, r4, #29
 80010cc:	d000      	beq.n	80010d0 <__aeabi_dadd+0x250>
 80010ce:	e755      	b.n	8000f7c <__aeabi_dadd+0xfc>
 80010d0:	4652      	mov	r2, sl
 80010d2:	08e3      	lsrs	r3, r4, #3
 80010d4:	0752      	lsls	r2, r2, #29
 80010d6:	4313      	orrs	r3, r2
 80010d8:	4652      	mov	r2, sl
 80010da:	0037      	movs	r7, r6
 80010dc:	08d1      	lsrs	r1, r2, #3
 80010de:	4a43      	ldr	r2, [pc, #268]	; (80011ec <__aeabi_dadd+0x36c>)
 80010e0:	4297      	cmp	r7, r2
 80010e2:	d01f      	beq.n	8001124 <__aeabi_dadd+0x2a4>
 80010e4:	0309      	lsls	r1, r1, #12
 80010e6:	057a      	lsls	r2, r7, #21
 80010e8:	0b0c      	lsrs	r4, r1, #12
 80010ea:	0d52      	lsrs	r2, r2, #21
 80010ec:	e764      	b.n	8000fb8 <__aeabi_dadd+0x138>
 80010ee:	4642      	mov	r2, r8
 80010f0:	464c      	mov	r4, r9
 80010f2:	4314      	orrs	r4, r2
 80010f4:	1e62      	subs	r2, r4, #1
 80010f6:	4194      	sbcs	r4, r2
 80010f8:	18e4      	adds	r4, r4, r3
 80010fa:	429c      	cmp	r4, r3
 80010fc:	4192      	sbcs	r2, r2
 80010fe:	4252      	negs	r2, r2
 8001100:	4692      	mov	sl, r2
 8001102:	448a      	add	sl, r1
 8001104:	4653      	mov	r3, sl
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	d5df      	bpl.n	80010ca <__aeabi_dadd+0x24a>
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <__aeabi_dadd+0x36c>)
 800110c:	3601      	adds	r6, #1
 800110e:	429e      	cmp	r6, r3
 8001110:	d000      	beq.n	8001114 <__aeabi_dadd+0x294>
 8001112:	e0b3      	b.n	800127c <__aeabi_dadd+0x3fc>
 8001114:	0032      	movs	r2, r6
 8001116:	2400      	movs	r4, #0
 8001118:	2300      	movs	r3, #0
 800111a:	e74d      	b.n	8000fb8 <__aeabi_dadd+0x138>
 800111c:	074a      	lsls	r2, r1, #29
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	4313      	orrs	r3, r2
 8001122:	08c9      	lsrs	r1, r1, #3
 8001124:	001a      	movs	r2, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	d100      	bne.n	800112c <__aeabi_dadd+0x2ac>
 800112a:	e200      	b.n	800152e <__aeabi_dadd+0x6ae>
 800112c:	2480      	movs	r4, #128	; 0x80
 800112e:	0324      	lsls	r4, r4, #12
 8001130:	430c      	orrs	r4, r1
 8001132:	0324      	lsls	r4, r4, #12
 8001134:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <__aeabi_dadd+0x36c>)
 8001136:	0b24      	lsrs	r4, r4, #12
 8001138:	e73e      	b.n	8000fb8 <__aeabi_dadd+0x138>
 800113a:	0020      	movs	r0, r4
 800113c:	f001 fd48 	bl	8002bd0 <__clzsi2>
 8001140:	0003      	movs	r3, r0
 8001142:	3318      	adds	r3, #24
 8001144:	2b1f      	cmp	r3, #31
 8001146:	dc00      	bgt.n	800114a <__aeabi_dadd+0x2ca>
 8001148:	e6f7      	b.n	8000f3a <__aeabi_dadd+0xba>
 800114a:	0022      	movs	r2, r4
 800114c:	3808      	subs	r0, #8
 800114e:	4082      	lsls	r2, r0
 8001150:	2400      	movs	r4, #0
 8001152:	42b3      	cmp	r3, r6
 8001154:	db00      	blt.n	8001158 <__aeabi_dadd+0x2d8>
 8001156:	e6fc      	b.n	8000f52 <__aeabi_dadd+0xd2>
 8001158:	1af6      	subs	r6, r6, r3
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <__aeabi_dadd+0x370>)
 800115c:	401a      	ands	r2, r3
 800115e:	4692      	mov	sl, r2
 8001160:	e70a      	b.n	8000f78 <__aeabi_dadd+0xf8>
 8001162:	2f00      	cmp	r7, #0
 8001164:	d02b      	beq.n	80011be <__aeabi_dadd+0x33e>
 8001166:	1b97      	subs	r7, r2, r6
 8001168:	2e00      	cmp	r6, #0
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x2ee>
 800116c:	e0b8      	b.n	80012e0 <__aeabi_dadd+0x460>
 800116e:	4c1f      	ldr	r4, [pc, #124]	; (80011ec <__aeabi_dadd+0x36c>)
 8001170:	42a2      	cmp	r2, r4
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x2f6>
 8001174:	e11c      	b.n	80013b0 <__aeabi_dadd+0x530>
 8001176:	2480      	movs	r4, #128	; 0x80
 8001178:	0424      	lsls	r4, r4, #16
 800117a:	4321      	orrs	r1, r4
 800117c:	2f38      	cmp	r7, #56	; 0x38
 800117e:	dd00      	ble.n	8001182 <__aeabi_dadd+0x302>
 8001180:	e11e      	b.n	80013c0 <__aeabi_dadd+0x540>
 8001182:	2f1f      	cmp	r7, #31
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x308>
 8001186:	e19e      	b.n	80014c6 <__aeabi_dadd+0x646>
 8001188:	2620      	movs	r6, #32
 800118a:	000c      	movs	r4, r1
 800118c:	1bf6      	subs	r6, r6, r7
 800118e:	0018      	movs	r0, r3
 8001190:	40b3      	lsls	r3, r6
 8001192:	40b4      	lsls	r4, r6
 8001194:	40f8      	lsrs	r0, r7
 8001196:	1e5e      	subs	r6, r3, #1
 8001198:	41b3      	sbcs	r3, r6
 800119a:	40f9      	lsrs	r1, r7
 800119c:	4304      	orrs	r4, r0
 800119e:	431c      	orrs	r4, r3
 80011a0:	4489      	add	r9, r1
 80011a2:	4444      	add	r4, r8
 80011a4:	4544      	cmp	r4, r8
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	425b      	negs	r3, r3
 80011aa:	444b      	add	r3, r9
 80011ac:	469a      	mov	sl, r3
 80011ae:	0016      	movs	r6, r2
 80011b0:	e7a8      	b.n	8001104 <__aeabi_dadd+0x284>
 80011b2:	4642      	mov	r2, r8
 80011b4:	464c      	mov	r4, r9
 80011b6:	4314      	orrs	r4, r2
 80011b8:	1e62      	subs	r2, r4, #1
 80011ba:	4194      	sbcs	r4, r2
 80011bc:	e6a6      	b.n	8000f0c <__aeabi_dadd+0x8c>
 80011be:	4c0d      	ldr	r4, [pc, #52]	; (80011f4 <__aeabi_dadd+0x374>)
 80011c0:	1c72      	adds	r2, r6, #1
 80011c2:	4222      	tst	r2, r4
 80011c4:	d000      	beq.n	80011c8 <__aeabi_dadd+0x348>
 80011c6:	e0a8      	b.n	800131a <__aeabi_dadd+0x49a>
 80011c8:	000a      	movs	r2, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dadd+0x352>
 80011d0:	e10a      	b.n	80013e8 <__aeabi_dadd+0x568>
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x358>
 80011d6:	e15e      	b.n	8001496 <__aeabi_dadd+0x616>
 80011d8:	464a      	mov	r2, r9
 80011da:	4302      	orrs	r2, r0
 80011dc:	d000      	beq.n	80011e0 <__aeabi_dadd+0x360>
 80011de:	e161      	b.n	80014a4 <__aeabi_dadd+0x624>
 80011e0:	074a      	lsls	r2, r1, #29
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	08c9      	lsrs	r1, r1, #3
 80011e8:	e77c      	b.n	80010e4 <__aeabi_dadd+0x264>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	ff7fffff 	.word	0xff7fffff
 80011f4:	000007fe 	.word	0x000007fe
 80011f8:	4ccf      	ldr	r4, [pc, #828]	; (8001538 <__aeabi_dadd+0x6b8>)
 80011fa:	42a2      	cmp	r2, r4
 80011fc:	d100      	bne.n	8001200 <__aeabi_dadd+0x380>
 80011fe:	e0ce      	b.n	800139e <__aeabi_dadd+0x51e>
 8001200:	2480      	movs	r4, #128	; 0x80
 8001202:	0424      	lsls	r4, r4, #16
 8001204:	4321      	orrs	r1, r4
 8001206:	2f38      	cmp	r7, #56	; 0x38
 8001208:	dc5b      	bgt.n	80012c2 <__aeabi_dadd+0x442>
 800120a:	2f1f      	cmp	r7, #31
 800120c:	dd00      	ble.n	8001210 <__aeabi_dadd+0x390>
 800120e:	e0dc      	b.n	80013ca <__aeabi_dadd+0x54a>
 8001210:	2520      	movs	r5, #32
 8001212:	000c      	movs	r4, r1
 8001214:	1bed      	subs	r5, r5, r7
 8001216:	001e      	movs	r6, r3
 8001218:	40ab      	lsls	r3, r5
 800121a:	40ac      	lsls	r4, r5
 800121c:	40fe      	lsrs	r6, r7
 800121e:	1e5d      	subs	r5, r3, #1
 8001220:	41ab      	sbcs	r3, r5
 8001222:	4334      	orrs	r4, r6
 8001224:	40f9      	lsrs	r1, r7
 8001226:	431c      	orrs	r4, r3
 8001228:	464b      	mov	r3, r9
 800122a:	1a5b      	subs	r3, r3, r1
 800122c:	4699      	mov	r9, r3
 800122e:	e04c      	b.n	80012ca <__aeabi_dadd+0x44a>
 8001230:	464a      	mov	r2, r9
 8001232:	1a1c      	subs	r4, r3, r0
 8001234:	1a88      	subs	r0, r1, r2
 8001236:	42a3      	cmp	r3, r4
 8001238:	4192      	sbcs	r2, r2
 800123a:	4252      	negs	r2, r2
 800123c:	4692      	mov	sl, r2
 800123e:	0002      	movs	r2, r0
 8001240:	4650      	mov	r0, sl
 8001242:	1a12      	subs	r2, r2, r0
 8001244:	4692      	mov	sl, r2
 8001246:	0212      	lsls	r2, r2, #8
 8001248:	d478      	bmi.n	800133c <__aeabi_dadd+0x4bc>
 800124a:	4653      	mov	r3, sl
 800124c:	4323      	orrs	r3, r4
 800124e:	d000      	beq.n	8001252 <__aeabi_dadd+0x3d2>
 8001250:	e66a      	b.n	8000f28 <__aeabi_dadd+0xa8>
 8001252:	2100      	movs	r1, #0
 8001254:	2500      	movs	r5, #0
 8001256:	e745      	b.n	80010e4 <__aeabi_dadd+0x264>
 8001258:	074a      	lsls	r2, r1, #29
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	4313      	orrs	r3, r2
 800125e:	08c9      	lsrs	r1, r1, #3
 8001260:	e73d      	b.n	80010de <__aeabi_dadd+0x25e>
 8001262:	181c      	adds	r4, r3, r0
 8001264:	429c      	cmp	r4, r3
 8001266:	419b      	sbcs	r3, r3
 8001268:	4449      	add	r1, r9
 800126a:	468a      	mov	sl, r1
 800126c:	425b      	negs	r3, r3
 800126e:	449a      	add	sl, r3
 8001270:	4653      	mov	r3, sl
 8001272:	2601      	movs	r6, #1
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	d400      	bmi.n	800127a <__aeabi_dadd+0x3fa>
 8001278:	e727      	b.n	80010ca <__aeabi_dadd+0x24a>
 800127a:	2602      	movs	r6, #2
 800127c:	4652      	mov	r2, sl
 800127e:	4baf      	ldr	r3, [pc, #700]	; (800153c <__aeabi_dadd+0x6bc>)
 8001280:	2101      	movs	r1, #1
 8001282:	401a      	ands	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	4021      	ands	r1, r4
 8001288:	0862      	lsrs	r2, r4, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	07dc      	lsls	r4, r3, #31
 800128e:	085b      	lsrs	r3, r3, #1
 8001290:	469a      	mov	sl, r3
 8001292:	4314      	orrs	r4, r2
 8001294:	e670      	b.n	8000f78 <__aeabi_dadd+0xf8>
 8001296:	003a      	movs	r2, r7
 8001298:	464c      	mov	r4, r9
 800129a:	3a20      	subs	r2, #32
 800129c:	40d4      	lsrs	r4, r2
 800129e:	46a4      	mov	ip, r4
 80012a0:	2f20      	cmp	r7, #32
 80012a2:	d007      	beq.n	80012b4 <__aeabi_dadd+0x434>
 80012a4:	2240      	movs	r2, #64	; 0x40
 80012a6:	4648      	mov	r0, r9
 80012a8:	1bd2      	subs	r2, r2, r7
 80012aa:	4090      	lsls	r0, r2
 80012ac:	0002      	movs	r2, r0
 80012ae:	4640      	mov	r0, r8
 80012b0:	4310      	orrs	r0, r2
 80012b2:	4680      	mov	r8, r0
 80012b4:	4640      	mov	r0, r8
 80012b6:	1e42      	subs	r2, r0, #1
 80012b8:	4190      	sbcs	r0, r2
 80012ba:	4662      	mov	r2, ip
 80012bc:	0004      	movs	r4, r0
 80012be:	4314      	orrs	r4, r2
 80012c0:	e624      	b.n	8000f0c <__aeabi_dadd+0x8c>
 80012c2:	4319      	orrs	r1, r3
 80012c4:	000c      	movs	r4, r1
 80012c6:	1e63      	subs	r3, r4, #1
 80012c8:	419c      	sbcs	r4, r3
 80012ca:	4643      	mov	r3, r8
 80012cc:	1b1c      	subs	r4, r3, r4
 80012ce:	45a0      	cmp	r8, r4
 80012d0:	419b      	sbcs	r3, r3
 80012d2:	4649      	mov	r1, r9
 80012d4:	425b      	negs	r3, r3
 80012d6:	1acb      	subs	r3, r1, r3
 80012d8:	469a      	mov	sl, r3
 80012da:	4665      	mov	r5, ip
 80012dc:	0016      	movs	r6, r2
 80012de:	e61b      	b.n	8000f18 <__aeabi_dadd+0x98>
 80012e0:	000c      	movs	r4, r1
 80012e2:	431c      	orrs	r4, r3
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dadd+0x468>
 80012e6:	e0c7      	b.n	8001478 <__aeabi_dadd+0x5f8>
 80012e8:	1e7c      	subs	r4, r7, #1
 80012ea:	2f01      	cmp	r7, #1
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dadd+0x470>
 80012ee:	e0f9      	b.n	80014e4 <__aeabi_dadd+0x664>
 80012f0:	4e91      	ldr	r6, [pc, #580]	; (8001538 <__aeabi_dadd+0x6b8>)
 80012f2:	42b7      	cmp	r7, r6
 80012f4:	d05c      	beq.n	80013b0 <__aeabi_dadd+0x530>
 80012f6:	0027      	movs	r7, r4
 80012f8:	e740      	b.n	800117c <__aeabi_dadd+0x2fc>
 80012fa:	2220      	movs	r2, #32
 80012fc:	464c      	mov	r4, r9
 80012fe:	4640      	mov	r0, r8
 8001300:	1bd2      	subs	r2, r2, r7
 8001302:	4094      	lsls	r4, r2
 8001304:	40f8      	lsrs	r0, r7
 8001306:	4304      	orrs	r4, r0
 8001308:	4640      	mov	r0, r8
 800130a:	4090      	lsls	r0, r2
 800130c:	1e42      	subs	r2, r0, #1
 800130e:	4190      	sbcs	r0, r2
 8001310:	464a      	mov	r2, r9
 8001312:	40fa      	lsrs	r2, r7
 8001314:	4304      	orrs	r4, r0
 8001316:	1889      	adds	r1, r1, r2
 8001318:	e6ee      	b.n	80010f8 <__aeabi_dadd+0x278>
 800131a:	4c87      	ldr	r4, [pc, #540]	; (8001538 <__aeabi_dadd+0x6b8>)
 800131c:	42a2      	cmp	r2, r4
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x4a2>
 8001320:	e6f9      	b.n	8001116 <__aeabi_dadd+0x296>
 8001322:	1818      	adds	r0, r3, r0
 8001324:	4298      	cmp	r0, r3
 8001326:	419b      	sbcs	r3, r3
 8001328:	4449      	add	r1, r9
 800132a:	425b      	negs	r3, r3
 800132c:	18cb      	adds	r3, r1, r3
 800132e:	07dc      	lsls	r4, r3, #31
 8001330:	0840      	lsrs	r0, r0, #1
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	469a      	mov	sl, r3
 8001336:	0016      	movs	r6, r2
 8001338:	4304      	orrs	r4, r0
 800133a:	e6c6      	b.n	80010ca <__aeabi_dadd+0x24a>
 800133c:	4642      	mov	r2, r8
 800133e:	1ad4      	subs	r4, r2, r3
 8001340:	45a0      	cmp	r8, r4
 8001342:	4180      	sbcs	r0, r0
 8001344:	464b      	mov	r3, r9
 8001346:	4240      	negs	r0, r0
 8001348:	1a59      	subs	r1, r3, r1
 800134a:	1a0b      	subs	r3, r1, r0
 800134c:	469a      	mov	sl, r3
 800134e:	4665      	mov	r5, ip
 8001350:	e5ea      	b.n	8000f28 <__aeabi_dadd+0xa8>
 8001352:	464b      	mov	r3, r9
 8001354:	464a      	mov	r2, r9
 8001356:	08c0      	lsrs	r0, r0, #3
 8001358:	075b      	lsls	r3, r3, #29
 800135a:	4665      	mov	r5, ip
 800135c:	4303      	orrs	r3, r0
 800135e:	08d1      	lsrs	r1, r2, #3
 8001360:	e6bd      	b.n	80010de <__aeabi_dadd+0x25e>
 8001362:	2a00      	cmp	r2, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_dadd+0x4e8>
 8001366:	e08e      	b.n	8001486 <__aeabi_dadd+0x606>
 8001368:	464b      	mov	r3, r9
 800136a:	4303      	orrs	r3, r0
 800136c:	d117      	bne.n	800139e <__aeabi_dadd+0x51e>
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	2500      	movs	r5, #0
 8001372:	0309      	lsls	r1, r1, #12
 8001374:	e6da      	b.n	800112c <__aeabi_dadd+0x2ac>
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	4313      	orrs	r3, r2
 800137c:	08c9      	lsrs	r1, r1, #3
 800137e:	e6d1      	b.n	8001124 <__aeabi_dadd+0x2a4>
 8001380:	1a1c      	subs	r4, r3, r0
 8001382:	464a      	mov	r2, r9
 8001384:	42a3      	cmp	r3, r4
 8001386:	419b      	sbcs	r3, r3
 8001388:	1a89      	subs	r1, r1, r2
 800138a:	425b      	negs	r3, r3
 800138c:	1acb      	subs	r3, r1, r3
 800138e:	469a      	mov	sl, r3
 8001390:	2601      	movs	r6, #1
 8001392:	e5c1      	b.n	8000f18 <__aeabi_dadd+0x98>
 8001394:	074a      	lsls	r2, r1, #29
 8001396:	08db      	lsrs	r3, r3, #3
 8001398:	4313      	orrs	r3, r2
 800139a:	08c9      	lsrs	r1, r1, #3
 800139c:	e69f      	b.n	80010de <__aeabi_dadd+0x25e>
 800139e:	4643      	mov	r3, r8
 80013a0:	08d8      	lsrs	r0, r3, #3
 80013a2:	464b      	mov	r3, r9
 80013a4:	464a      	mov	r2, r9
 80013a6:	075b      	lsls	r3, r3, #29
 80013a8:	4665      	mov	r5, ip
 80013aa:	4303      	orrs	r3, r0
 80013ac:	08d1      	lsrs	r1, r2, #3
 80013ae:	e6b9      	b.n	8001124 <__aeabi_dadd+0x2a4>
 80013b0:	4643      	mov	r3, r8
 80013b2:	08d8      	lsrs	r0, r3, #3
 80013b4:	464b      	mov	r3, r9
 80013b6:	464a      	mov	r2, r9
 80013b8:	075b      	lsls	r3, r3, #29
 80013ba:	4303      	orrs	r3, r0
 80013bc:	08d1      	lsrs	r1, r2, #3
 80013be:	e6b1      	b.n	8001124 <__aeabi_dadd+0x2a4>
 80013c0:	4319      	orrs	r1, r3
 80013c2:	000c      	movs	r4, r1
 80013c4:	1e63      	subs	r3, r4, #1
 80013c6:	419c      	sbcs	r4, r3
 80013c8:	e6eb      	b.n	80011a2 <__aeabi_dadd+0x322>
 80013ca:	003c      	movs	r4, r7
 80013cc:	000d      	movs	r5, r1
 80013ce:	3c20      	subs	r4, #32
 80013d0:	40e5      	lsrs	r5, r4
 80013d2:	2f20      	cmp	r7, #32
 80013d4:	d003      	beq.n	80013de <__aeabi_dadd+0x55e>
 80013d6:	2440      	movs	r4, #64	; 0x40
 80013d8:	1be4      	subs	r4, r4, r7
 80013da:	40a1      	lsls	r1, r4
 80013dc:	430b      	orrs	r3, r1
 80013de:	001c      	movs	r4, r3
 80013e0:	1e63      	subs	r3, r4, #1
 80013e2:	419c      	sbcs	r4, r3
 80013e4:	432c      	orrs	r4, r5
 80013e6:	e770      	b.n	80012ca <__aeabi_dadd+0x44a>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d0e1      	beq.n	80013b0 <__aeabi_dadd+0x530>
 80013ec:	464a      	mov	r2, r9
 80013ee:	4302      	orrs	r2, r0
 80013f0:	d0c1      	beq.n	8001376 <__aeabi_dadd+0x4f6>
 80013f2:	074a      	lsls	r2, r1, #29
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	08c9      	lsrs	r1, r1, #3
 80013fc:	0312      	lsls	r2, r2, #12
 80013fe:	4211      	tst	r1, r2
 8001400:	d008      	beq.n	8001414 <__aeabi_dadd+0x594>
 8001402:	4648      	mov	r0, r9
 8001404:	08c4      	lsrs	r4, r0, #3
 8001406:	4214      	tst	r4, r2
 8001408:	d104      	bne.n	8001414 <__aeabi_dadd+0x594>
 800140a:	4643      	mov	r3, r8
 800140c:	0021      	movs	r1, r4
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	0742      	lsls	r2, r0, #29
 8001412:	4313      	orrs	r3, r2
 8001414:	0f5a      	lsrs	r2, r3, #29
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	0752      	lsls	r2, r2, #29
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	4313      	orrs	r3, r2
 800141e:	e681      	b.n	8001124 <__aeabi_dadd+0x2a4>
 8001420:	464b      	mov	r3, r9
 8001422:	4303      	orrs	r3, r0
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x5a8>
 8001426:	e714      	b.n	8001252 <__aeabi_dadd+0x3d2>
 8001428:	464b      	mov	r3, r9
 800142a:	464a      	mov	r2, r9
 800142c:	08c0      	lsrs	r0, r0, #3
 800142e:	075b      	lsls	r3, r3, #29
 8001430:	4665      	mov	r5, ip
 8001432:	4303      	orrs	r3, r0
 8001434:	08d1      	lsrs	r1, r2, #3
 8001436:	e655      	b.n	80010e4 <__aeabi_dadd+0x264>
 8001438:	1ac4      	subs	r4, r0, r3
 800143a:	45a0      	cmp	r8, r4
 800143c:	4180      	sbcs	r0, r0
 800143e:	464b      	mov	r3, r9
 8001440:	4240      	negs	r0, r0
 8001442:	1a59      	subs	r1, r3, r1
 8001444:	1a0b      	subs	r3, r1, r0
 8001446:	469a      	mov	sl, r3
 8001448:	4665      	mov	r5, ip
 800144a:	2601      	movs	r6, #1
 800144c:	e564      	b.n	8000f18 <__aeabi_dadd+0x98>
 800144e:	1a1c      	subs	r4, r3, r0
 8001450:	464a      	mov	r2, r9
 8001452:	42a3      	cmp	r3, r4
 8001454:	4180      	sbcs	r0, r0
 8001456:	1a8a      	subs	r2, r1, r2
 8001458:	4240      	negs	r0, r0
 800145a:	1a12      	subs	r2, r2, r0
 800145c:	4692      	mov	sl, r2
 800145e:	0212      	lsls	r2, r2, #8
 8001460:	d549      	bpl.n	80014f6 <__aeabi_dadd+0x676>
 8001462:	4642      	mov	r2, r8
 8001464:	1ad4      	subs	r4, r2, r3
 8001466:	45a0      	cmp	r8, r4
 8001468:	4180      	sbcs	r0, r0
 800146a:	464b      	mov	r3, r9
 800146c:	4240      	negs	r0, r0
 800146e:	1a59      	subs	r1, r3, r1
 8001470:	1a0b      	subs	r3, r1, r0
 8001472:	469a      	mov	sl, r3
 8001474:	4665      	mov	r5, ip
 8001476:	e57f      	b.n	8000f78 <__aeabi_dadd+0xf8>
 8001478:	464b      	mov	r3, r9
 800147a:	464a      	mov	r2, r9
 800147c:	08c0      	lsrs	r0, r0, #3
 800147e:	075b      	lsls	r3, r3, #29
 8001480:	4303      	orrs	r3, r0
 8001482:	08d1      	lsrs	r1, r2, #3
 8001484:	e62b      	b.n	80010de <__aeabi_dadd+0x25e>
 8001486:	464a      	mov	r2, r9
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	4302      	orrs	r2, r0
 800148c:	d138      	bne.n	8001500 <__aeabi_dadd+0x680>
 800148e:	074a      	lsls	r2, r1, #29
 8001490:	4313      	orrs	r3, r2
 8001492:	08c9      	lsrs	r1, r1, #3
 8001494:	e646      	b.n	8001124 <__aeabi_dadd+0x2a4>
 8001496:	464b      	mov	r3, r9
 8001498:	464a      	mov	r2, r9
 800149a:	08c0      	lsrs	r0, r0, #3
 800149c:	075b      	lsls	r3, r3, #29
 800149e:	4303      	orrs	r3, r0
 80014a0:	08d1      	lsrs	r1, r2, #3
 80014a2:	e61f      	b.n	80010e4 <__aeabi_dadd+0x264>
 80014a4:	181c      	adds	r4, r3, r0
 80014a6:	429c      	cmp	r4, r3
 80014a8:	419b      	sbcs	r3, r3
 80014aa:	4449      	add	r1, r9
 80014ac:	468a      	mov	sl, r1
 80014ae:	425b      	negs	r3, r3
 80014b0:	449a      	add	sl, r3
 80014b2:	4653      	mov	r3, sl
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	d400      	bmi.n	80014ba <__aeabi_dadd+0x63a>
 80014b8:	e607      	b.n	80010ca <__aeabi_dadd+0x24a>
 80014ba:	4652      	mov	r2, sl
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <__aeabi_dadd+0x6bc>)
 80014be:	2601      	movs	r6, #1
 80014c0:	401a      	ands	r2, r3
 80014c2:	4692      	mov	sl, r2
 80014c4:	e601      	b.n	80010ca <__aeabi_dadd+0x24a>
 80014c6:	003c      	movs	r4, r7
 80014c8:	000e      	movs	r6, r1
 80014ca:	3c20      	subs	r4, #32
 80014cc:	40e6      	lsrs	r6, r4
 80014ce:	2f20      	cmp	r7, #32
 80014d0:	d003      	beq.n	80014da <__aeabi_dadd+0x65a>
 80014d2:	2440      	movs	r4, #64	; 0x40
 80014d4:	1be4      	subs	r4, r4, r7
 80014d6:	40a1      	lsls	r1, r4
 80014d8:	430b      	orrs	r3, r1
 80014da:	001c      	movs	r4, r3
 80014dc:	1e63      	subs	r3, r4, #1
 80014de:	419c      	sbcs	r4, r3
 80014e0:	4334      	orrs	r4, r6
 80014e2:	e65e      	b.n	80011a2 <__aeabi_dadd+0x322>
 80014e4:	4443      	add	r3, r8
 80014e6:	4283      	cmp	r3, r0
 80014e8:	4180      	sbcs	r0, r0
 80014ea:	4449      	add	r1, r9
 80014ec:	468a      	mov	sl, r1
 80014ee:	4240      	negs	r0, r0
 80014f0:	001c      	movs	r4, r3
 80014f2:	4482      	add	sl, r0
 80014f4:	e6bc      	b.n	8001270 <__aeabi_dadd+0x3f0>
 80014f6:	4653      	mov	r3, sl
 80014f8:	4323      	orrs	r3, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x67e>
 80014fc:	e6a9      	b.n	8001252 <__aeabi_dadd+0x3d2>
 80014fe:	e5e4      	b.n	80010ca <__aeabi_dadd+0x24a>
 8001500:	074a      	lsls	r2, r1, #29
 8001502:	4313      	orrs	r3, r2
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	08c9      	lsrs	r1, r1, #3
 8001508:	0312      	lsls	r2, r2, #12
 800150a:	4211      	tst	r1, r2
 800150c:	d009      	beq.n	8001522 <__aeabi_dadd+0x6a2>
 800150e:	4648      	mov	r0, r9
 8001510:	08c4      	lsrs	r4, r0, #3
 8001512:	4214      	tst	r4, r2
 8001514:	d105      	bne.n	8001522 <__aeabi_dadd+0x6a2>
 8001516:	4643      	mov	r3, r8
 8001518:	4665      	mov	r5, ip
 800151a:	0021      	movs	r1, r4
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	0742      	lsls	r2, r0, #29
 8001520:	4313      	orrs	r3, r2
 8001522:	0f5a      	lsrs	r2, r3, #29
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	0752      	lsls	r2, r2, #29
 800152a:	4313      	orrs	r3, r2
 800152c:	e5fa      	b.n	8001124 <__aeabi_dadd+0x2a4>
 800152e:	2300      	movs	r3, #0
 8001530:	4a01      	ldr	r2, [pc, #4]	; (8001538 <__aeabi_dadd+0x6b8>)
 8001532:	001c      	movs	r4, r3
 8001534:	e540      	b.n	8000fb8 <__aeabi_dadd+0x138>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	000007ff 	.word	0x000007ff
 800153c:	ff7fffff 	.word	0xff7fffff

08001540 <__aeabi_ddiv>:
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	4657      	mov	r7, sl
 8001544:	464e      	mov	r6, r9
 8001546:	4645      	mov	r5, r8
 8001548:	46de      	mov	lr, fp
 800154a:	b5e0      	push	{r5, r6, r7, lr}
 800154c:	030c      	lsls	r4, r1, #12
 800154e:	001f      	movs	r7, r3
 8001550:	004b      	lsls	r3, r1, #1
 8001552:	4681      	mov	r9, r0
 8001554:	4692      	mov	sl, r2
 8001556:	0005      	movs	r5, r0
 8001558:	b085      	sub	sp, #20
 800155a:	0b24      	lsrs	r4, r4, #12
 800155c:	0d5b      	lsrs	r3, r3, #21
 800155e:	0fce      	lsrs	r6, r1, #31
 8001560:	2b00      	cmp	r3, #0
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0x26>
 8001564:	e152      	b.n	800180c <__aeabi_ddiv+0x2cc>
 8001566:	4ad2      	ldr	r2, [pc, #840]	; (80018b0 <__aeabi_ddiv+0x370>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d100      	bne.n	800156e <__aeabi_ddiv+0x2e>
 800156c:	e16e      	b.n	800184c <__aeabi_ddiv+0x30c>
 800156e:	0f42      	lsrs	r2, r0, #29
 8001570:	00e4      	lsls	r4, r4, #3
 8001572:	4314      	orrs	r4, r2
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	0412      	lsls	r2, r2, #16
 8001578:	4322      	orrs	r2, r4
 800157a:	4690      	mov	r8, r2
 800157c:	4acd      	ldr	r2, [pc, #820]	; (80018b4 <__aeabi_ddiv+0x374>)
 800157e:	00c5      	lsls	r5, r0, #3
 8001580:	4693      	mov	fp, r2
 8001582:	449b      	add	fp, r3
 8001584:	2300      	movs	r3, #0
 8001586:	4699      	mov	r9, r3
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	033c      	lsls	r4, r7, #12
 800158c:	007b      	lsls	r3, r7, #1
 800158e:	4650      	mov	r0, sl
 8001590:	0b24      	lsrs	r4, r4, #12
 8001592:	0d5b      	lsrs	r3, r3, #21
 8001594:	0fff      	lsrs	r7, r7, #31
 8001596:	2b00      	cmp	r3, #0
 8001598:	d100      	bne.n	800159c <__aeabi_ddiv+0x5c>
 800159a:	e11a      	b.n	80017d2 <__aeabi_ddiv+0x292>
 800159c:	4ac4      	ldr	r2, [pc, #784]	; (80018b0 <__aeabi_ddiv+0x370>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_ddiv+0x64>
 80015a2:	e15e      	b.n	8001862 <__aeabi_ddiv+0x322>
 80015a4:	0f42      	lsrs	r2, r0, #29
 80015a6:	00e4      	lsls	r4, r4, #3
 80015a8:	4322      	orrs	r2, r4
 80015aa:	2480      	movs	r4, #128	; 0x80
 80015ac:	0424      	lsls	r4, r4, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	4ac0      	ldr	r2, [pc, #768]	; (80018b4 <__aeabi_ddiv+0x374>)
 80015b2:	00c1      	lsls	r1, r0, #3
 80015b4:	4694      	mov	ip, r2
 80015b6:	465a      	mov	r2, fp
 80015b8:	4463      	add	r3, ip
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	469b      	mov	fp, r3
 80015be:	2000      	movs	r0, #0
 80015c0:	0033      	movs	r3, r6
 80015c2:	407b      	eors	r3, r7
 80015c4:	469a      	mov	sl, r3
 80015c6:	464b      	mov	r3, r9
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d827      	bhi.n	800161c <__aeabi_ddiv+0xdc>
 80015cc:	4aba      	ldr	r2, [pc, #744]	; (80018b8 <__aeabi_ddiv+0x378>)
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	58d3      	ldr	r3, [r2, r3]
 80015d2:	469f      	mov	pc, r3
 80015d4:	46b2      	mov	sl, r6
 80015d6:	9b00      	ldr	r3, [sp, #0]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d016      	beq.n	800160a <__aeabi_ddiv+0xca>
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d100      	bne.n	80015e2 <__aeabi_ddiv+0xa2>
 80015e0:	e287      	b.n	8001af2 <__aeabi_ddiv+0x5b2>
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d000      	beq.n	80015e8 <__aeabi_ddiv+0xa8>
 80015e6:	e0d5      	b.n	8001794 <__aeabi_ddiv+0x254>
 80015e8:	2300      	movs	r3, #0
 80015ea:	2200      	movs	r2, #0
 80015ec:	2500      	movs	r5, #0
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	4652      	mov	r2, sl
 80015f4:	07d2      	lsls	r2, r2, #31
 80015f6:	4313      	orrs	r3, r2
 80015f8:	0028      	movs	r0, r5
 80015fa:	0019      	movs	r1, r3
 80015fc:	b005      	add	sp, #20
 80015fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001600:	46bb      	mov	fp, r7
 8001602:	46b2      	mov	sl, r6
 8001604:	46a9      	mov	r9, r5
 8001606:	46a0      	mov	r8, r4
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160a:	2200      	movs	r2, #0
 800160c:	2500      	movs	r5, #0
 800160e:	4ba8      	ldr	r3, [pc, #672]	; (80018b0 <__aeabi_ddiv+0x370>)
 8001610:	e7ed      	b.n	80015ee <__aeabi_ddiv+0xae>
 8001612:	46ba      	mov	sl, r7
 8001614:	46a0      	mov	r8, r4
 8001616:	000d      	movs	r5, r1
 8001618:	9000      	str	r0, [sp, #0]
 800161a:	e7dc      	b.n	80015d6 <__aeabi_ddiv+0x96>
 800161c:	4544      	cmp	r4, r8
 800161e:	d200      	bcs.n	8001622 <__aeabi_ddiv+0xe2>
 8001620:	e1c4      	b.n	80019ac <__aeabi_ddiv+0x46c>
 8001622:	d100      	bne.n	8001626 <__aeabi_ddiv+0xe6>
 8001624:	e1bf      	b.n	80019a6 <__aeabi_ddiv+0x466>
 8001626:	2301      	movs	r3, #1
 8001628:	425b      	negs	r3, r3
 800162a:	469c      	mov	ip, r3
 800162c:	002e      	movs	r6, r5
 800162e:	4640      	mov	r0, r8
 8001630:	2500      	movs	r5, #0
 8001632:	44e3      	add	fp, ip
 8001634:	0223      	lsls	r3, r4, #8
 8001636:	0e0c      	lsrs	r4, r1, #24
 8001638:	431c      	orrs	r4, r3
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	4699      	mov	r9, r3
 800163e:	0423      	lsls	r3, r4, #16
 8001640:	020a      	lsls	r2, r1, #8
 8001642:	0c1f      	lsrs	r7, r3, #16
 8001644:	4649      	mov	r1, r9
 8001646:	9200      	str	r2, [sp, #0]
 8001648:	9701      	str	r7, [sp, #4]
 800164a:	f7fe fdeb 	bl	8000224 <__aeabi_uidivmod>
 800164e:	0002      	movs	r2, r0
 8001650:	437a      	muls	r2, r7
 8001652:	040b      	lsls	r3, r1, #16
 8001654:	0c31      	lsrs	r1, r6, #16
 8001656:	4680      	mov	r8, r0
 8001658:	4319      	orrs	r1, r3
 800165a:	428a      	cmp	r2, r1
 800165c:	d907      	bls.n	800166e <__aeabi_ddiv+0x12e>
 800165e:	2301      	movs	r3, #1
 8001660:	425b      	negs	r3, r3
 8001662:	469c      	mov	ip, r3
 8001664:	1909      	adds	r1, r1, r4
 8001666:	44e0      	add	r8, ip
 8001668:	428c      	cmp	r4, r1
 800166a:	d800      	bhi.n	800166e <__aeabi_ddiv+0x12e>
 800166c:	e201      	b.n	8001a72 <__aeabi_ddiv+0x532>
 800166e:	1a88      	subs	r0, r1, r2
 8001670:	4649      	mov	r1, r9
 8001672:	f7fe fdd7 	bl	8000224 <__aeabi_uidivmod>
 8001676:	9a01      	ldr	r2, [sp, #4]
 8001678:	0436      	lsls	r6, r6, #16
 800167a:	4342      	muls	r2, r0
 800167c:	0409      	lsls	r1, r1, #16
 800167e:	0c36      	lsrs	r6, r6, #16
 8001680:	0003      	movs	r3, r0
 8001682:	430e      	orrs	r6, r1
 8001684:	42b2      	cmp	r2, r6
 8001686:	d904      	bls.n	8001692 <__aeabi_ddiv+0x152>
 8001688:	1936      	adds	r6, r6, r4
 800168a:	3b01      	subs	r3, #1
 800168c:	42b4      	cmp	r4, r6
 800168e:	d800      	bhi.n	8001692 <__aeabi_ddiv+0x152>
 8001690:	e1e9      	b.n	8001a66 <__aeabi_ddiv+0x526>
 8001692:	1ab0      	subs	r0, r6, r2
 8001694:	4642      	mov	r2, r8
 8001696:	9e00      	ldr	r6, [sp, #0]
 8001698:	0412      	lsls	r2, r2, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	0c33      	lsrs	r3, r6, #16
 800169e:	001f      	movs	r7, r3
 80016a0:	0c11      	lsrs	r1, r2, #16
 80016a2:	4690      	mov	r8, r2
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	0413      	lsls	r3, r2, #16
 80016a8:	0432      	lsls	r2, r6, #16
 80016aa:	0c16      	lsrs	r6, r2, #16
 80016ac:	0032      	movs	r2, r6
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	435a      	muls	r2, r3
 80016b2:	9603      	str	r6, [sp, #12]
 80016b4:	437b      	muls	r3, r7
 80016b6:	434e      	muls	r6, r1
 80016b8:	4379      	muls	r1, r7
 80016ba:	0c17      	lsrs	r7, r2, #16
 80016bc:	46bc      	mov	ip, r7
 80016be:	199b      	adds	r3, r3, r6
 80016c0:	4463      	add	r3, ip
 80016c2:	429e      	cmp	r6, r3
 80016c4:	d903      	bls.n	80016ce <__aeabi_ddiv+0x18e>
 80016c6:	2680      	movs	r6, #128	; 0x80
 80016c8:	0276      	lsls	r6, r6, #9
 80016ca:	46b4      	mov	ip, r6
 80016cc:	4461      	add	r1, ip
 80016ce:	0c1e      	lsrs	r6, r3, #16
 80016d0:	1871      	adds	r1, r6, r1
 80016d2:	0416      	lsls	r6, r2, #16
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	0c36      	lsrs	r6, r6, #16
 80016d8:	199e      	adds	r6, r3, r6
 80016da:	4288      	cmp	r0, r1
 80016dc:	d302      	bcc.n	80016e4 <__aeabi_ddiv+0x1a4>
 80016de:	d112      	bne.n	8001706 <__aeabi_ddiv+0x1c6>
 80016e0:	42b5      	cmp	r5, r6
 80016e2:	d210      	bcs.n	8001706 <__aeabi_ddiv+0x1c6>
 80016e4:	4643      	mov	r3, r8
 80016e6:	1e5a      	subs	r2, r3, #1
 80016e8:	9b00      	ldr	r3, [sp, #0]
 80016ea:	469c      	mov	ip, r3
 80016ec:	4465      	add	r5, ip
 80016ee:	001f      	movs	r7, r3
 80016f0:	429d      	cmp	r5, r3
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	425b      	negs	r3, r3
 80016f6:	191b      	adds	r3, r3, r4
 80016f8:	18c0      	adds	r0, r0, r3
 80016fa:	4284      	cmp	r4, r0
 80016fc:	d200      	bcs.n	8001700 <__aeabi_ddiv+0x1c0>
 80016fe:	e19e      	b.n	8001a3e <__aeabi_ddiv+0x4fe>
 8001700:	d100      	bne.n	8001704 <__aeabi_ddiv+0x1c4>
 8001702:	e199      	b.n	8001a38 <__aeabi_ddiv+0x4f8>
 8001704:	4690      	mov	r8, r2
 8001706:	1bae      	subs	r6, r5, r6
 8001708:	42b5      	cmp	r5, r6
 800170a:	41ad      	sbcs	r5, r5
 800170c:	1a40      	subs	r0, r0, r1
 800170e:	426d      	negs	r5, r5
 8001710:	1b40      	subs	r0, r0, r5
 8001712:	4284      	cmp	r4, r0
 8001714:	d100      	bne.n	8001718 <__aeabi_ddiv+0x1d8>
 8001716:	e1d2      	b.n	8001abe <__aeabi_ddiv+0x57e>
 8001718:	4649      	mov	r1, r9
 800171a:	f7fe fd83 	bl	8000224 <__aeabi_uidivmod>
 800171e:	9a01      	ldr	r2, [sp, #4]
 8001720:	040b      	lsls	r3, r1, #16
 8001722:	4342      	muls	r2, r0
 8001724:	0c31      	lsrs	r1, r6, #16
 8001726:	0005      	movs	r5, r0
 8001728:	4319      	orrs	r1, r3
 800172a:	428a      	cmp	r2, r1
 800172c:	d900      	bls.n	8001730 <__aeabi_ddiv+0x1f0>
 800172e:	e16c      	b.n	8001a0a <__aeabi_ddiv+0x4ca>
 8001730:	1a88      	subs	r0, r1, r2
 8001732:	4649      	mov	r1, r9
 8001734:	f7fe fd76 	bl	8000224 <__aeabi_uidivmod>
 8001738:	9a01      	ldr	r2, [sp, #4]
 800173a:	0436      	lsls	r6, r6, #16
 800173c:	4342      	muls	r2, r0
 800173e:	0409      	lsls	r1, r1, #16
 8001740:	0c36      	lsrs	r6, r6, #16
 8001742:	0003      	movs	r3, r0
 8001744:	430e      	orrs	r6, r1
 8001746:	42b2      	cmp	r2, r6
 8001748:	d900      	bls.n	800174c <__aeabi_ddiv+0x20c>
 800174a:	e153      	b.n	80019f4 <__aeabi_ddiv+0x4b4>
 800174c:	9803      	ldr	r0, [sp, #12]
 800174e:	1ab6      	subs	r6, r6, r2
 8001750:	0002      	movs	r2, r0
 8001752:	042d      	lsls	r5, r5, #16
 8001754:	431d      	orrs	r5, r3
 8001756:	9f02      	ldr	r7, [sp, #8]
 8001758:	042b      	lsls	r3, r5, #16
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	435a      	muls	r2, r3
 800175e:	437b      	muls	r3, r7
 8001760:	469c      	mov	ip, r3
 8001762:	0c29      	lsrs	r1, r5, #16
 8001764:	4348      	muls	r0, r1
 8001766:	0c13      	lsrs	r3, r2, #16
 8001768:	4484      	add	ip, r0
 800176a:	4463      	add	r3, ip
 800176c:	4379      	muls	r1, r7
 800176e:	4298      	cmp	r0, r3
 8001770:	d903      	bls.n	800177a <__aeabi_ddiv+0x23a>
 8001772:	2080      	movs	r0, #128	; 0x80
 8001774:	0240      	lsls	r0, r0, #9
 8001776:	4684      	mov	ip, r0
 8001778:	4461      	add	r1, ip
 800177a:	0c18      	lsrs	r0, r3, #16
 800177c:	0412      	lsls	r2, r2, #16
 800177e:	041b      	lsls	r3, r3, #16
 8001780:	0c12      	lsrs	r2, r2, #16
 8001782:	1840      	adds	r0, r0, r1
 8001784:	189b      	adds	r3, r3, r2
 8001786:	4286      	cmp	r6, r0
 8001788:	d200      	bcs.n	800178c <__aeabi_ddiv+0x24c>
 800178a:	e100      	b.n	800198e <__aeabi_ddiv+0x44e>
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x250>
 800178e:	e0fb      	b.n	8001988 <__aeabi_ddiv+0x448>
 8001790:	2301      	movs	r3, #1
 8001792:	431d      	orrs	r5, r3
 8001794:	4b49      	ldr	r3, [pc, #292]	; (80018bc <__aeabi_ddiv+0x37c>)
 8001796:	445b      	add	r3, fp
 8001798:	2b00      	cmp	r3, #0
 800179a:	dc00      	bgt.n	800179e <__aeabi_ddiv+0x25e>
 800179c:	e0aa      	b.n	80018f4 <__aeabi_ddiv+0x3b4>
 800179e:	076a      	lsls	r2, r5, #29
 80017a0:	d000      	beq.n	80017a4 <__aeabi_ddiv+0x264>
 80017a2:	e13d      	b.n	8001a20 <__aeabi_ddiv+0x4e0>
 80017a4:	08e9      	lsrs	r1, r5, #3
 80017a6:	4642      	mov	r2, r8
 80017a8:	01d2      	lsls	r2, r2, #7
 80017aa:	d506      	bpl.n	80017ba <__aeabi_ddiv+0x27a>
 80017ac:	4642      	mov	r2, r8
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <__aeabi_ddiv+0x380>)
 80017b0:	401a      	ands	r2, r3
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	4690      	mov	r8, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	445b      	add	r3, fp
 80017ba:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <__aeabi_ddiv+0x384>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	dd00      	ble.n	80017c2 <__aeabi_ddiv+0x282>
 80017c0:	e723      	b.n	800160a <__aeabi_ddiv+0xca>
 80017c2:	4642      	mov	r2, r8
 80017c4:	055b      	lsls	r3, r3, #21
 80017c6:	0755      	lsls	r5, r2, #29
 80017c8:	0252      	lsls	r2, r2, #9
 80017ca:	430d      	orrs	r5, r1
 80017cc:	0b12      	lsrs	r2, r2, #12
 80017ce:	0d5b      	lsrs	r3, r3, #21
 80017d0:	e70d      	b.n	80015ee <__aeabi_ddiv+0xae>
 80017d2:	4651      	mov	r1, sl
 80017d4:	4321      	orrs	r1, r4
 80017d6:	d100      	bne.n	80017da <__aeabi_ddiv+0x29a>
 80017d8:	e07c      	b.n	80018d4 <__aeabi_ddiv+0x394>
 80017da:	2c00      	cmp	r4, #0
 80017dc:	d100      	bne.n	80017e0 <__aeabi_ddiv+0x2a0>
 80017de:	e0fb      	b.n	80019d8 <__aeabi_ddiv+0x498>
 80017e0:	0020      	movs	r0, r4
 80017e2:	f001 f9f5 	bl	8002bd0 <__clzsi2>
 80017e6:	0002      	movs	r2, r0
 80017e8:	3a0b      	subs	r2, #11
 80017ea:	231d      	movs	r3, #29
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	4652      	mov	r2, sl
 80017f0:	0001      	movs	r1, r0
 80017f2:	40da      	lsrs	r2, r3
 80017f4:	4653      	mov	r3, sl
 80017f6:	3908      	subs	r1, #8
 80017f8:	408b      	lsls	r3, r1
 80017fa:	408c      	lsls	r4, r1
 80017fc:	0019      	movs	r1, r3
 80017fe:	4314      	orrs	r4, r2
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <__aeabi_ddiv+0x388>)
 8001802:	4458      	add	r0, fp
 8001804:	469b      	mov	fp, r3
 8001806:	4483      	add	fp, r0
 8001808:	2000      	movs	r0, #0
 800180a:	e6d9      	b.n	80015c0 <__aeabi_ddiv+0x80>
 800180c:	0003      	movs	r3, r0
 800180e:	4323      	orrs	r3, r4
 8001810:	4698      	mov	r8, r3
 8001812:	d044      	beq.n	800189e <__aeabi_ddiv+0x35e>
 8001814:	2c00      	cmp	r4, #0
 8001816:	d100      	bne.n	800181a <__aeabi_ddiv+0x2da>
 8001818:	e0cf      	b.n	80019ba <__aeabi_ddiv+0x47a>
 800181a:	0020      	movs	r0, r4
 800181c:	f001 f9d8 	bl	8002bd0 <__clzsi2>
 8001820:	0001      	movs	r1, r0
 8001822:	0002      	movs	r2, r0
 8001824:	390b      	subs	r1, #11
 8001826:	231d      	movs	r3, #29
 8001828:	1a5b      	subs	r3, r3, r1
 800182a:	4649      	mov	r1, r9
 800182c:	0010      	movs	r0, r2
 800182e:	40d9      	lsrs	r1, r3
 8001830:	3808      	subs	r0, #8
 8001832:	4084      	lsls	r4, r0
 8001834:	000b      	movs	r3, r1
 8001836:	464d      	mov	r5, r9
 8001838:	4323      	orrs	r3, r4
 800183a:	4698      	mov	r8, r3
 800183c:	4085      	lsls	r5, r0
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <__aeabi_ddiv+0x38c>)
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	469b      	mov	fp, r3
 8001844:	2300      	movs	r3, #0
 8001846:	4699      	mov	r9, r3
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	e69e      	b.n	800158a <__aeabi_ddiv+0x4a>
 800184c:	0002      	movs	r2, r0
 800184e:	4322      	orrs	r2, r4
 8001850:	4690      	mov	r8, r2
 8001852:	d11d      	bne.n	8001890 <__aeabi_ddiv+0x350>
 8001854:	2208      	movs	r2, #8
 8001856:	469b      	mov	fp, r3
 8001858:	2302      	movs	r3, #2
 800185a:	2500      	movs	r5, #0
 800185c:	4691      	mov	r9, r2
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	e693      	b.n	800158a <__aeabi_ddiv+0x4a>
 8001862:	4651      	mov	r1, sl
 8001864:	4321      	orrs	r1, r4
 8001866:	d109      	bne.n	800187c <__aeabi_ddiv+0x33c>
 8001868:	2302      	movs	r3, #2
 800186a:	464a      	mov	r2, r9
 800186c:	431a      	orrs	r2, r3
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <__aeabi_ddiv+0x390>)
 8001870:	4691      	mov	r9, r2
 8001872:	469c      	mov	ip, r3
 8001874:	2400      	movs	r4, #0
 8001876:	2002      	movs	r0, #2
 8001878:	44e3      	add	fp, ip
 800187a:	e6a1      	b.n	80015c0 <__aeabi_ddiv+0x80>
 800187c:	2303      	movs	r3, #3
 800187e:	464a      	mov	r2, r9
 8001880:	431a      	orrs	r2, r3
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <__aeabi_ddiv+0x390>)
 8001884:	4691      	mov	r9, r2
 8001886:	469c      	mov	ip, r3
 8001888:	4651      	mov	r1, sl
 800188a:	2003      	movs	r0, #3
 800188c:	44e3      	add	fp, ip
 800188e:	e697      	b.n	80015c0 <__aeabi_ddiv+0x80>
 8001890:	220c      	movs	r2, #12
 8001892:	469b      	mov	fp, r3
 8001894:	2303      	movs	r3, #3
 8001896:	46a0      	mov	r8, r4
 8001898:	4691      	mov	r9, r2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	e675      	b.n	800158a <__aeabi_ddiv+0x4a>
 800189e:	2304      	movs	r3, #4
 80018a0:	4699      	mov	r9, r3
 80018a2:	2300      	movs	r3, #0
 80018a4:	469b      	mov	fp, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	2500      	movs	r5, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	e66d      	b.n	800158a <__aeabi_ddiv+0x4a>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	000007ff 	.word	0x000007ff
 80018b4:	fffffc01 	.word	0xfffffc01
 80018b8:	08009080 	.word	0x08009080
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	000003f3 	.word	0x000003f3
 80018cc:	fffffc0d 	.word	0xfffffc0d
 80018d0:	fffff801 	.word	0xfffff801
 80018d4:	464a      	mov	r2, r9
 80018d6:	2301      	movs	r3, #1
 80018d8:	431a      	orrs	r2, r3
 80018da:	4691      	mov	r9, r2
 80018dc:	2400      	movs	r4, #0
 80018de:	2001      	movs	r0, #1
 80018e0:	e66e      	b.n	80015c0 <__aeabi_ddiv+0x80>
 80018e2:	2300      	movs	r3, #0
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	469a      	mov	sl, r3
 80018e8:	2500      	movs	r5, #0
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <__aeabi_ddiv+0x5cc>)
 80018ec:	0312      	lsls	r2, r2, #12
 80018ee:	e67e      	b.n	80015ee <__aeabi_ddiv+0xae>
 80018f0:	2501      	movs	r5, #1
 80018f2:	426d      	negs	r5, r5
 80018f4:	2201      	movs	r2, #1
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	2a38      	cmp	r2, #56	; 0x38
 80018fa:	dd00      	ble.n	80018fe <__aeabi_ddiv+0x3be>
 80018fc:	e674      	b.n	80015e8 <__aeabi_ddiv+0xa8>
 80018fe:	2a1f      	cmp	r2, #31
 8001900:	dc00      	bgt.n	8001904 <__aeabi_ddiv+0x3c4>
 8001902:	e0bd      	b.n	8001a80 <__aeabi_ddiv+0x540>
 8001904:	211f      	movs	r1, #31
 8001906:	4249      	negs	r1, r1
 8001908:	1acb      	subs	r3, r1, r3
 800190a:	4641      	mov	r1, r8
 800190c:	40d9      	lsrs	r1, r3
 800190e:	000b      	movs	r3, r1
 8001910:	2a20      	cmp	r2, #32
 8001912:	d004      	beq.n	800191e <__aeabi_ddiv+0x3de>
 8001914:	4641      	mov	r1, r8
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <__aeabi_ddiv+0x5d0>)
 8001918:	445a      	add	r2, fp
 800191a:	4091      	lsls	r1, r2
 800191c:	430d      	orrs	r5, r1
 800191e:	0029      	movs	r1, r5
 8001920:	1e4a      	subs	r2, r1, #1
 8001922:	4191      	sbcs	r1, r2
 8001924:	4319      	orrs	r1, r3
 8001926:	2307      	movs	r3, #7
 8001928:	001d      	movs	r5, r3
 800192a:	2200      	movs	r2, #0
 800192c:	400d      	ands	r5, r1
 800192e:	420b      	tst	r3, r1
 8001930:	d100      	bne.n	8001934 <__aeabi_ddiv+0x3f4>
 8001932:	e0d0      	b.n	8001ad6 <__aeabi_ddiv+0x596>
 8001934:	220f      	movs	r2, #15
 8001936:	2300      	movs	r3, #0
 8001938:	400a      	ands	r2, r1
 800193a:	2a04      	cmp	r2, #4
 800193c:	d100      	bne.n	8001940 <__aeabi_ddiv+0x400>
 800193e:	e0c7      	b.n	8001ad0 <__aeabi_ddiv+0x590>
 8001940:	1d0a      	adds	r2, r1, #4
 8001942:	428a      	cmp	r2, r1
 8001944:	4189      	sbcs	r1, r1
 8001946:	4249      	negs	r1, r1
 8001948:	185b      	adds	r3, r3, r1
 800194a:	0011      	movs	r1, r2
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	d400      	bmi.n	8001952 <__aeabi_ddiv+0x412>
 8001950:	e0be      	b.n	8001ad0 <__aeabi_ddiv+0x590>
 8001952:	2301      	movs	r3, #1
 8001954:	2200      	movs	r2, #0
 8001956:	2500      	movs	r5, #0
 8001958:	e649      	b.n	80015ee <__aeabi_ddiv+0xae>
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	4643      	mov	r3, r8
 800195e:	0312      	lsls	r2, r2, #12
 8001960:	4213      	tst	r3, r2
 8001962:	d008      	beq.n	8001976 <__aeabi_ddiv+0x436>
 8001964:	4214      	tst	r4, r2
 8001966:	d106      	bne.n	8001976 <__aeabi_ddiv+0x436>
 8001968:	4322      	orrs	r2, r4
 800196a:	0312      	lsls	r2, r2, #12
 800196c:	46ba      	mov	sl, r7
 800196e:	000d      	movs	r5, r1
 8001970:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <__aeabi_ddiv+0x5cc>)
 8001972:	0b12      	lsrs	r2, r2, #12
 8001974:	e63b      	b.n	80015ee <__aeabi_ddiv+0xae>
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	4643      	mov	r3, r8
 800197a:	0312      	lsls	r2, r2, #12
 800197c:	431a      	orrs	r2, r3
 800197e:	0312      	lsls	r2, r2, #12
 8001980:	46b2      	mov	sl, r6
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_ddiv+0x5cc>)
 8001984:	0b12      	lsrs	r2, r2, #12
 8001986:	e632      	b.n	80015ee <__aeabi_ddiv+0xae>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d100      	bne.n	800198e <__aeabi_ddiv+0x44e>
 800198c:	e702      	b.n	8001794 <__aeabi_ddiv+0x254>
 800198e:	19a6      	adds	r6, r4, r6
 8001990:	1e6a      	subs	r2, r5, #1
 8001992:	42a6      	cmp	r6, r4
 8001994:	d200      	bcs.n	8001998 <__aeabi_ddiv+0x458>
 8001996:	e089      	b.n	8001aac <__aeabi_ddiv+0x56c>
 8001998:	4286      	cmp	r6, r0
 800199a:	d200      	bcs.n	800199e <__aeabi_ddiv+0x45e>
 800199c:	e09f      	b.n	8001ade <__aeabi_ddiv+0x59e>
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0x462>
 80019a0:	e0af      	b.n	8001b02 <__aeabi_ddiv+0x5c2>
 80019a2:	0015      	movs	r5, r2
 80019a4:	e6f4      	b.n	8001790 <__aeabi_ddiv+0x250>
 80019a6:	42a9      	cmp	r1, r5
 80019a8:	d900      	bls.n	80019ac <__aeabi_ddiv+0x46c>
 80019aa:	e63c      	b.n	8001626 <__aeabi_ddiv+0xe6>
 80019ac:	4643      	mov	r3, r8
 80019ae:	07de      	lsls	r6, r3, #31
 80019b0:	0858      	lsrs	r0, r3, #1
 80019b2:	086b      	lsrs	r3, r5, #1
 80019b4:	431e      	orrs	r6, r3
 80019b6:	07ed      	lsls	r5, r5, #31
 80019b8:	e63c      	b.n	8001634 <__aeabi_ddiv+0xf4>
 80019ba:	f001 f909 	bl	8002bd0 <__clzsi2>
 80019be:	0001      	movs	r1, r0
 80019c0:	0002      	movs	r2, r0
 80019c2:	3115      	adds	r1, #21
 80019c4:	3220      	adds	r2, #32
 80019c6:	291c      	cmp	r1, #28
 80019c8:	dc00      	bgt.n	80019cc <__aeabi_ddiv+0x48c>
 80019ca:	e72c      	b.n	8001826 <__aeabi_ddiv+0x2e6>
 80019cc:	464b      	mov	r3, r9
 80019ce:	3808      	subs	r0, #8
 80019d0:	4083      	lsls	r3, r0
 80019d2:	2500      	movs	r5, #0
 80019d4:	4698      	mov	r8, r3
 80019d6:	e732      	b.n	800183e <__aeabi_ddiv+0x2fe>
 80019d8:	f001 f8fa 	bl	8002bd0 <__clzsi2>
 80019dc:	0003      	movs	r3, r0
 80019de:	001a      	movs	r2, r3
 80019e0:	3215      	adds	r2, #21
 80019e2:	3020      	adds	r0, #32
 80019e4:	2a1c      	cmp	r2, #28
 80019e6:	dc00      	bgt.n	80019ea <__aeabi_ddiv+0x4aa>
 80019e8:	e6ff      	b.n	80017ea <__aeabi_ddiv+0x2aa>
 80019ea:	4654      	mov	r4, sl
 80019ec:	3b08      	subs	r3, #8
 80019ee:	2100      	movs	r1, #0
 80019f0:	409c      	lsls	r4, r3
 80019f2:	e705      	b.n	8001800 <__aeabi_ddiv+0x2c0>
 80019f4:	1936      	adds	r6, r6, r4
 80019f6:	3b01      	subs	r3, #1
 80019f8:	42b4      	cmp	r4, r6
 80019fa:	d900      	bls.n	80019fe <__aeabi_ddiv+0x4be>
 80019fc:	e6a6      	b.n	800174c <__aeabi_ddiv+0x20c>
 80019fe:	42b2      	cmp	r2, r6
 8001a00:	d800      	bhi.n	8001a04 <__aeabi_ddiv+0x4c4>
 8001a02:	e6a3      	b.n	800174c <__aeabi_ddiv+0x20c>
 8001a04:	1e83      	subs	r3, r0, #2
 8001a06:	1936      	adds	r6, r6, r4
 8001a08:	e6a0      	b.n	800174c <__aeabi_ddiv+0x20c>
 8001a0a:	1909      	adds	r1, r1, r4
 8001a0c:	3d01      	subs	r5, #1
 8001a0e:	428c      	cmp	r4, r1
 8001a10:	d900      	bls.n	8001a14 <__aeabi_ddiv+0x4d4>
 8001a12:	e68d      	b.n	8001730 <__aeabi_ddiv+0x1f0>
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d800      	bhi.n	8001a1a <__aeabi_ddiv+0x4da>
 8001a18:	e68a      	b.n	8001730 <__aeabi_ddiv+0x1f0>
 8001a1a:	1e85      	subs	r5, r0, #2
 8001a1c:	1909      	adds	r1, r1, r4
 8001a1e:	e687      	b.n	8001730 <__aeabi_ddiv+0x1f0>
 8001a20:	220f      	movs	r2, #15
 8001a22:	402a      	ands	r2, r5
 8001a24:	2a04      	cmp	r2, #4
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x4ea>
 8001a28:	e6bc      	b.n	80017a4 <__aeabi_ddiv+0x264>
 8001a2a:	1d29      	adds	r1, r5, #4
 8001a2c:	42a9      	cmp	r1, r5
 8001a2e:	41ad      	sbcs	r5, r5
 8001a30:	426d      	negs	r5, r5
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	44a8      	add	r8, r5
 8001a36:	e6b6      	b.n	80017a6 <__aeabi_ddiv+0x266>
 8001a38:	42af      	cmp	r7, r5
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_ddiv+0x4fe>
 8001a3c:	e662      	b.n	8001704 <__aeabi_ddiv+0x1c4>
 8001a3e:	4281      	cmp	r1, r0
 8001a40:	d804      	bhi.n	8001a4c <__aeabi_ddiv+0x50c>
 8001a42:	d000      	beq.n	8001a46 <__aeabi_ddiv+0x506>
 8001a44:	e65e      	b.n	8001704 <__aeabi_ddiv+0x1c4>
 8001a46:	42ae      	cmp	r6, r5
 8001a48:	d800      	bhi.n	8001a4c <__aeabi_ddiv+0x50c>
 8001a4a:	e65b      	b.n	8001704 <__aeabi_ddiv+0x1c4>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	425b      	negs	r3, r3
 8001a50:	469c      	mov	ip, r3
 8001a52:	9b00      	ldr	r3, [sp, #0]
 8001a54:	44e0      	add	r8, ip
 8001a56:	469c      	mov	ip, r3
 8001a58:	4465      	add	r5, ip
 8001a5a:	429d      	cmp	r5, r3
 8001a5c:	419b      	sbcs	r3, r3
 8001a5e:	425b      	negs	r3, r3
 8001a60:	191b      	adds	r3, r3, r4
 8001a62:	18c0      	adds	r0, r0, r3
 8001a64:	e64f      	b.n	8001706 <__aeabi_ddiv+0x1c6>
 8001a66:	42b2      	cmp	r2, r6
 8001a68:	d800      	bhi.n	8001a6c <__aeabi_ddiv+0x52c>
 8001a6a:	e612      	b.n	8001692 <__aeabi_ddiv+0x152>
 8001a6c:	1e83      	subs	r3, r0, #2
 8001a6e:	1936      	adds	r6, r6, r4
 8001a70:	e60f      	b.n	8001692 <__aeabi_ddiv+0x152>
 8001a72:	428a      	cmp	r2, r1
 8001a74:	d800      	bhi.n	8001a78 <__aeabi_ddiv+0x538>
 8001a76:	e5fa      	b.n	800166e <__aeabi_ddiv+0x12e>
 8001a78:	1e83      	subs	r3, r0, #2
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	1909      	adds	r1, r1, r4
 8001a7e:	e5f6      	b.n	800166e <__aeabi_ddiv+0x12e>
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <__aeabi_ddiv+0x5d4>)
 8001a82:	0028      	movs	r0, r5
 8001a84:	445b      	add	r3, fp
 8001a86:	4641      	mov	r1, r8
 8001a88:	409d      	lsls	r5, r3
 8001a8a:	4099      	lsls	r1, r3
 8001a8c:	40d0      	lsrs	r0, r2
 8001a8e:	1e6b      	subs	r3, r5, #1
 8001a90:	419d      	sbcs	r5, r3
 8001a92:	4643      	mov	r3, r8
 8001a94:	4301      	orrs	r1, r0
 8001a96:	4329      	orrs	r1, r5
 8001a98:	40d3      	lsrs	r3, r2
 8001a9a:	074a      	lsls	r2, r1, #29
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_ddiv+0x560>
 8001a9e:	e755      	b.n	800194c <__aeabi_ddiv+0x40c>
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	2a04      	cmp	r2, #4
 8001aa6:	d000      	beq.n	8001aaa <__aeabi_ddiv+0x56a>
 8001aa8:	e74a      	b.n	8001940 <__aeabi_ddiv+0x400>
 8001aaa:	e74f      	b.n	800194c <__aeabi_ddiv+0x40c>
 8001aac:	0015      	movs	r5, r2
 8001aae:	4286      	cmp	r6, r0
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_ddiv+0x574>
 8001ab2:	e66d      	b.n	8001790 <__aeabi_ddiv+0x250>
 8001ab4:	9a00      	ldr	r2, [sp, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d000      	beq.n	8001abc <__aeabi_ddiv+0x57c>
 8001aba:	e669      	b.n	8001790 <__aeabi_ddiv+0x250>
 8001abc:	e66a      	b.n	8001794 <__aeabi_ddiv+0x254>
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <__aeabi_ddiv+0x5d8>)
 8001ac0:	445b      	add	r3, fp
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_ddiv+0x588>
 8001ac6:	e713      	b.n	80018f0 <__aeabi_ddiv+0x3b0>
 8001ac8:	2501      	movs	r5, #1
 8001aca:	2100      	movs	r1, #0
 8001acc:	44a8      	add	r8, r5
 8001ace:	e66a      	b.n	80017a6 <__aeabi_ddiv+0x266>
 8001ad0:	075d      	lsls	r5, r3, #29
 8001ad2:	025b      	lsls	r3, r3, #9
 8001ad4:	0b1a      	lsrs	r2, r3, #12
 8001ad6:	08c9      	lsrs	r1, r1, #3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	430d      	orrs	r5, r1
 8001adc:	e587      	b.n	80015ee <__aeabi_ddiv+0xae>
 8001ade:	9900      	ldr	r1, [sp, #0]
 8001ae0:	3d02      	subs	r5, #2
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	428a      	cmp	r2, r1
 8001ae6:	41bf      	sbcs	r7, r7
 8001ae8:	427f      	negs	r7, r7
 8001aea:	193f      	adds	r7, r7, r4
 8001aec:	19f6      	adds	r6, r6, r7
 8001aee:	9200      	str	r2, [sp, #0]
 8001af0:	e7dd      	b.n	8001aae <__aeabi_ddiv+0x56e>
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	4643      	mov	r3, r8
 8001af6:	0312      	lsls	r2, r2, #12
 8001af8:	431a      	orrs	r2, r3
 8001afa:	0312      	lsls	r2, r2, #12
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <__aeabi_ddiv+0x5cc>)
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	e575      	b.n	80015ee <__aeabi_ddiv+0xae>
 8001b02:	9900      	ldr	r1, [sp, #0]
 8001b04:	4299      	cmp	r1, r3
 8001b06:	d3ea      	bcc.n	8001ade <__aeabi_ddiv+0x59e>
 8001b08:	0015      	movs	r5, r2
 8001b0a:	e7d3      	b.n	8001ab4 <__aeabi_ddiv+0x574>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	0000043e 	.word	0x0000043e
 8001b14:	0000041e 	.word	0x0000041e
 8001b18:	000003ff 	.word	0x000003ff

08001b1c <__eqdf2>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	464e      	mov	r6, r9
 8001b20:	4645      	mov	r5, r8
 8001b22:	46de      	mov	lr, fp
 8001b24:	4657      	mov	r7, sl
 8001b26:	4690      	mov	r8, r2
 8001b28:	b5e0      	push	{r5, r6, r7, lr}
 8001b2a:	0017      	movs	r7, r2
 8001b2c:	031a      	lsls	r2, r3, #12
 8001b2e:	0b12      	lsrs	r2, r2, #12
 8001b30:	0005      	movs	r5, r0
 8001b32:	4684      	mov	ip, r0
 8001b34:	4819      	ldr	r0, [pc, #100]	; (8001b9c <__eqdf2+0x80>)
 8001b36:	030e      	lsls	r6, r1, #12
 8001b38:	004c      	lsls	r4, r1, #1
 8001b3a:	4691      	mov	r9, r2
 8001b3c:	005a      	lsls	r2, r3, #1
 8001b3e:	0fdb      	lsrs	r3, r3, #31
 8001b40:	469b      	mov	fp, r3
 8001b42:	0b36      	lsrs	r6, r6, #12
 8001b44:	0d64      	lsrs	r4, r4, #21
 8001b46:	0fc9      	lsrs	r1, r1, #31
 8001b48:	0d52      	lsrs	r2, r2, #21
 8001b4a:	4284      	cmp	r4, r0
 8001b4c:	d019      	beq.n	8001b82 <__eqdf2+0x66>
 8001b4e:	4282      	cmp	r2, r0
 8001b50:	d010      	beq.n	8001b74 <__eqdf2+0x58>
 8001b52:	2001      	movs	r0, #1
 8001b54:	4294      	cmp	r4, r2
 8001b56:	d10e      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b58:	454e      	cmp	r6, r9
 8001b5a:	d10c      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	45c4      	cmp	ip, r8
 8001b60:	d109      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b62:	4559      	cmp	r1, fp
 8001b64:	d017      	beq.n	8001b96 <__eqdf2+0x7a>
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d105      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b6a:	0030      	movs	r0, r6
 8001b6c:	4328      	orrs	r0, r5
 8001b6e:	1e43      	subs	r3, r0, #1
 8001b70:	4198      	sbcs	r0, r3
 8001b72:	e000      	b.n	8001b76 <__eqdf2+0x5a>
 8001b74:	2001      	movs	r0, #1
 8001b76:	bcf0      	pop	{r4, r5, r6, r7}
 8001b78:	46bb      	mov	fp, r7
 8001b7a:	46b2      	mov	sl, r6
 8001b7c:	46a9      	mov	r9, r5
 8001b7e:	46a0      	mov	r8, r4
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b82:	0033      	movs	r3, r6
 8001b84:	2001      	movs	r0, #1
 8001b86:	432b      	orrs	r3, r5
 8001b88:	d1f5      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b8a:	42a2      	cmp	r2, r4
 8001b8c:	d1f3      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b8e:	464b      	mov	r3, r9
 8001b90:	433b      	orrs	r3, r7
 8001b92:	d1f0      	bne.n	8001b76 <__eqdf2+0x5a>
 8001b94:	e7e2      	b.n	8001b5c <__eqdf2+0x40>
 8001b96:	2000      	movs	r0, #0
 8001b98:	e7ed      	b.n	8001b76 <__eqdf2+0x5a>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	000007ff 	.word	0x000007ff

08001ba0 <__gedf2>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	4647      	mov	r7, r8
 8001ba4:	46ce      	mov	lr, r9
 8001ba6:	0004      	movs	r4, r0
 8001ba8:	0018      	movs	r0, r3
 8001baa:	0016      	movs	r6, r2
 8001bac:	031b      	lsls	r3, r3, #12
 8001bae:	0b1b      	lsrs	r3, r3, #12
 8001bb0:	4d2d      	ldr	r5, [pc, #180]	; (8001c68 <__gedf2+0xc8>)
 8001bb2:	004a      	lsls	r2, r1, #1
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	0043      	lsls	r3, r0, #1
 8001bba:	030f      	lsls	r7, r1, #12
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	46b0      	mov	r8, r6
 8001bc0:	0b3f      	lsrs	r7, r7, #12
 8001bc2:	0d52      	lsrs	r2, r2, #21
 8001bc4:	0fc9      	lsrs	r1, r1, #31
 8001bc6:	0d5b      	lsrs	r3, r3, #21
 8001bc8:	0fc0      	lsrs	r0, r0, #31
 8001bca:	42aa      	cmp	r2, r5
 8001bcc:	d021      	beq.n	8001c12 <__gedf2+0x72>
 8001bce:	42ab      	cmp	r3, r5
 8001bd0:	d013      	beq.n	8001bfa <__gedf2+0x5a>
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d122      	bne.n	8001c1c <__gedf2+0x7c>
 8001bd6:	433c      	orrs	r4, r7
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <__gedf2+0x42>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	432e      	orrs	r6, r5
 8001be0:	d022      	beq.n	8001c28 <__gedf2+0x88>
 8001be2:	2c00      	cmp	r4, #0
 8001be4:	d010      	beq.n	8001c08 <__gedf2+0x68>
 8001be6:	4281      	cmp	r1, r0
 8001be8:	d022      	beq.n	8001c30 <__gedf2+0x90>
 8001bea:	2002      	movs	r0, #2
 8001bec:	3901      	subs	r1, #1
 8001bee:	4008      	ands	r0, r1
 8001bf0:	3801      	subs	r0, #1
 8001bf2:	bcc0      	pop	{r6, r7}
 8001bf4:	46b9      	mov	r9, r7
 8001bf6:	46b0      	mov	r8, r6
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	464d      	mov	r5, r9
 8001bfc:	432e      	orrs	r6, r5
 8001bfe:	d129      	bne.n	8001c54 <__gedf2+0xb4>
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	d1f0      	bne.n	8001be6 <__gedf2+0x46>
 8001c04:	433c      	orrs	r4, r7
 8001c06:	d1ee      	bne.n	8001be6 <__gedf2+0x46>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1f2      	bne.n	8001bf2 <__gedf2+0x52>
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	4240      	negs	r0, r0
 8001c10:	e7ef      	b.n	8001bf2 <__gedf2+0x52>
 8001c12:	003d      	movs	r5, r7
 8001c14:	4325      	orrs	r5, r4
 8001c16:	d11d      	bne.n	8001c54 <__gedf2+0xb4>
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d0ee      	beq.n	8001bfa <__gedf2+0x5a>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e2      	bne.n	8001be6 <__gedf2+0x46>
 8001c20:	464c      	mov	r4, r9
 8001c22:	4326      	orrs	r6, r4
 8001c24:	d1df      	bne.n	8001be6 <__gedf2+0x46>
 8001c26:	e7e0      	b.n	8001bea <__gedf2+0x4a>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d0e1      	beq.n	8001bf2 <__gedf2+0x52>
 8001c2e:	e7dc      	b.n	8001bea <__gedf2+0x4a>
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dc0a      	bgt.n	8001c4a <__gedf2+0xaa>
 8001c34:	dbe8      	blt.n	8001c08 <__gedf2+0x68>
 8001c36:	454f      	cmp	r7, r9
 8001c38:	d8d7      	bhi.n	8001bea <__gedf2+0x4a>
 8001c3a:	d00e      	beq.n	8001c5a <__gedf2+0xba>
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	454f      	cmp	r7, r9
 8001c40:	d2d7      	bcs.n	8001bf2 <__gedf2+0x52>
 8001c42:	2900      	cmp	r1, #0
 8001c44:	d0e2      	beq.n	8001c0c <__gedf2+0x6c>
 8001c46:	0008      	movs	r0, r1
 8001c48:	e7d3      	b.n	8001bf2 <__gedf2+0x52>
 8001c4a:	4243      	negs	r3, r0
 8001c4c:	4158      	adcs	r0, r3
 8001c4e:	0040      	lsls	r0, r0, #1
 8001c50:	3801      	subs	r0, #1
 8001c52:	e7ce      	b.n	8001bf2 <__gedf2+0x52>
 8001c54:	2002      	movs	r0, #2
 8001c56:	4240      	negs	r0, r0
 8001c58:	e7cb      	b.n	8001bf2 <__gedf2+0x52>
 8001c5a:	45c4      	cmp	ip, r8
 8001c5c:	d8c5      	bhi.n	8001bea <__gedf2+0x4a>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	45c4      	cmp	ip, r8
 8001c62:	d2c6      	bcs.n	8001bf2 <__gedf2+0x52>
 8001c64:	e7ed      	b.n	8001c42 <__gedf2+0xa2>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	000007ff 	.word	0x000007ff

08001c6c <__ledf2>:
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	4647      	mov	r7, r8
 8001c70:	46ce      	mov	lr, r9
 8001c72:	0004      	movs	r4, r0
 8001c74:	0018      	movs	r0, r3
 8001c76:	0016      	movs	r6, r2
 8001c78:	031b      	lsls	r3, r3, #12
 8001c7a:	0b1b      	lsrs	r3, r3, #12
 8001c7c:	4d2c      	ldr	r5, [pc, #176]	; (8001d30 <__ledf2+0xc4>)
 8001c7e:	004a      	lsls	r2, r1, #1
 8001c80:	4699      	mov	r9, r3
 8001c82:	b580      	push	{r7, lr}
 8001c84:	0043      	lsls	r3, r0, #1
 8001c86:	030f      	lsls	r7, r1, #12
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	46b0      	mov	r8, r6
 8001c8c:	0b3f      	lsrs	r7, r7, #12
 8001c8e:	0d52      	lsrs	r2, r2, #21
 8001c90:	0fc9      	lsrs	r1, r1, #31
 8001c92:	0d5b      	lsrs	r3, r3, #21
 8001c94:	0fc0      	lsrs	r0, r0, #31
 8001c96:	42aa      	cmp	r2, r5
 8001c98:	d00d      	beq.n	8001cb6 <__ledf2+0x4a>
 8001c9a:	42ab      	cmp	r3, r5
 8001c9c:	d010      	beq.n	8001cc0 <__ledf2+0x54>
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d127      	bne.n	8001cf2 <__ledf2+0x86>
 8001ca2:	433c      	orrs	r4, r7
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <__ledf2+0x60>
 8001ca8:	464d      	mov	r5, r9
 8001caa:	432e      	orrs	r6, r5
 8001cac:	d10e      	bne.n	8001ccc <__ledf2+0x60>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	2c00      	cmp	r4, #0
 8001cb2:	d015      	beq.n	8001ce0 <__ledf2+0x74>
 8001cb4:	e00e      	b.n	8001cd4 <__ledf2+0x68>
 8001cb6:	003d      	movs	r5, r7
 8001cb8:	4325      	orrs	r5, r4
 8001cba:	d110      	bne.n	8001cde <__ledf2+0x72>
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d118      	bne.n	8001cf2 <__ledf2+0x86>
 8001cc0:	464d      	mov	r5, r9
 8001cc2:	432e      	orrs	r6, r5
 8001cc4:	d10b      	bne.n	8001cde <__ledf2+0x72>
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d102      	bne.n	8001cd0 <__ledf2+0x64>
 8001cca:	433c      	orrs	r4, r7
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d00b      	beq.n	8001ce8 <__ledf2+0x7c>
 8001cd0:	4281      	cmp	r1, r0
 8001cd2:	d014      	beq.n	8001cfe <__ledf2+0x92>
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	3901      	subs	r1, #1
 8001cd8:	4008      	ands	r0, r1
 8001cda:	3801      	subs	r0, #1
 8001cdc:	e000      	b.n	8001ce0 <__ledf2+0x74>
 8001cde:	2002      	movs	r0, #2
 8001ce0:	bcc0      	pop	{r6, r7}
 8001ce2:	46b9      	mov	r9, r7
 8001ce4:	46b0      	mov	r8, r6
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	d1f9      	bne.n	8001ce0 <__ledf2+0x74>
 8001cec:	2001      	movs	r0, #1
 8001cee:	4240      	negs	r0, r0
 8001cf0:	e7f6      	b.n	8001ce0 <__ledf2+0x74>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ec      	bne.n	8001cd0 <__ledf2+0x64>
 8001cf6:	464c      	mov	r4, r9
 8001cf8:	4326      	orrs	r6, r4
 8001cfa:	d1e9      	bne.n	8001cd0 <__ledf2+0x64>
 8001cfc:	e7ea      	b.n	8001cd4 <__ledf2+0x68>
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dd04      	ble.n	8001d0c <__ledf2+0xa0>
 8001d02:	4243      	negs	r3, r0
 8001d04:	4158      	adcs	r0, r3
 8001d06:	0040      	lsls	r0, r0, #1
 8001d08:	3801      	subs	r0, #1
 8001d0a:	e7e9      	b.n	8001ce0 <__ledf2+0x74>
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbeb      	blt.n	8001ce8 <__ledf2+0x7c>
 8001d10:	454f      	cmp	r7, r9
 8001d12:	d8df      	bhi.n	8001cd4 <__ledf2+0x68>
 8001d14:	d006      	beq.n	8001d24 <__ledf2+0xb8>
 8001d16:	2000      	movs	r0, #0
 8001d18:	454f      	cmp	r7, r9
 8001d1a:	d2e1      	bcs.n	8001ce0 <__ledf2+0x74>
 8001d1c:	2900      	cmp	r1, #0
 8001d1e:	d0e5      	beq.n	8001cec <__ledf2+0x80>
 8001d20:	0008      	movs	r0, r1
 8001d22:	e7dd      	b.n	8001ce0 <__ledf2+0x74>
 8001d24:	45c4      	cmp	ip, r8
 8001d26:	d8d5      	bhi.n	8001cd4 <__ledf2+0x68>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	45c4      	cmp	ip, r8
 8001d2c:	d2d8      	bcs.n	8001ce0 <__ledf2+0x74>
 8001d2e:	e7f5      	b.n	8001d1c <__ledf2+0xb0>
 8001d30:	000007ff 	.word	0x000007ff

08001d34 <__aeabi_dmul>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	4645      	mov	r5, r8
 8001d38:	46de      	mov	lr, fp
 8001d3a:	4657      	mov	r7, sl
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	001f      	movs	r7, r3
 8001d42:	030b      	lsls	r3, r1, #12
 8001d44:	0b1b      	lsrs	r3, r3, #12
 8001d46:	469b      	mov	fp, r3
 8001d48:	004d      	lsls	r5, r1, #1
 8001d4a:	0fcb      	lsrs	r3, r1, #31
 8001d4c:	0004      	movs	r4, r0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	4698      	mov	r8, r3
 8001d52:	b087      	sub	sp, #28
 8001d54:	0d6d      	lsrs	r5, r5, #21
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dmul+0x26>
 8001d58:	e1cd      	b.n	80020f6 <__aeabi_dmul+0x3c2>
 8001d5a:	4bce      	ldr	r3, [pc, #824]	; (8002094 <__aeabi_dmul+0x360>)
 8001d5c:	429d      	cmp	r5, r3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dmul+0x2e>
 8001d60:	e1e9      	b.n	8002136 <__aeabi_dmul+0x402>
 8001d62:	465a      	mov	r2, fp
 8001d64:	0f43      	lsrs	r3, r0, #29
 8001d66:	00d2      	lsls	r2, r2, #3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	0412      	lsls	r2, r2, #16
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	00c3      	lsls	r3, r0, #3
 8001d72:	469a      	mov	sl, r3
 8001d74:	4bc8      	ldr	r3, [pc, #800]	; (8002098 <__aeabi_dmul+0x364>)
 8001d76:	4693      	mov	fp, r2
 8001d78:	469c      	mov	ip, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2600      	movs	r6, #0
 8001d7e:	4465      	add	r5, ip
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	033c      	lsls	r4, r7, #12
 8001d84:	007b      	lsls	r3, r7, #1
 8001d86:	4648      	mov	r0, r9
 8001d88:	0b24      	lsrs	r4, r4, #12
 8001d8a:	0d5b      	lsrs	r3, r3, #21
 8001d8c:	0fff      	lsrs	r7, r7, #31
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dmul+0x60>
 8001d92:	e189      	b.n	80020a8 <__aeabi_dmul+0x374>
 8001d94:	4abf      	ldr	r2, [pc, #764]	; (8002094 <__aeabi_dmul+0x360>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <__aeabi_dmul+0x9a>
 8001d9a:	0f42      	lsrs	r2, r0, #29
 8001d9c:	00e4      	lsls	r4, r4, #3
 8001d9e:	4322      	orrs	r2, r4
 8001da0:	2480      	movs	r4, #128	; 0x80
 8001da2:	0424      	lsls	r4, r4, #16
 8001da4:	4314      	orrs	r4, r2
 8001da6:	4abc      	ldr	r2, [pc, #752]	; (8002098 <__aeabi_dmul+0x364>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	4694      	mov	ip, r2
 8001dac:	4642      	mov	r2, r8
 8001dae:	4463      	add	r3, ip
 8001db0:	195b      	adds	r3, r3, r5
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	9b01      	ldr	r3, [sp, #4]
 8001db6:	407a      	eors	r2, r7
 8001db8:	3301      	adds	r3, #1
 8001dba:	00c0      	lsls	r0, r0, #3
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	9302      	str	r3, [sp, #8]
 8001dc0:	2e0a      	cmp	r6, #10
 8001dc2:	dd1c      	ble.n	8001dfe <__aeabi_dmul+0xca>
 8001dc4:	003a      	movs	r2, r7
 8001dc6:	2e0b      	cmp	r6, #11
 8001dc8:	d05e      	beq.n	8001e88 <__aeabi_dmul+0x154>
 8001dca:	4647      	mov	r7, r8
 8001dcc:	e056      	b.n	8001e7c <__aeabi_dmul+0x148>
 8001dce:	4649      	mov	r1, r9
 8001dd0:	4bb0      	ldr	r3, [pc, #704]	; (8002094 <__aeabi_dmul+0x360>)
 8001dd2:	4321      	orrs	r1, r4
 8001dd4:	18eb      	adds	r3, r5, r3
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2900      	cmp	r1, #0
 8001dda:	d12a      	bne.n	8001e32 <__aeabi_dmul+0xfe>
 8001ddc:	2080      	movs	r0, #128	; 0x80
 8001dde:	2202      	movs	r2, #2
 8001de0:	0100      	lsls	r0, r0, #4
 8001de2:	002b      	movs	r3, r5
 8001de4:	4684      	mov	ip, r0
 8001de6:	4316      	orrs	r6, r2
 8001de8:	4642      	mov	r2, r8
 8001dea:	4463      	add	r3, ip
 8001dec:	407a      	eors	r2, r7
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2e0a      	cmp	r6, #10
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_dmul+0xc4>
 8001df6:	e231      	b.n	800225c <__aeabi_dmul+0x528>
 8001df8:	2000      	movs	r0, #0
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	2e02      	cmp	r6, #2
 8001e00:	dc26      	bgt.n	8001e50 <__aeabi_dmul+0x11c>
 8001e02:	3e01      	subs	r6, #1
 8001e04:	2e01      	cmp	r6, #1
 8001e06:	d852      	bhi.n	8001eae <__aeabi_dmul+0x17a>
 8001e08:	2902      	cmp	r1, #2
 8001e0a:	d04c      	beq.n	8001ea6 <__aeabi_dmul+0x172>
 8001e0c:	2901      	cmp	r1, #1
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dmul+0xde>
 8001e10:	e118      	b.n	8002044 <__aeabi_dmul+0x310>
 8001e12:	2300      	movs	r3, #0
 8001e14:	2400      	movs	r4, #0
 8001e16:	2500      	movs	r5, #0
 8001e18:	051b      	lsls	r3, r3, #20
 8001e1a:	4323      	orrs	r3, r4
 8001e1c:	07d2      	lsls	r2, r2, #31
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	0028      	movs	r0, r5
 8001e22:	0019      	movs	r1, r3
 8001e24:	b007      	add	sp, #28
 8001e26:	bcf0      	pop	{r4, r5, r6, r7}
 8001e28:	46bb      	mov	fp, r7
 8001e2a:	46b2      	mov	sl, r6
 8001e2c:	46a9      	mov	r9, r5
 8001e2e:	46a0      	mov	r8, r4
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	2203      	movs	r2, #3
 8001e36:	0109      	lsls	r1, r1, #4
 8001e38:	002b      	movs	r3, r5
 8001e3a:	468c      	mov	ip, r1
 8001e3c:	4316      	orrs	r6, r2
 8001e3e:	4642      	mov	r2, r8
 8001e40:	4463      	add	r3, ip
 8001e42:	407a      	eors	r2, r7
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	2e0a      	cmp	r6, #10
 8001e4a:	dd00      	ble.n	8001e4e <__aeabi_dmul+0x11a>
 8001e4c:	e228      	b.n	80022a0 <__aeabi_dmul+0x56c>
 8001e4e:	2103      	movs	r1, #3
 8001e50:	2501      	movs	r5, #1
 8001e52:	40b5      	lsls	r5, r6
 8001e54:	46ac      	mov	ip, r5
 8001e56:	26a6      	movs	r6, #166	; 0xa6
 8001e58:	4663      	mov	r3, ip
 8001e5a:	00f6      	lsls	r6, r6, #3
 8001e5c:	4035      	ands	r5, r6
 8001e5e:	4233      	tst	r3, r6
 8001e60:	d10b      	bne.n	8001e7a <__aeabi_dmul+0x146>
 8001e62:	2690      	movs	r6, #144	; 0x90
 8001e64:	00b6      	lsls	r6, r6, #2
 8001e66:	4233      	tst	r3, r6
 8001e68:	d118      	bne.n	8001e9c <__aeabi_dmul+0x168>
 8001e6a:	3eb9      	subs	r6, #185	; 0xb9
 8001e6c:	3eff      	subs	r6, #255	; 0xff
 8001e6e:	421e      	tst	r6, r3
 8001e70:	d01d      	beq.n	8001eae <__aeabi_dmul+0x17a>
 8001e72:	46a3      	mov	fp, r4
 8001e74:	4682      	mov	sl, r0
 8001e76:	9100      	str	r1, [sp, #0]
 8001e78:	e000      	b.n	8001e7c <__aeabi_dmul+0x148>
 8001e7a:	0017      	movs	r7, r2
 8001e7c:	9900      	ldr	r1, [sp, #0]
 8001e7e:	003a      	movs	r2, r7
 8001e80:	2902      	cmp	r1, #2
 8001e82:	d010      	beq.n	8001ea6 <__aeabi_dmul+0x172>
 8001e84:	465c      	mov	r4, fp
 8001e86:	4650      	mov	r0, sl
 8001e88:	2903      	cmp	r1, #3
 8001e8a:	d1bf      	bne.n	8001e0c <__aeabi_dmul+0xd8>
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	431c      	orrs	r4, r3
 8001e92:	0324      	lsls	r4, r4, #12
 8001e94:	0005      	movs	r5, r0
 8001e96:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <__aeabi_dmul+0x360>)
 8001e98:	0b24      	lsrs	r4, r4, #12
 8001e9a:	e7bd      	b.n	8001e18 <__aeabi_dmul+0xe4>
 8001e9c:	2480      	movs	r4, #128	; 0x80
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4b7c      	ldr	r3, [pc, #496]	; (8002094 <__aeabi_dmul+0x360>)
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	e7b8      	b.n	8001e18 <__aeabi_dmul+0xe4>
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <__aeabi_dmul+0x360>)
 8001eac:	e7b4      	b.n	8001e18 <__aeabi_dmul+0xe4>
 8001eae:	4653      	mov	r3, sl
 8001eb0:	041e      	lsls	r6, r3, #16
 8001eb2:	0c36      	lsrs	r6, r6, #16
 8001eb4:	0c1f      	lsrs	r7, r3, #16
 8001eb6:	0033      	movs	r3, r6
 8001eb8:	0c01      	lsrs	r1, r0, #16
 8001eba:	0400      	lsls	r0, r0, #16
 8001ebc:	0c00      	lsrs	r0, r0, #16
 8001ebe:	4343      	muls	r3, r0
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	437b      	muls	r3, r7
 8001ec6:	4699      	mov	r9, r3
 8001ec8:	0033      	movs	r3, r6
 8001eca:	434b      	muls	r3, r1
 8001ecc:	469c      	mov	ip, r3
 8001ece:	4643      	mov	r3, r8
 8001ed0:	000d      	movs	r5, r1
 8001ed2:	0c1b      	lsrs	r3, r3, #16
 8001ed4:	469a      	mov	sl, r3
 8001ed6:	437d      	muls	r5, r7
 8001ed8:	44cc      	add	ip, r9
 8001eda:	44d4      	add	ip, sl
 8001edc:	9500      	str	r5, [sp, #0]
 8001ede:	45e1      	cmp	r9, ip
 8001ee0:	d904      	bls.n	8001eec <__aeabi_dmul+0x1b8>
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	444d      	add	r5, r9
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	4663      	mov	r3, ip
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	001d      	movs	r5, r3
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	469c      	mov	ip, r3
 8001ef8:	4643      	mov	r3, r8
 8001efa:	041b      	lsls	r3, r3, #16
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	4698      	mov	r8, r3
 8001f00:	4663      	mov	r3, ip
 8001f02:	4443      	add	r3, r8
 8001f04:	9303      	str	r3, [sp, #12]
 8001f06:	0c23      	lsrs	r3, r4, #16
 8001f08:	4698      	mov	r8, r3
 8001f0a:	0033      	movs	r3, r6
 8001f0c:	0424      	lsls	r4, r4, #16
 8001f0e:	0c24      	lsrs	r4, r4, #16
 8001f10:	4363      	muls	r3, r4
 8001f12:	469c      	mov	ip, r3
 8001f14:	0023      	movs	r3, r4
 8001f16:	437b      	muls	r3, r7
 8001f18:	4699      	mov	r9, r3
 8001f1a:	4643      	mov	r3, r8
 8001f1c:	435e      	muls	r6, r3
 8001f1e:	435f      	muls	r7, r3
 8001f20:	444e      	add	r6, r9
 8001f22:	4663      	mov	r3, ip
 8001f24:	46b2      	mov	sl, r6
 8001f26:	0c1e      	lsrs	r6, r3, #16
 8001f28:	4456      	add	r6, sl
 8001f2a:	45b1      	cmp	r9, r6
 8001f2c:	d903      	bls.n	8001f36 <__aeabi_dmul+0x202>
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	025b      	lsls	r3, r3, #9
 8001f32:	4699      	mov	r9, r3
 8001f34:	444f      	add	r7, r9
 8001f36:	0c33      	lsrs	r3, r6, #16
 8001f38:	4699      	mov	r9, r3
 8001f3a:	003b      	movs	r3, r7
 8001f3c:	444b      	add	r3, r9
 8001f3e:	9305      	str	r3, [sp, #20]
 8001f40:	4663      	mov	r3, ip
 8001f42:	46ac      	mov	ip, r5
 8001f44:	041f      	lsls	r7, r3, #16
 8001f46:	0c3f      	lsrs	r7, r7, #16
 8001f48:	0436      	lsls	r6, r6, #16
 8001f4a:	19f6      	adds	r6, r6, r7
 8001f4c:	44b4      	add	ip, r6
 8001f4e:	4663      	mov	r3, ip
 8001f50:	9304      	str	r3, [sp, #16]
 8001f52:	465b      	mov	r3, fp
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	469c      	mov	ip, r3
 8001f58:	465b      	mov	r3, fp
 8001f5a:	041f      	lsls	r7, r3, #16
 8001f5c:	0c3f      	lsrs	r7, r7, #16
 8001f5e:	003b      	movs	r3, r7
 8001f60:	4343      	muls	r3, r0
 8001f62:	4699      	mov	r9, r3
 8001f64:	4663      	mov	r3, ip
 8001f66:	4343      	muls	r3, r0
 8001f68:	469a      	mov	sl, r3
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	4660      	mov	r0, ip
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	469b      	mov	fp, r3
 8001f72:	4348      	muls	r0, r1
 8001f74:	4379      	muls	r1, r7
 8001f76:	4451      	add	r1, sl
 8001f78:	4459      	add	r1, fp
 8001f7a:	458a      	cmp	sl, r1
 8001f7c:	d903      	bls.n	8001f86 <__aeabi_dmul+0x252>
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	025b      	lsls	r3, r3, #9
 8001f82:	469a      	mov	sl, r3
 8001f84:	4450      	add	r0, sl
 8001f86:	0c0b      	lsrs	r3, r1, #16
 8001f88:	469a      	mov	sl, r3
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	4699      	mov	r9, r3
 8001f92:	003b      	movs	r3, r7
 8001f94:	4363      	muls	r3, r4
 8001f96:	0409      	lsls	r1, r1, #16
 8001f98:	4645      	mov	r5, r8
 8001f9a:	4449      	add	r1, r9
 8001f9c:	4699      	mov	r9, r3
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	435c      	muls	r4, r3
 8001fa2:	436b      	muls	r3, r5
 8001fa4:	469c      	mov	ip, r3
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	4698      	mov	r8, r3
 8001fac:	436f      	muls	r7, r5
 8001fae:	193f      	adds	r7, r7, r4
 8001fb0:	4447      	add	r7, r8
 8001fb2:	4450      	add	r0, sl
 8001fb4:	42bc      	cmp	r4, r7
 8001fb6:	d903      	bls.n	8001fc0 <__aeabi_dmul+0x28c>
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	025b      	lsls	r3, r3, #9
 8001fbc:	4698      	mov	r8, r3
 8001fbe:	44c4      	add	ip, r8
 8001fc0:	9b04      	ldr	r3, [sp, #16]
 8001fc2:	9d00      	ldr	r5, [sp, #0]
 8001fc4:	4698      	mov	r8, r3
 8001fc6:	4445      	add	r5, r8
 8001fc8:	42b5      	cmp	r5, r6
 8001fca:	41b6      	sbcs	r6, r6
 8001fcc:	4273      	negs	r3, r6
 8001fce:	4698      	mov	r8, r3
 8001fd0:	464b      	mov	r3, r9
 8001fd2:	041e      	lsls	r6, r3, #16
 8001fd4:	9b05      	ldr	r3, [sp, #20]
 8001fd6:	043c      	lsls	r4, r7, #16
 8001fd8:	4699      	mov	r9, r3
 8001fda:	0c36      	lsrs	r6, r6, #16
 8001fdc:	19a4      	adds	r4, r4, r6
 8001fde:	444c      	add	r4, r9
 8001fe0:	46a1      	mov	r9, r4
 8001fe2:	4683      	mov	fp, r0
 8001fe4:	186e      	adds	r6, r5, r1
 8001fe6:	44c1      	add	r9, r8
 8001fe8:	428e      	cmp	r6, r1
 8001fea:	4189      	sbcs	r1, r1
 8001fec:	44cb      	add	fp, r9
 8001fee:	465d      	mov	r5, fp
 8001ff0:	4249      	negs	r1, r1
 8001ff2:	186d      	adds	r5, r5, r1
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	41a4      	sbcs	r4, r4
 8001ff8:	45c1      	cmp	r9, r8
 8001ffa:	419b      	sbcs	r3, r3
 8001ffc:	4583      	cmp	fp, r0
 8001ffe:	4180      	sbcs	r0, r0
 8002000:	428d      	cmp	r5, r1
 8002002:	4189      	sbcs	r1, r1
 8002004:	425b      	negs	r3, r3
 8002006:	4264      	negs	r4, r4
 8002008:	431c      	orrs	r4, r3
 800200a:	4240      	negs	r0, r0
 800200c:	9b03      	ldr	r3, [sp, #12]
 800200e:	4249      	negs	r1, r1
 8002010:	4301      	orrs	r1, r0
 8002012:	0270      	lsls	r0, r6, #9
 8002014:	0c3f      	lsrs	r7, r7, #16
 8002016:	4318      	orrs	r0, r3
 8002018:	19e4      	adds	r4, r4, r7
 800201a:	1e47      	subs	r7, r0, #1
 800201c:	41b8      	sbcs	r0, r7
 800201e:	1864      	adds	r4, r4, r1
 8002020:	4464      	add	r4, ip
 8002022:	0df6      	lsrs	r6, r6, #23
 8002024:	0261      	lsls	r1, r4, #9
 8002026:	4330      	orrs	r0, r6
 8002028:	0dec      	lsrs	r4, r5, #23
 800202a:	026e      	lsls	r6, r5, #9
 800202c:	430c      	orrs	r4, r1
 800202e:	4330      	orrs	r0, r6
 8002030:	01c9      	lsls	r1, r1, #7
 8002032:	d400      	bmi.n	8002036 <__aeabi_dmul+0x302>
 8002034:	e0f1      	b.n	800221a <__aeabi_dmul+0x4e6>
 8002036:	2101      	movs	r1, #1
 8002038:	0843      	lsrs	r3, r0, #1
 800203a:	4001      	ands	r1, r0
 800203c:	430b      	orrs	r3, r1
 800203e:	07e0      	lsls	r0, r4, #31
 8002040:	4318      	orrs	r0, r3
 8002042:	0864      	lsrs	r4, r4, #1
 8002044:	4915      	ldr	r1, [pc, #84]	; (800209c <__aeabi_dmul+0x368>)
 8002046:	9b02      	ldr	r3, [sp, #8]
 8002048:	468c      	mov	ip, r1
 800204a:	4463      	add	r3, ip
 800204c:	2b00      	cmp	r3, #0
 800204e:	dc00      	bgt.n	8002052 <__aeabi_dmul+0x31e>
 8002050:	e097      	b.n	8002182 <__aeabi_dmul+0x44e>
 8002052:	0741      	lsls	r1, r0, #29
 8002054:	d009      	beq.n	800206a <__aeabi_dmul+0x336>
 8002056:	210f      	movs	r1, #15
 8002058:	4001      	ands	r1, r0
 800205a:	2904      	cmp	r1, #4
 800205c:	d005      	beq.n	800206a <__aeabi_dmul+0x336>
 800205e:	1d01      	adds	r1, r0, #4
 8002060:	4281      	cmp	r1, r0
 8002062:	4180      	sbcs	r0, r0
 8002064:	4240      	negs	r0, r0
 8002066:	1824      	adds	r4, r4, r0
 8002068:	0008      	movs	r0, r1
 800206a:	01e1      	lsls	r1, r4, #7
 800206c:	d506      	bpl.n	800207c <__aeabi_dmul+0x348>
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	00c9      	lsls	r1, r1, #3
 8002072:	468c      	mov	ip, r1
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <__aeabi_dmul+0x36c>)
 8002076:	401c      	ands	r4, r3
 8002078:	9b02      	ldr	r3, [sp, #8]
 800207a:	4463      	add	r3, ip
 800207c:	4909      	ldr	r1, [pc, #36]	; (80020a4 <__aeabi_dmul+0x370>)
 800207e:	428b      	cmp	r3, r1
 8002080:	dd00      	ble.n	8002084 <__aeabi_dmul+0x350>
 8002082:	e710      	b.n	8001ea6 <__aeabi_dmul+0x172>
 8002084:	0761      	lsls	r1, r4, #29
 8002086:	08c5      	lsrs	r5, r0, #3
 8002088:	0264      	lsls	r4, r4, #9
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	430d      	orrs	r5, r1
 800208e:	0b24      	lsrs	r4, r4, #12
 8002090:	0d5b      	lsrs	r3, r3, #21
 8002092:	e6c1      	b.n	8001e18 <__aeabi_dmul+0xe4>
 8002094:	000007ff 	.word	0x000007ff
 8002098:	fffffc01 	.word	0xfffffc01
 800209c:	000003ff 	.word	0x000003ff
 80020a0:	feffffff 	.word	0xfeffffff
 80020a4:	000007fe 	.word	0x000007fe
 80020a8:	464b      	mov	r3, r9
 80020aa:	4323      	orrs	r3, r4
 80020ac:	d059      	beq.n	8002162 <__aeabi_dmul+0x42e>
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dmul+0x380>
 80020b2:	e0a3      	b.n	80021fc <__aeabi_dmul+0x4c8>
 80020b4:	0020      	movs	r0, r4
 80020b6:	f000 fd8b 	bl	8002bd0 <__clzsi2>
 80020ba:	0001      	movs	r1, r0
 80020bc:	0003      	movs	r3, r0
 80020be:	390b      	subs	r1, #11
 80020c0:	221d      	movs	r2, #29
 80020c2:	1a52      	subs	r2, r2, r1
 80020c4:	4649      	mov	r1, r9
 80020c6:	0018      	movs	r0, r3
 80020c8:	40d1      	lsrs	r1, r2
 80020ca:	464a      	mov	r2, r9
 80020cc:	3808      	subs	r0, #8
 80020ce:	4082      	lsls	r2, r0
 80020d0:	4084      	lsls	r4, r0
 80020d2:	0010      	movs	r0, r2
 80020d4:	430c      	orrs	r4, r1
 80020d6:	4a74      	ldr	r2, [pc, #464]	; (80022a8 <__aeabi_dmul+0x574>)
 80020d8:	1aeb      	subs	r3, r5, r3
 80020da:	4694      	mov	ip, r2
 80020dc:	4642      	mov	r2, r8
 80020de:	4463      	add	r3, ip
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	9b01      	ldr	r3, [sp, #4]
 80020e4:	407a      	eors	r2, r7
 80020e6:	3301      	adds	r3, #1
 80020e8:	2100      	movs	r1, #0
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	2e0a      	cmp	r6, #10
 80020f0:	dd00      	ble.n	80020f4 <__aeabi_dmul+0x3c0>
 80020f2:	e667      	b.n	8001dc4 <__aeabi_dmul+0x90>
 80020f4:	e683      	b.n	8001dfe <__aeabi_dmul+0xca>
 80020f6:	465b      	mov	r3, fp
 80020f8:	4303      	orrs	r3, r0
 80020fa:	469a      	mov	sl, r3
 80020fc:	d02a      	beq.n	8002154 <__aeabi_dmul+0x420>
 80020fe:	465b      	mov	r3, fp
 8002100:	2b00      	cmp	r3, #0
 8002102:	d06d      	beq.n	80021e0 <__aeabi_dmul+0x4ac>
 8002104:	4658      	mov	r0, fp
 8002106:	f000 fd63 	bl	8002bd0 <__clzsi2>
 800210a:	0001      	movs	r1, r0
 800210c:	0003      	movs	r3, r0
 800210e:	390b      	subs	r1, #11
 8002110:	221d      	movs	r2, #29
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	0021      	movs	r1, r4
 8002116:	0018      	movs	r0, r3
 8002118:	465d      	mov	r5, fp
 800211a:	40d1      	lsrs	r1, r2
 800211c:	3808      	subs	r0, #8
 800211e:	4085      	lsls	r5, r0
 8002120:	000a      	movs	r2, r1
 8002122:	4084      	lsls	r4, r0
 8002124:	432a      	orrs	r2, r5
 8002126:	4693      	mov	fp, r2
 8002128:	46a2      	mov	sl, r4
 800212a:	4d5f      	ldr	r5, [pc, #380]	; (80022a8 <__aeabi_dmul+0x574>)
 800212c:	2600      	movs	r6, #0
 800212e:	1aed      	subs	r5, r5, r3
 8002130:	2300      	movs	r3, #0
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	e625      	b.n	8001d82 <__aeabi_dmul+0x4e>
 8002136:	465b      	mov	r3, fp
 8002138:	4303      	orrs	r3, r0
 800213a:	469a      	mov	sl, r3
 800213c:	d105      	bne.n	800214a <__aeabi_dmul+0x416>
 800213e:	2300      	movs	r3, #0
 8002140:	469b      	mov	fp, r3
 8002142:	3302      	adds	r3, #2
 8002144:	2608      	movs	r6, #8
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	e61b      	b.n	8001d82 <__aeabi_dmul+0x4e>
 800214a:	2303      	movs	r3, #3
 800214c:	4682      	mov	sl, r0
 800214e:	260c      	movs	r6, #12
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	e616      	b.n	8001d82 <__aeabi_dmul+0x4e>
 8002154:	2300      	movs	r3, #0
 8002156:	469b      	mov	fp, r3
 8002158:	3301      	adds	r3, #1
 800215a:	2604      	movs	r6, #4
 800215c:	2500      	movs	r5, #0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	e60f      	b.n	8001d82 <__aeabi_dmul+0x4e>
 8002162:	4642      	mov	r2, r8
 8002164:	3301      	adds	r3, #1
 8002166:	9501      	str	r5, [sp, #4]
 8002168:	431e      	orrs	r6, r3
 800216a:	9b01      	ldr	r3, [sp, #4]
 800216c:	407a      	eors	r2, r7
 800216e:	3301      	adds	r3, #1
 8002170:	2400      	movs	r4, #0
 8002172:	2000      	movs	r0, #0
 8002174:	2101      	movs	r1, #1
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	2e0a      	cmp	r6, #10
 800217c:	dd00      	ble.n	8002180 <__aeabi_dmul+0x44c>
 800217e:	e621      	b.n	8001dc4 <__aeabi_dmul+0x90>
 8002180:	e63d      	b.n	8001dfe <__aeabi_dmul+0xca>
 8002182:	2101      	movs	r1, #1
 8002184:	1ac9      	subs	r1, r1, r3
 8002186:	2938      	cmp	r1, #56	; 0x38
 8002188:	dd00      	ble.n	800218c <__aeabi_dmul+0x458>
 800218a:	e642      	b.n	8001e12 <__aeabi_dmul+0xde>
 800218c:	291f      	cmp	r1, #31
 800218e:	dd47      	ble.n	8002220 <__aeabi_dmul+0x4ec>
 8002190:	261f      	movs	r6, #31
 8002192:	0025      	movs	r5, r4
 8002194:	4276      	negs	r6, r6
 8002196:	1af3      	subs	r3, r6, r3
 8002198:	40dd      	lsrs	r5, r3
 800219a:	002b      	movs	r3, r5
 800219c:	2920      	cmp	r1, #32
 800219e:	d005      	beq.n	80021ac <__aeabi_dmul+0x478>
 80021a0:	4942      	ldr	r1, [pc, #264]	; (80022ac <__aeabi_dmul+0x578>)
 80021a2:	9d02      	ldr	r5, [sp, #8]
 80021a4:	468c      	mov	ip, r1
 80021a6:	4465      	add	r5, ip
 80021a8:	40ac      	lsls	r4, r5
 80021aa:	4320      	orrs	r0, r4
 80021ac:	1e41      	subs	r1, r0, #1
 80021ae:	4188      	sbcs	r0, r1
 80021b0:	4318      	orrs	r0, r3
 80021b2:	2307      	movs	r3, #7
 80021b4:	001d      	movs	r5, r3
 80021b6:	2400      	movs	r4, #0
 80021b8:	4005      	ands	r5, r0
 80021ba:	4203      	tst	r3, r0
 80021bc:	d04a      	beq.n	8002254 <__aeabi_dmul+0x520>
 80021be:	230f      	movs	r3, #15
 80021c0:	2400      	movs	r4, #0
 80021c2:	4003      	ands	r3, r0
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d042      	beq.n	800224e <__aeabi_dmul+0x51a>
 80021c8:	1d03      	adds	r3, r0, #4
 80021ca:	4283      	cmp	r3, r0
 80021cc:	4180      	sbcs	r0, r0
 80021ce:	4240      	negs	r0, r0
 80021d0:	1824      	adds	r4, r4, r0
 80021d2:	0018      	movs	r0, r3
 80021d4:	0223      	lsls	r3, r4, #8
 80021d6:	d53a      	bpl.n	800224e <__aeabi_dmul+0x51a>
 80021d8:	2301      	movs	r3, #1
 80021da:	2400      	movs	r4, #0
 80021dc:	2500      	movs	r5, #0
 80021de:	e61b      	b.n	8001e18 <__aeabi_dmul+0xe4>
 80021e0:	f000 fcf6 	bl	8002bd0 <__clzsi2>
 80021e4:	0001      	movs	r1, r0
 80021e6:	0003      	movs	r3, r0
 80021e8:	3115      	adds	r1, #21
 80021ea:	3320      	adds	r3, #32
 80021ec:	291c      	cmp	r1, #28
 80021ee:	dd8f      	ble.n	8002110 <__aeabi_dmul+0x3dc>
 80021f0:	3808      	subs	r0, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	4084      	lsls	r4, r0
 80021f6:	4692      	mov	sl, r2
 80021f8:	46a3      	mov	fp, r4
 80021fa:	e796      	b.n	800212a <__aeabi_dmul+0x3f6>
 80021fc:	f000 fce8 	bl	8002bd0 <__clzsi2>
 8002200:	0001      	movs	r1, r0
 8002202:	0003      	movs	r3, r0
 8002204:	3115      	adds	r1, #21
 8002206:	3320      	adds	r3, #32
 8002208:	291c      	cmp	r1, #28
 800220a:	dc00      	bgt.n	800220e <__aeabi_dmul+0x4da>
 800220c:	e758      	b.n	80020c0 <__aeabi_dmul+0x38c>
 800220e:	0002      	movs	r2, r0
 8002210:	464c      	mov	r4, r9
 8002212:	3a08      	subs	r2, #8
 8002214:	2000      	movs	r0, #0
 8002216:	4094      	lsls	r4, r2
 8002218:	e75d      	b.n	80020d6 <__aeabi_dmul+0x3a2>
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	e711      	b.n	8002044 <__aeabi_dmul+0x310>
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <__aeabi_dmul+0x57c>)
 8002222:	0026      	movs	r6, r4
 8002224:	469c      	mov	ip, r3
 8002226:	0003      	movs	r3, r0
 8002228:	9d02      	ldr	r5, [sp, #8]
 800222a:	40cb      	lsrs	r3, r1
 800222c:	4465      	add	r5, ip
 800222e:	40ae      	lsls	r6, r5
 8002230:	431e      	orrs	r6, r3
 8002232:	0003      	movs	r3, r0
 8002234:	40ab      	lsls	r3, r5
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	4183      	sbcs	r3, r0
 800223a:	0030      	movs	r0, r6
 800223c:	4318      	orrs	r0, r3
 800223e:	40cc      	lsrs	r4, r1
 8002240:	0743      	lsls	r3, r0, #29
 8002242:	d0c7      	beq.n	80021d4 <__aeabi_dmul+0x4a0>
 8002244:	230f      	movs	r3, #15
 8002246:	4003      	ands	r3, r0
 8002248:	2b04      	cmp	r3, #4
 800224a:	d1bd      	bne.n	80021c8 <__aeabi_dmul+0x494>
 800224c:	e7c2      	b.n	80021d4 <__aeabi_dmul+0x4a0>
 800224e:	0765      	lsls	r5, r4, #29
 8002250:	0264      	lsls	r4, r4, #9
 8002252:	0b24      	lsrs	r4, r4, #12
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	2300      	movs	r3, #0
 8002258:	4305      	orrs	r5, r0
 800225a:	e5dd      	b.n	8001e18 <__aeabi_dmul+0xe4>
 800225c:	2500      	movs	r5, #0
 800225e:	2302      	movs	r3, #2
 8002260:	2e0f      	cmp	r6, #15
 8002262:	d10c      	bne.n	800227e <__aeabi_dmul+0x54a>
 8002264:	2480      	movs	r4, #128	; 0x80
 8002266:	465b      	mov	r3, fp
 8002268:	0324      	lsls	r4, r4, #12
 800226a:	4223      	tst	r3, r4
 800226c:	d00e      	beq.n	800228c <__aeabi_dmul+0x558>
 800226e:	4221      	tst	r1, r4
 8002270:	d10c      	bne.n	800228c <__aeabi_dmul+0x558>
 8002272:	430c      	orrs	r4, r1
 8002274:	0324      	lsls	r4, r4, #12
 8002276:	003a      	movs	r2, r7
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <__aeabi_dmul+0x580>)
 800227a:	0b24      	lsrs	r4, r4, #12
 800227c:	e5cc      	b.n	8001e18 <__aeabi_dmul+0xe4>
 800227e:	2e0b      	cmp	r6, #11
 8002280:	d000      	beq.n	8002284 <__aeabi_dmul+0x550>
 8002282:	e5a2      	b.n	8001dca <__aeabi_dmul+0x96>
 8002284:	468b      	mov	fp, r1
 8002286:	46aa      	mov	sl, r5
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	e5f7      	b.n	8001e7c <__aeabi_dmul+0x148>
 800228c:	2480      	movs	r4, #128	; 0x80
 800228e:	465b      	mov	r3, fp
 8002290:	0324      	lsls	r4, r4, #12
 8002292:	431c      	orrs	r4, r3
 8002294:	0324      	lsls	r4, r4, #12
 8002296:	4642      	mov	r2, r8
 8002298:	4655      	mov	r5, sl
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <__aeabi_dmul+0x580>)
 800229c:	0b24      	lsrs	r4, r4, #12
 800229e:	e5bb      	b.n	8001e18 <__aeabi_dmul+0xe4>
 80022a0:	464d      	mov	r5, r9
 80022a2:	0021      	movs	r1, r4
 80022a4:	2303      	movs	r3, #3
 80022a6:	e7db      	b.n	8002260 <__aeabi_dmul+0x52c>
 80022a8:	fffffc0d 	.word	0xfffffc0d
 80022ac:	0000043e 	.word	0x0000043e
 80022b0:	0000041e 	.word	0x0000041e
 80022b4:	000007ff 	.word	0x000007ff

080022b8 <__aeabi_dsub>:
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	4657      	mov	r7, sl
 80022bc:	464e      	mov	r6, r9
 80022be:	4645      	mov	r5, r8
 80022c0:	46de      	mov	lr, fp
 80022c2:	b5e0      	push	{r5, r6, r7, lr}
 80022c4:	000d      	movs	r5, r1
 80022c6:	0004      	movs	r4, r0
 80022c8:	0019      	movs	r1, r3
 80022ca:	0010      	movs	r0, r2
 80022cc:	032b      	lsls	r3, r5, #12
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	0f62      	lsrs	r2, r4, #29
 80022d2:	431a      	orrs	r2, r3
 80022d4:	00e3      	lsls	r3, r4, #3
 80022d6:	030c      	lsls	r4, r1, #12
 80022d8:	0a64      	lsrs	r4, r4, #9
 80022da:	0f47      	lsrs	r7, r0, #29
 80022dc:	4327      	orrs	r7, r4
 80022de:	4cd0      	ldr	r4, [pc, #832]	; (8002620 <__aeabi_dsub+0x368>)
 80022e0:	006e      	lsls	r6, r5, #1
 80022e2:	4691      	mov	r9, r2
 80022e4:	b083      	sub	sp, #12
 80022e6:	004a      	lsls	r2, r1, #1
 80022e8:	00c0      	lsls	r0, r0, #3
 80022ea:	4698      	mov	r8, r3
 80022ec:	46a2      	mov	sl, r4
 80022ee:	0d76      	lsrs	r6, r6, #21
 80022f0:	0fed      	lsrs	r5, r5, #31
 80022f2:	0d52      	lsrs	r2, r2, #21
 80022f4:	0fc9      	lsrs	r1, r1, #31
 80022f6:	9001      	str	r0, [sp, #4]
 80022f8:	42a2      	cmp	r2, r4
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x46>
 80022fc:	e0b9      	b.n	8002472 <__aeabi_dsub+0x1ba>
 80022fe:	2401      	movs	r4, #1
 8002300:	4061      	eors	r1, r4
 8002302:	468b      	mov	fp, r1
 8002304:	428d      	cmp	r5, r1
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x52>
 8002308:	e08d      	b.n	8002426 <__aeabi_dsub+0x16e>
 800230a:	1ab4      	subs	r4, r6, r2
 800230c:	46a4      	mov	ip, r4
 800230e:	2c00      	cmp	r4, #0
 8002310:	dc00      	bgt.n	8002314 <__aeabi_dsub+0x5c>
 8002312:	e0b7      	b.n	8002484 <__aeabi_dsub+0x1cc>
 8002314:	2a00      	cmp	r2, #0
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x62>
 8002318:	e0cb      	b.n	80024b2 <__aeabi_dsub+0x1fa>
 800231a:	4ac1      	ldr	r2, [pc, #772]	; (8002620 <__aeabi_dsub+0x368>)
 800231c:	4296      	cmp	r6, r2
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x6a>
 8002320:	e186      	b.n	8002630 <__aeabi_dsub+0x378>
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	0412      	lsls	r2, r2, #16
 8002326:	4317      	orrs	r7, r2
 8002328:	4662      	mov	r2, ip
 800232a:	2a38      	cmp	r2, #56	; 0x38
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0x78>
 800232e:	e1a4      	b.n	800267a <__aeabi_dsub+0x3c2>
 8002330:	2a1f      	cmp	r2, #31
 8002332:	dd00      	ble.n	8002336 <__aeabi_dsub+0x7e>
 8002334:	e21d      	b.n	8002772 <__aeabi_dsub+0x4ba>
 8002336:	4661      	mov	r1, ip
 8002338:	2220      	movs	r2, #32
 800233a:	003c      	movs	r4, r7
 800233c:	1a52      	subs	r2, r2, r1
 800233e:	0001      	movs	r1, r0
 8002340:	4090      	lsls	r0, r2
 8002342:	4094      	lsls	r4, r2
 8002344:	1e42      	subs	r2, r0, #1
 8002346:	4190      	sbcs	r0, r2
 8002348:	4662      	mov	r2, ip
 800234a:	46a0      	mov	r8, r4
 800234c:	4664      	mov	r4, ip
 800234e:	40d7      	lsrs	r7, r2
 8002350:	464a      	mov	r2, r9
 8002352:	40e1      	lsrs	r1, r4
 8002354:	4644      	mov	r4, r8
 8002356:	1bd2      	subs	r2, r2, r7
 8002358:	4691      	mov	r9, r2
 800235a:	430c      	orrs	r4, r1
 800235c:	4304      	orrs	r4, r0
 800235e:	1b1c      	subs	r4, r3, r4
 8002360:	42a3      	cmp	r3, r4
 8002362:	4192      	sbcs	r2, r2
 8002364:	464b      	mov	r3, r9
 8002366:	4252      	negs	r2, r2
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	469a      	mov	sl, r3
 800236c:	4653      	mov	r3, sl
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	d400      	bmi.n	8002374 <__aeabi_dsub+0xbc>
 8002372:	e12b      	b.n	80025cc <__aeabi_dsub+0x314>
 8002374:	4653      	mov	r3, sl
 8002376:	025a      	lsls	r2, r3, #9
 8002378:	0a53      	lsrs	r3, r2, #9
 800237a:	469a      	mov	sl, r3
 800237c:	4653      	mov	r3, sl
 800237e:	2b00      	cmp	r3, #0
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0xcc>
 8002382:	e166      	b.n	8002652 <__aeabi_dsub+0x39a>
 8002384:	4650      	mov	r0, sl
 8002386:	f000 fc23 	bl	8002bd0 <__clzsi2>
 800238a:	0003      	movs	r3, r0
 800238c:	3b08      	subs	r3, #8
 800238e:	2220      	movs	r2, #32
 8002390:	0020      	movs	r0, r4
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	4651      	mov	r1, sl
 8002396:	40d0      	lsrs	r0, r2
 8002398:	4099      	lsls	r1, r3
 800239a:	0002      	movs	r2, r0
 800239c:	409c      	lsls	r4, r3
 800239e:	430a      	orrs	r2, r1
 80023a0:	429e      	cmp	r6, r3
 80023a2:	dd00      	ble.n	80023a6 <__aeabi_dsub+0xee>
 80023a4:	e164      	b.n	8002670 <__aeabi_dsub+0x3b8>
 80023a6:	1b9b      	subs	r3, r3, r6
 80023a8:	1c59      	adds	r1, r3, #1
 80023aa:	291f      	cmp	r1, #31
 80023ac:	dd00      	ble.n	80023b0 <__aeabi_dsub+0xf8>
 80023ae:	e0fe      	b.n	80025ae <__aeabi_dsub+0x2f6>
 80023b0:	2320      	movs	r3, #32
 80023b2:	0010      	movs	r0, r2
 80023b4:	0026      	movs	r6, r4
 80023b6:	1a5b      	subs	r3, r3, r1
 80023b8:	409c      	lsls	r4, r3
 80023ba:	4098      	lsls	r0, r3
 80023bc:	40ce      	lsrs	r6, r1
 80023be:	40ca      	lsrs	r2, r1
 80023c0:	1e63      	subs	r3, r4, #1
 80023c2:	419c      	sbcs	r4, r3
 80023c4:	4330      	orrs	r0, r6
 80023c6:	4692      	mov	sl, r2
 80023c8:	2600      	movs	r6, #0
 80023ca:	4304      	orrs	r4, r0
 80023cc:	0763      	lsls	r3, r4, #29
 80023ce:	d009      	beq.n	80023e4 <__aeabi_dsub+0x12c>
 80023d0:	230f      	movs	r3, #15
 80023d2:	4023      	ands	r3, r4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d005      	beq.n	80023e4 <__aeabi_dsub+0x12c>
 80023d8:	1d23      	adds	r3, r4, #4
 80023da:	42a3      	cmp	r3, r4
 80023dc:	41a4      	sbcs	r4, r4
 80023de:	4264      	negs	r4, r4
 80023e0:	44a2      	add	sl, r4
 80023e2:	001c      	movs	r4, r3
 80023e4:	4653      	mov	r3, sl
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	d400      	bmi.n	80023ec <__aeabi_dsub+0x134>
 80023ea:	e0f2      	b.n	80025d2 <__aeabi_dsub+0x31a>
 80023ec:	4b8c      	ldr	r3, [pc, #560]	; (8002620 <__aeabi_dsub+0x368>)
 80023ee:	3601      	adds	r6, #1
 80023f0:	429e      	cmp	r6, r3
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x13e>
 80023f4:	e10f      	b.n	8002616 <__aeabi_dsub+0x35e>
 80023f6:	4653      	mov	r3, sl
 80023f8:	498a      	ldr	r1, [pc, #552]	; (8002624 <__aeabi_dsub+0x36c>)
 80023fa:	08e4      	lsrs	r4, r4, #3
 80023fc:	400b      	ands	r3, r1
 80023fe:	0019      	movs	r1, r3
 8002400:	075b      	lsls	r3, r3, #29
 8002402:	4323      	orrs	r3, r4
 8002404:	0572      	lsls	r2, r6, #21
 8002406:	024c      	lsls	r4, r1, #9
 8002408:	0b24      	lsrs	r4, r4, #12
 800240a:	0d52      	lsrs	r2, r2, #21
 800240c:	0512      	lsls	r2, r2, #20
 800240e:	4322      	orrs	r2, r4
 8002410:	07ed      	lsls	r5, r5, #31
 8002412:	432a      	orrs	r2, r5
 8002414:	0018      	movs	r0, r3
 8002416:	0011      	movs	r1, r2
 8002418:	b003      	add	sp, #12
 800241a:	bcf0      	pop	{r4, r5, r6, r7}
 800241c:	46bb      	mov	fp, r7
 800241e:	46b2      	mov	sl, r6
 8002420:	46a9      	mov	r9, r5
 8002422:	46a0      	mov	r8, r4
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002426:	1ab4      	subs	r4, r6, r2
 8002428:	46a4      	mov	ip, r4
 800242a:	2c00      	cmp	r4, #0
 800242c:	dd59      	ble.n	80024e2 <__aeabi_dsub+0x22a>
 800242e:	2a00      	cmp	r2, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x17c>
 8002432:	e0b0      	b.n	8002596 <__aeabi_dsub+0x2de>
 8002434:	4556      	cmp	r6, sl
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x182>
 8002438:	e0fa      	b.n	8002630 <__aeabi_dsub+0x378>
 800243a:	2280      	movs	r2, #128	; 0x80
 800243c:	0412      	lsls	r2, r2, #16
 800243e:	4317      	orrs	r7, r2
 8002440:	4662      	mov	r2, ip
 8002442:	2a38      	cmp	r2, #56	; 0x38
 8002444:	dd00      	ble.n	8002448 <__aeabi_dsub+0x190>
 8002446:	e0d4      	b.n	80025f2 <__aeabi_dsub+0x33a>
 8002448:	2a1f      	cmp	r2, #31
 800244a:	dc00      	bgt.n	800244e <__aeabi_dsub+0x196>
 800244c:	e1c0      	b.n	80027d0 <__aeabi_dsub+0x518>
 800244e:	0039      	movs	r1, r7
 8002450:	3a20      	subs	r2, #32
 8002452:	40d1      	lsrs	r1, r2
 8002454:	4662      	mov	r2, ip
 8002456:	2a20      	cmp	r2, #32
 8002458:	d006      	beq.n	8002468 <__aeabi_dsub+0x1b0>
 800245a:	4664      	mov	r4, ip
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	1b12      	subs	r2, r2, r4
 8002460:	003c      	movs	r4, r7
 8002462:	4094      	lsls	r4, r2
 8002464:	4304      	orrs	r4, r0
 8002466:	9401      	str	r4, [sp, #4]
 8002468:	9c01      	ldr	r4, [sp, #4]
 800246a:	1e62      	subs	r2, r4, #1
 800246c:	4194      	sbcs	r4, r2
 800246e:	430c      	orrs	r4, r1
 8002470:	e0c3      	b.n	80025fa <__aeabi_dsub+0x342>
 8002472:	003c      	movs	r4, r7
 8002474:	4304      	orrs	r4, r0
 8002476:	d02b      	beq.n	80024d0 <__aeabi_dsub+0x218>
 8002478:	468b      	mov	fp, r1
 800247a:	428d      	cmp	r5, r1
 800247c:	d02e      	beq.n	80024dc <__aeabi_dsub+0x224>
 800247e:	4c6a      	ldr	r4, [pc, #424]	; (8002628 <__aeabi_dsub+0x370>)
 8002480:	46a4      	mov	ip, r4
 8002482:	44b4      	add	ip, r6
 8002484:	4664      	mov	r4, ip
 8002486:	2c00      	cmp	r4, #0
 8002488:	d05f      	beq.n	800254a <__aeabi_dsub+0x292>
 800248a:	1b94      	subs	r4, r2, r6
 800248c:	46a4      	mov	ip, r4
 800248e:	2e00      	cmp	r6, #0
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x1dc>
 8002492:	e120      	b.n	80026d6 <__aeabi_dsub+0x41e>
 8002494:	464c      	mov	r4, r9
 8002496:	431c      	orrs	r4, r3
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x1e4>
 800249a:	e1c7      	b.n	800282c <__aeabi_dsub+0x574>
 800249c:	4661      	mov	r1, ip
 800249e:	1e4c      	subs	r4, r1, #1
 80024a0:	2901      	cmp	r1, #1
 80024a2:	d100      	bne.n	80024a6 <__aeabi_dsub+0x1ee>
 80024a4:	e223      	b.n	80028ee <__aeabi_dsub+0x636>
 80024a6:	4d5e      	ldr	r5, [pc, #376]	; (8002620 <__aeabi_dsub+0x368>)
 80024a8:	45ac      	cmp	ip, r5
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x1f6>
 80024ac:	e1d8      	b.n	8002860 <__aeabi_dsub+0x5a8>
 80024ae:	46a4      	mov	ip, r4
 80024b0:	e11a      	b.n	80026e8 <__aeabi_dsub+0x430>
 80024b2:	003a      	movs	r2, r7
 80024b4:	4302      	orrs	r2, r0
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x202>
 80024b8:	e0e4      	b.n	8002684 <__aeabi_dsub+0x3cc>
 80024ba:	0022      	movs	r2, r4
 80024bc:	3a01      	subs	r2, #1
 80024be:	2c01      	cmp	r4, #1
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x20c>
 80024c2:	e1c3      	b.n	800284c <__aeabi_dsub+0x594>
 80024c4:	4956      	ldr	r1, [pc, #344]	; (8002620 <__aeabi_dsub+0x368>)
 80024c6:	428c      	cmp	r4, r1
 80024c8:	d100      	bne.n	80024cc <__aeabi_dsub+0x214>
 80024ca:	e0b1      	b.n	8002630 <__aeabi_dsub+0x378>
 80024cc:	4694      	mov	ip, r2
 80024ce:	e72b      	b.n	8002328 <__aeabi_dsub+0x70>
 80024d0:	2401      	movs	r4, #1
 80024d2:	4061      	eors	r1, r4
 80024d4:	468b      	mov	fp, r1
 80024d6:	428d      	cmp	r5, r1
 80024d8:	d000      	beq.n	80024dc <__aeabi_dsub+0x224>
 80024da:	e716      	b.n	800230a <__aeabi_dsub+0x52>
 80024dc:	4952      	ldr	r1, [pc, #328]	; (8002628 <__aeabi_dsub+0x370>)
 80024de:	468c      	mov	ip, r1
 80024e0:	44b4      	add	ip, r6
 80024e2:	4664      	mov	r4, ip
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d100      	bne.n	80024ea <__aeabi_dsub+0x232>
 80024e8:	e0d3      	b.n	8002692 <__aeabi_dsub+0x3da>
 80024ea:	1b91      	subs	r1, r2, r6
 80024ec:	468c      	mov	ip, r1
 80024ee:	2e00      	cmp	r6, #0
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x23c>
 80024f2:	e15e      	b.n	80027b2 <__aeabi_dsub+0x4fa>
 80024f4:	494a      	ldr	r1, [pc, #296]	; (8002620 <__aeabi_dsub+0x368>)
 80024f6:	428a      	cmp	r2, r1
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x244>
 80024fa:	e1be      	b.n	800287a <__aeabi_dsub+0x5c2>
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	464c      	mov	r4, r9
 8002500:	0409      	lsls	r1, r1, #16
 8002502:	430c      	orrs	r4, r1
 8002504:	46a1      	mov	r9, r4
 8002506:	4661      	mov	r1, ip
 8002508:	2938      	cmp	r1, #56	; 0x38
 800250a:	dd00      	ble.n	800250e <__aeabi_dsub+0x256>
 800250c:	e1ba      	b.n	8002884 <__aeabi_dsub+0x5cc>
 800250e:	291f      	cmp	r1, #31
 8002510:	dd00      	ble.n	8002514 <__aeabi_dsub+0x25c>
 8002512:	e227      	b.n	8002964 <__aeabi_dsub+0x6ac>
 8002514:	2420      	movs	r4, #32
 8002516:	1a64      	subs	r4, r4, r1
 8002518:	4649      	mov	r1, r9
 800251a:	40a1      	lsls	r1, r4
 800251c:	001e      	movs	r6, r3
 800251e:	4688      	mov	r8, r1
 8002520:	4661      	mov	r1, ip
 8002522:	40a3      	lsls	r3, r4
 8002524:	40ce      	lsrs	r6, r1
 8002526:	4641      	mov	r1, r8
 8002528:	1e5c      	subs	r4, r3, #1
 800252a:	41a3      	sbcs	r3, r4
 800252c:	4331      	orrs	r1, r6
 800252e:	4319      	orrs	r1, r3
 8002530:	000c      	movs	r4, r1
 8002532:	4663      	mov	r3, ip
 8002534:	4649      	mov	r1, r9
 8002536:	40d9      	lsrs	r1, r3
 8002538:	187f      	adds	r7, r7, r1
 800253a:	1824      	adds	r4, r4, r0
 800253c:	4284      	cmp	r4, r0
 800253e:	419b      	sbcs	r3, r3
 8002540:	425b      	negs	r3, r3
 8002542:	469a      	mov	sl, r3
 8002544:	0016      	movs	r6, r2
 8002546:	44ba      	add	sl, r7
 8002548:	e05d      	b.n	8002606 <__aeabi_dsub+0x34e>
 800254a:	4c38      	ldr	r4, [pc, #224]	; (800262c <__aeabi_dsub+0x374>)
 800254c:	1c72      	adds	r2, r6, #1
 800254e:	4222      	tst	r2, r4
 8002550:	d000      	beq.n	8002554 <__aeabi_dsub+0x29c>
 8002552:	e0df      	b.n	8002714 <__aeabi_dsub+0x45c>
 8002554:	464a      	mov	r2, r9
 8002556:	431a      	orrs	r2, r3
 8002558:	2e00      	cmp	r6, #0
 800255a:	d000      	beq.n	800255e <__aeabi_dsub+0x2a6>
 800255c:	e15c      	b.n	8002818 <__aeabi_dsub+0x560>
 800255e:	2a00      	cmp	r2, #0
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x2ac>
 8002562:	e1cf      	b.n	8002904 <__aeabi_dsub+0x64c>
 8002564:	003a      	movs	r2, r7
 8002566:	4302      	orrs	r2, r0
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x2b4>
 800256a:	e17f      	b.n	800286c <__aeabi_dsub+0x5b4>
 800256c:	1a1c      	subs	r4, r3, r0
 800256e:	464a      	mov	r2, r9
 8002570:	42a3      	cmp	r3, r4
 8002572:	4189      	sbcs	r1, r1
 8002574:	1bd2      	subs	r2, r2, r7
 8002576:	4249      	negs	r1, r1
 8002578:	1a52      	subs	r2, r2, r1
 800257a:	4692      	mov	sl, r2
 800257c:	0212      	lsls	r2, r2, #8
 800257e:	d400      	bmi.n	8002582 <__aeabi_dsub+0x2ca>
 8002580:	e20a      	b.n	8002998 <__aeabi_dsub+0x6e0>
 8002582:	1ac4      	subs	r4, r0, r3
 8002584:	42a0      	cmp	r0, r4
 8002586:	4180      	sbcs	r0, r0
 8002588:	464b      	mov	r3, r9
 800258a:	4240      	negs	r0, r0
 800258c:	1aff      	subs	r7, r7, r3
 800258e:	1a3b      	subs	r3, r7, r0
 8002590:	469a      	mov	sl, r3
 8002592:	465d      	mov	r5, fp
 8002594:	e71a      	b.n	80023cc <__aeabi_dsub+0x114>
 8002596:	003a      	movs	r2, r7
 8002598:	4302      	orrs	r2, r0
 800259a:	d073      	beq.n	8002684 <__aeabi_dsub+0x3cc>
 800259c:	0022      	movs	r2, r4
 800259e:	3a01      	subs	r2, #1
 80025a0:	2c01      	cmp	r4, #1
 80025a2:	d100      	bne.n	80025a6 <__aeabi_dsub+0x2ee>
 80025a4:	e0cb      	b.n	800273e <__aeabi_dsub+0x486>
 80025a6:	4554      	cmp	r4, sl
 80025a8:	d042      	beq.n	8002630 <__aeabi_dsub+0x378>
 80025aa:	4694      	mov	ip, r2
 80025ac:	e748      	b.n	8002440 <__aeabi_dsub+0x188>
 80025ae:	0010      	movs	r0, r2
 80025b0:	3b1f      	subs	r3, #31
 80025b2:	40d8      	lsrs	r0, r3
 80025b4:	2920      	cmp	r1, #32
 80025b6:	d003      	beq.n	80025c0 <__aeabi_dsub+0x308>
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	1a5b      	subs	r3, r3, r1
 80025bc:	409a      	lsls	r2, r3
 80025be:	4314      	orrs	r4, r2
 80025c0:	1e63      	subs	r3, r4, #1
 80025c2:	419c      	sbcs	r4, r3
 80025c4:	2300      	movs	r3, #0
 80025c6:	2600      	movs	r6, #0
 80025c8:	469a      	mov	sl, r3
 80025ca:	4304      	orrs	r4, r0
 80025cc:	0763      	lsls	r3, r4, #29
 80025ce:	d000      	beq.n	80025d2 <__aeabi_dsub+0x31a>
 80025d0:	e6fe      	b.n	80023d0 <__aeabi_dsub+0x118>
 80025d2:	4652      	mov	r2, sl
 80025d4:	08e3      	lsrs	r3, r4, #3
 80025d6:	0752      	lsls	r2, r2, #29
 80025d8:	4313      	orrs	r3, r2
 80025da:	4652      	mov	r2, sl
 80025dc:	46b4      	mov	ip, r6
 80025de:	08d2      	lsrs	r2, r2, #3
 80025e0:	490f      	ldr	r1, [pc, #60]	; (8002620 <__aeabi_dsub+0x368>)
 80025e2:	458c      	cmp	ip, r1
 80025e4:	d02a      	beq.n	800263c <__aeabi_dsub+0x384>
 80025e6:	0312      	lsls	r2, r2, #12
 80025e8:	0b14      	lsrs	r4, r2, #12
 80025ea:	4662      	mov	r2, ip
 80025ec:	0552      	lsls	r2, r2, #21
 80025ee:	0d52      	lsrs	r2, r2, #21
 80025f0:	e70c      	b.n	800240c <__aeabi_dsub+0x154>
 80025f2:	003c      	movs	r4, r7
 80025f4:	4304      	orrs	r4, r0
 80025f6:	1e62      	subs	r2, r4, #1
 80025f8:	4194      	sbcs	r4, r2
 80025fa:	18e4      	adds	r4, r4, r3
 80025fc:	429c      	cmp	r4, r3
 80025fe:	4192      	sbcs	r2, r2
 8002600:	4252      	negs	r2, r2
 8002602:	444a      	add	r2, r9
 8002604:	4692      	mov	sl, r2
 8002606:	4653      	mov	r3, sl
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	d5df      	bpl.n	80025cc <__aeabi_dsub+0x314>
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <__aeabi_dsub+0x368>)
 800260e:	3601      	adds	r6, #1
 8002610:	429e      	cmp	r6, r3
 8002612:	d000      	beq.n	8002616 <__aeabi_dsub+0x35e>
 8002614:	e0a0      	b.n	8002758 <__aeabi_dsub+0x4a0>
 8002616:	0032      	movs	r2, r6
 8002618:	2400      	movs	r4, #0
 800261a:	2300      	movs	r3, #0
 800261c:	e6f6      	b.n	800240c <__aeabi_dsub+0x154>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff
 8002624:	ff7fffff 	.word	0xff7fffff
 8002628:	fffff801 	.word	0xfffff801
 800262c:	000007fe 	.word	0x000007fe
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	464a      	mov	r2, r9
 8002634:	0752      	lsls	r2, r2, #29
 8002636:	4313      	orrs	r3, r2
 8002638:	464a      	mov	r2, r9
 800263a:	08d2      	lsrs	r2, r2, #3
 800263c:	0019      	movs	r1, r3
 800263e:	4311      	orrs	r1, r2
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x38c>
 8002642:	e1b5      	b.n	80029b0 <__aeabi_dsub+0x6f8>
 8002644:	2480      	movs	r4, #128	; 0x80
 8002646:	0324      	lsls	r4, r4, #12
 8002648:	4314      	orrs	r4, r2
 800264a:	0324      	lsls	r4, r4, #12
 800264c:	4ad5      	ldr	r2, [pc, #852]	; (80029a4 <__aeabi_dsub+0x6ec>)
 800264e:	0b24      	lsrs	r4, r4, #12
 8002650:	e6dc      	b.n	800240c <__aeabi_dsub+0x154>
 8002652:	0020      	movs	r0, r4
 8002654:	f000 fabc 	bl	8002bd0 <__clzsi2>
 8002658:	0003      	movs	r3, r0
 800265a:	3318      	adds	r3, #24
 800265c:	2b1f      	cmp	r3, #31
 800265e:	dc00      	bgt.n	8002662 <__aeabi_dsub+0x3aa>
 8002660:	e695      	b.n	800238e <__aeabi_dsub+0xd6>
 8002662:	0022      	movs	r2, r4
 8002664:	3808      	subs	r0, #8
 8002666:	4082      	lsls	r2, r0
 8002668:	2400      	movs	r4, #0
 800266a:	429e      	cmp	r6, r3
 800266c:	dc00      	bgt.n	8002670 <__aeabi_dsub+0x3b8>
 800266e:	e69a      	b.n	80023a6 <__aeabi_dsub+0xee>
 8002670:	1af6      	subs	r6, r6, r3
 8002672:	4bcd      	ldr	r3, [pc, #820]	; (80029a8 <__aeabi_dsub+0x6f0>)
 8002674:	401a      	ands	r2, r3
 8002676:	4692      	mov	sl, r2
 8002678:	e6a8      	b.n	80023cc <__aeabi_dsub+0x114>
 800267a:	003c      	movs	r4, r7
 800267c:	4304      	orrs	r4, r0
 800267e:	1e62      	subs	r2, r4, #1
 8002680:	4194      	sbcs	r4, r2
 8002682:	e66c      	b.n	800235e <__aeabi_dsub+0xa6>
 8002684:	464a      	mov	r2, r9
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	0752      	lsls	r2, r2, #29
 800268a:	4313      	orrs	r3, r2
 800268c:	464a      	mov	r2, r9
 800268e:	08d2      	lsrs	r2, r2, #3
 8002690:	e7a6      	b.n	80025e0 <__aeabi_dsub+0x328>
 8002692:	4cc6      	ldr	r4, [pc, #792]	; (80029ac <__aeabi_dsub+0x6f4>)
 8002694:	1c72      	adds	r2, r6, #1
 8002696:	4222      	tst	r2, r4
 8002698:	d000      	beq.n	800269c <__aeabi_dsub+0x3e4>
 800269a:	e0ac      	b.n	80027f6 <__aeabi_dsub+0x53e>
 800269c:	464a      	mov	r2, r9
 800269e:	431a      	orrs	r2, r3
 80026a0:	2e00      	cmp	r6, #0
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x3ee>
 80026a4:	e105      	b.n	80028b2 <__aeabi_dsub+0x5fa>
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x3f4>
 80026aa:	e156      	b.n	800295a <__aeabi_dsub+0x6a2>
 80026ac:	003a      	movs	r2, r7
 80026ae:	4302      	orrs	r2, r0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x3fc>
 80026b2:	e0db      	b.n	800286c <__aeabi_dsub+0x5b4>
 80026b4:	181c      	adds	r4, r3, r0
 80026b6:	429c      	cmp	r4, r3
 80026b8:	419b      	sbcs	r3, r3
 80026ba:	444f      	add	r7, r9
 80026bc:	46ba      	mov	sl, r7
 80026be:	425b      	negs	r3, r3
 80026c0:	449a      	add	sl, r3
 80026c2:	4653      	mov	r3, sl
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	d400      	bmi.n	80026ca <__aeabi_dsub+0x412>
 80026c8:	e780      	b.n	80025cc <__aeabi_dsub+0x314>
 80026ca:	4652      	mov	r2, sl
 80026cc:	4bb6      	ldr	r3, [pc, #728]	; (80029a8 <__aeabi_dsub+0x6f0>)
 80026ce:	2601      	movs	r6, #1
 80026d0:	401a      	ands	r2, r3
 80026d2:	4692      	mov	sl, r2
 80026d4:	e77a      	b.n	80025cc <__aeabi_dsub+0x314>
 80026d6:	4cb3      	ldr	r4, [pc, #716]	; (80029a4 <__aeabi_dsub+0x6ec>)
 80026d8:	42a2      	cmp	r2, r4
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x426>
 80026dc:	e0c0      	b.n	8002860 <__aeabi_dsub+0x5a8>
 80026de:	2480      	movs	r4, #128	; 0x80
 80026e0:	464d      	mov	r5, r9
 80026e2:	0424      	lsls	r4, r4, #16
 80026e4:	4325      	orrs	r5, r4
 80026e6:	46a9      	mov	r9, r5
 80026e8:	4664      	mov	r4, ip
 80026ea:	2c38      	cmp	r4, #56	; 0x38
 80026ec:	dc53      	bgt.n	8002796 <__aeabi_dsub+0x4de>
 80026ee:	4661      	mov	r1, ip
 80026f0:	2c1f      	cmp	r4, #31
 80026f2:	dd00      	ble.n	80026f6 <__aeabi_dsub+0x43e>
 80026f4:	e0cd      	b.n	8002892 <__aeabi_dsub+0x5da>
 80026f6:	2520      	movs	r5, #32
 80026f8:	001e      	movs	r6, r3
 80026fa:	1b2d      	subs	r5, r5, r4
 80026fc:	464c      	mov	r4, r9
 80026fe:	40ab      	lsls	r3, r5
 8002700:	40ac      	lsls	r4, r5
 8002702:	40ce      	lsrs	r6, r1
 8002704:	1e5d      	subs	r5, r3, #1
 8002706:	41ab      	sbcs	r3, r5
 8002708:	4334      	orrs	r4, r6
 800270a:	4323      	orrs	r3, r4
 800270c:	464c      	mov	r4, r9
 800270e:	40cc      	lsrs	r4, r1
 8002710:	1b3f      	subs	r7, r7, r4
 8002712:	e045      	b.n	80027a0 <__aeabi_dsub+0x4e8>
 8002714:	464a      	mov	r2, r9
 8002716:	1a1c      	subs	r4, r3, r0
 8002718:	1bd1      	subs	r1, r2, r7
 800271a:	42a3      	cmp	r3, r4
 800271c:	4192      	sbcs	r2, r2
 800271e:	4252      	negs	r2, r2
 8002720:	4692      	mov	sl, r2
 8002722:	000a      	movs	r2, r1
 8002724:	4651      	mov	r1, sl
 8002726:	1a52      	subs	r2, r2, r1
 8002728:	4692      	mov	sl, r2
 800272a:	0212      	lsls	r2, r2, #8
 800272c:	d500      	bpl.n	8002730 <__aeabi_dsub+0x478>
 800272e:	e083      	b.n	8002838 <__aeabi_dsub+0x580>
 8002730:	4653      	mov	r3, sl
 8002732:	4323      	orrs	r3, r4
 8002734:	d000      	beq.n	8002738 <__aeabi_dsub+0x480>
 8002736:	e621      	b.n	800237c <__aeabi_dsub+0xc4>
 8002738:	2200      	movs	r2, #0
 800273a:	2500      	movs	r5, #0
 800273c:	e753      	b.n	80025e6 <__aeabi_dsub+0x32e>
 800273e:	181c      	adds	r4, r3, r0
 8002740:	429c      	cmp	r4, r3
 8002742:	419b      	sbcs	r3, r3
 8002744:	444f      	add	r7, r9
 8002746:	46ba      	mov	sl, r7
 8002748:	425b      	negs	r3, r3
 800274a:	449a      	add	sl, r3
 800274c:	4653      	mov	r3, sl
 800274e:	2601      	movs	r6, #1
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	d400      	bmi.n	8002756 <__aeabi_dsub+0x49e>
 8002754:	e73a      	b.n	80025cc <__aeabi_dsub+0x314>
 8002756:	2602      	movs	r6, #2
 8002758:	4652      	mov	r2, sl
 800275a:	4b93      	ldr	r3, [pc, #588]	; (80029a8 <__aeabi_dsub+0x6f0>)
 800275c:	2101      	movs	r1, #1
 800275e:	401a      	ands	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	4021      	ands	r1, r4
 8002764:	0862      	lsrs	r2, r4, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	07dc      	lsls	r4, r3, #31
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	469a      	mov	sl, r3
 800276e:	4314      	orrs	r4, r2
 8002770:	e62c      	b.n	80023cc <__aeabi_dsub+0x114>
 8002772:	0039      	movs	r1, r7
 8002774:	3a20      	subs	r2, #32
 8002776:	40d1      	lsrs	r1, r2
 8002778:	4662      	mov	r2, ip
 800277a:	2a20      	cmp	r2, #32
 800277c:	d006      	beq.n	800278c <__aeabi_dsub+0x4d4>
 800277e:	4664      	mov	r4, ip
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	1b12      	subs	r2, r2, r4
 8002784:	003c      	movs	r4, r7
 8002786:	4094      	lsls	r4, r2
 8002788:	4304      	orrs	r4, r0
 800278a:	9401      	str	r4, [sp, #4]
 800278c:	9c01      	ldr	r4, [sp, #4]
 800278e:	1e62      	subs	r2, r4, #1
 8002790:	4194      	sbcs	r4, r2
 8002792:	430c      	orrs	r4, r1
 8002794:	e5e3      	b.n	800235e <__aeabi_dsub+0xa6>
 8002796:	4649      	mov	r1, r9
 8002798:	4319      	orrs	r1, r3
 800279a:	000b      	movs	r3, r1
 800279c:	1e5c      	subs	r4, r3, #1
 800279e:	41a3      	sbcs	r3, r4
 80027a0:	1ac4      	subs	r4, r0, r3
 80027a2:	42a0      	cmp	r0, r4
 80027a4:	419b      	sbcs	r3, r3
 80027a6:	425b      	negs	r3, r3
 80027a8:	1afb      	subs	r3, r7, r3
 80027aa:	469a      	mov	sl, r3
 80027ac:	465d      	mov	r5, fp
 80027ae:	0016      	movs	r6, r2
 80027b0:	e5dc      	b.n	800236c <__aeabi_dsub+0xb4>
 80027b2:	4649      	mov	r1, r9
 80027b4:	4319      	orrs	r1, r3
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x502>
 80027b8:	e0ae      	b.n	8002918 <__aeabi_dsub+0x660>
 80027ba:	4661      	mov	r1, ip
 80027bc:	4664      	mov	r4, ip
 80027be:	3901      	subs	r1, #1
 80027c0:	2c01      	cmp	r4, #1
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dsub+0x50e>
 80027c4:	e0e0      	b.n	8002988 <__aeabi_dsub+0x6d0>
 80027c6:	4c77      	ldr	r4, [pc, #476]	; (80029a4 <__aeabi_dsub+0x6ec>)
 80027c8:	45a4      	cmp	ip, r4
 80027ca:	d056      	beq.n	800287a <__aeabi_dsub+0x5c2>
 80027cc:	468c      	mov	ip, r1
 80027ce:	e69a      	b.n	8002506 <__aeabi_dsub+0x24e>
 80027d0:	4661      	mov	r1, ip
 80027d2:	2220      	movs	r2, #32
 80027d4:	003c      	movs	r4, r7
 80027d6:	1a52      	subs	r2, r2, r1
 80027d8:	4094      	lsls	r4, r2
 80027da:	0001      	movs	r1, r0
 80027dc:	4090      	lsls	r0, r2
 80027de:	46a0      	mov	r8, r4
 80027e0:	4664      	mov	r4, ip
 80027e2:	1e42      	subs	r2, r0, #1
 80027e4:	4190      	sbcs	r0, r2
 80027e6:	4662      	mov	r2, ip
 80027e8:	40e1      	lsrs	r1, r4
 80027ea:	4644      	mov	r4, r8
 80027ec:	40d7      	lsrs	r7, r2
 80027ee:	430c      	orrs	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	44b9      	add	r9, r7
 80027f4:	e701      	b.n	80025fa <__aeabi_dsub+0x342>
 80027f6:	496b      	ldr	r1, [pc, #428]	; (80029a4 <__aeabi_dsub+0x6ec>)
 80027f8:	428a      	cmp	r2, r1
 80027fa:	d100      	bne.n	80027fe <__aeabi_dsub+0x546>
 80027fc:	e70c      	b.n	8002618 <__aeabi_dsub+0x360>
 80027fe:	1818      	adds	r0, r3, r0
 8002800:	4298      	cmp	r0, r3
 8002802:	419b      	sbcs	r3, r3
 8002804:	444f      	add	r7, r9
 8002806:	425b      	negs	r3, r3
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	07dc      	lsls	r4, r3, #31
 800280c:	0840      	lsrs	r0, r0, #1
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	469a      	mov	sl, r3
 8002812:	0016      	movs	r6, r2
 8002814:	4304      	orrs	r4, r0
 8002816:	e6d9      	b.n	80025cc <__aeabi_dsub+0x314>
 8002818:	2a00      	cmp	r2, #0
 800281a:	d000      	beq.n	800281e <__aeabi_dsub+0x566>
 800281c:	e081      	b.n	8002922 <__aeabi_dsub+0x66a>
 800281e:	003b      	movs	r3, r7
 8002820:	4303      	orrs	r3, r0
 8002822:	d11d      	bne.n	8002860 <__aeabi_dsub+0x5a8>
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	2500      	movs	r5, #0
 8002828:	0312      	lsls	r2, r2, #12
 800282a:	e70b      	b.n	8002644 <__aeabi_dsub+0x38c>
 800282c:	08c0      	lsrs	r0, r0, #3
 800282e:	077b      	lsls	r3, r7, #29
 8002830:	465d      	mov	r5, fp
 8002832:	4303      	orrs	r3, r0
 8002834:	08fa      	lsrs	r2, r7, #3
 8002836:	e6d3      	b.n	80025e0 <__aeabi_dsub+0x328>
 8002838:	1ac4      	subs	r4, r0, r3
 800283a:	42a0      	cmp	r0, r4
 800283c:	4180      	sbcs	r0, r0
 800283e:	464b      	mov	r3, r9
 8002840:	4240      	negs	r0, r0
 8002842:	1aff      	subs	r7, r7, r3
 8002844:	1a3b      	subs	r3, r7, r0
 8002846:	469a      	mov	sl, r3
 8002848:	465d      	mov	r5, fp
 800284a:	e597      	b.n	800237c <__aeabi_dsub+0xc4>
 800284c:	1a1c      	subs	r4, r3, r0
 800284e:	464a      	mov	r2, r9
 8002850:	42a3      	cmp	r3, r4
 8002852:	419b      	sbcs	r3, r3
 8002854:	1bd7      	subs	r7, r2, r7
 8002856:	425b      	negs	r3, r3
 8002858:	1afb      	subs	r3, r7, r3
 800285a:	469a      	mov	sl, r3
 800285c:	2601      	movs	r6, #1
 800285e:	e585      	b.n	800236c <__aeabi_dsub+0xb4>
 8002860:	08c0      	lsrs	r0, r0, #3
 8002862:	077b      	lsls	r3, r7, #29
 8002864:	465d      	mov	r5, fp
 8002866:	4303      	orrs	r3, r0
 8002868:	08fa      	lsrs	r2, r7, #3
 800286a:	e6e7      	b.n	800263c <__aeabi_dsub+0x384>
 800286c:	464a      	mov	r2, r9
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	0752      	lsls	r2, r2, #29
 8002872:	4313      	orrs	r3, r2
 8002874:	464a      	mov	r2, r9
 8002876:	08d2      	lsrs	r2, r2, #3
 8002878:	e6b5      	b.n	80025e6 <__aeabi_dsub+0x32e>
 800287a:	08c0      	lsrs	r0, r0, #3
 800287c:	077b      	lsls	r3, r7, #29
 800287e:	4303      	orrs	r3, r0
 8002880:	08fa      	lsrs	r2, r7, #3
 8002882:	e6db      	b.n	800263c <__aeabi_dsub+0x384>
 8002884:	4649      	mov	r1, r9
 8002886:	4319      	orrs	r1, r3
 8002888:	000b      	movs	r3, r1
 800288a:	1e59      	subs	r1, r3, #1
 800288c:	418b      	sbcs	r3, r1
 800288e:	001c      	movs	r4, r3
 8002890:	e653      	b.n	800253a <__aeabi_dsub+0x282>
 8002892:	464d      	mov	r5, r9
 8002894:	3c20      	subs	r4, #32
 8002896:	40e5      	lsrs	r5, r4
 8002898:	2920      	cmp	r1, #32
 800289a:	d005      	beq.n	80028a8 <__aeabi_dsub+0x5f0>
 800289c:	2440      	movs	r4, #64	; 0x40
 800289e:	1a64      	subs	r4, r4, r1
 80028a0:	4649      	mov	r1, r9
 80028a2:	40a1      	lsls	r1, r4
 80028a4:	430b      	orrs	r3, r1
 80028a6:	4698      	mov	r8, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	1e5c      	subs	r4, r3, #1
 80028ac:	41a3      	sbcs	r3, r4
 80028ae:	432b      	orrs	r3, r5
 80028b0:	e776      	b.n	80027a0 <__aeabi_dsub+0x4e8>
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d0e1      	beq.n	800287a <__aeabi_dsub+0x5c2>
 80028b6:	003a      	movs	r2, r7
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	4302      	orrs	r2, r0
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x608>
 80028be:	e6b8      	b.n	8002632 <__aeabi_dsub+0x37a>
 80028c0:	464a      	mov	r2, r9
 80028c2:	0752      	lsls	r2, r2, #29
 80028c4:	2480      	movs	r4, #128	; 0x80
 80028c6:	4313      	orrs	r3, r2
 80028c8:	464a      	mov	r2, r9
 80028ca:	0324      	lsls	r4, r4, #12
 80028cc:	08d2      	lsrs	r2, r2, #3
 80028ce:	4222      	tst	r2, r4
 80028d0:	d007      	beq.n	80028e2 <__aeabi_dsub+0x62a>
 80028d2:	08fe      	lsrs	r6, r7, #3
 80028d4:	4226      	tst	r6, r4
 80028d6:	d104      	bne.n	80028e2 <__aeabi_dsub+0x62a>
 80028d8:	465d      	mov	r5, fp
 80028da:	0032      	movs	r2, r6
 80028dc:	08c3      	lsrs	r3, r0, #3
 80028de:	077f      	lsls	r7, r7, #29
 80028e0:	433b      	orrs	r3, r7
 80028e2:	0f59      	lsrs	r1, r3, #29
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	0749      	lsls	r1, r1, #29
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	430b      	orrs	r3, r1
 80028ec:	e6a6      	b.n	800263c <__aeabi_dsub+0x384>
 80028ee:	1ac4      	subs	r4, r0, r3
 80028f0:	42a0      	cmp	r0, r4
 80028f2:	4180      	sbcs	r0, r0
 80028f4:	464b      	mov	r3, r9
 80028f6:	4240      	negs	r0, r0
 80028f8:	1aff      	subs	r7, r7, r3
 80028fa:	1a3b      	subs	r3, r7, r0
 80028fc:	469a      	mov	sl, r3
 80028fe:	465d      	mov	r5, fp
 8002900:	2601      	movs	r6, #1
 8002902:	e533      	b.n	800236c <__aeabi_dsub+0xb4>
 8002904:	003b      	movs	r3, r7
 8002906:	4303      	orrs	r3, r0
 8002908:	d100      	bne.n	800290c <__aeabi_dsub+0x654>
 800290a:	e715      	b.n	8002738 <__aeabi_dsub+0x480>
 800290c:	08c0      	lsrs	r0, r0, #3
 800290e:	077b      	lsls	r3, r7, #29
 8002910:	465d      	mov	r5, fp
 8002912:	4303      	orrs	r3, r0
 8002914:	08fa      	lsrs	r2, r7, #3
 8002916:	e666      	b.n	80025e6 <__aeabi_dsub+0x32e>
 8002918:	08c0      	lsrs	r0, r0, #3
 800291a:	077b      	lsls	r3, r7, #29
 800291c:	4303      	orrs	r3, r0
 800291e:	08fa      	lsrs	r2, r7, #3
 8002920:	e65e      	b.n	80025e0 <__aeabi_dsub+0x328>
 8002922:	003a      	movs	r2, r7
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	4302      	orrs	r2, r0
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x674>
 800292a:	e682      	b.n	8002632 <__aeabi_dsub+0x37a>
 800292c:	464a      	mov	r2, r9
 800292e:	0752      	lsls	r2, r2, #29
 8002930:	2480      	movs	r4, #128	; 0x80
 8002932:	4313      	orrs	r3, r2
 8002934:	464a      	mov	r2, r9
 8002936:	0324      	lsls	r4, r4, #12
 8002938:	08d2      	lsrs	r2, r2, #3
 800293a:	4222      	tst	r2, r4
 800293c:	d007      	beq.n	800294e <__aeabi_dsub+0x696>
 800293e:	08fe      	lsrs	r6, r7, #3
 8002940:	4226      	tst	r6, r4
 8002942:	d104      	bne.n	800294e <__aeabi_dsub+0x696>
 8002944:	465d      	mov	r5, fp
 8002946:	0032      	movs	r2, r6
 8002948:	08c3      	lsrs	r3, r0, #3
 800294a:	077f      	lsls	r7, r7, #29
 800294c:	433b      	orrs	r3, r7
 800294e:	0f59      	lsrs	r1, r3, #29
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	0749      	lsls	r1, r1, #29
 8002956:	430b      	orrs	r3, r1
 8002958:	e670      	b.n	800263c <__aeabi_dsub+0x384>
 800295a:	08c0      	lsrs	r0, r0, #3
 800295c:	077b      	lsls	r3, r7, #29
 800295e:	4303      	orrs	r3, r0
 8002960:	08fa      	lsrs	r2, r7, #3
 8002962:	e640      	b.n	80025e6 <__aeabi_dsub+0x32e>
 8002964:	464c      	mov	r4, r9
 8002966:	3920      	subs	r1, #32
 8002968:	40cc      	lsrs	r4, r1
 800296a:	4661      	mov	r1, ip
 800296c:	2920      	cmp	r1, #32
 800296e:	d006      	beq.n	800297e <__aeabi_dsub+0x6c6>
 8002970:	4666      	mov	r6, ip
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	1b89      	subs	r1, r1, r6
 8002976:	464e      	mov	r6, r9
 8002978:	408e      	lsls	r6, r1
 800297a:	4333      	orrs	r3, r6
 800297c:	4698      	mov	r8, r3
 800297e:	4643      	mov	r3, r8
 8002980:	1e59      	subs	r1, r3, #1
 8002982:	418b      	sbcs	r3, r1
 8002984:	431c      	orrs	r4, r3
 8002986:	e5d8      	b.n	800253a <__aeabi_dsub+0x282>
 8002988:	181c      	adds	r4, r3, r0
 800298a:	4284      	cmp	r4, r0
 800298c:	4180      	sbcs	r0, r0
 800298e:	444f      	add	r7, r9
 8002990:	46ba      	mov	sl, r7
 8002992:	4240      	negs	r0, r0
 8002994:	4482      	add	sl, r0
 8002996:	e6d9      	b.n	800274c <__aeabi_dsub+0x494>
 8002998:	4653      	mov	r3, sl
 800299a:	4323      	orrs	r3, r4
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x6e8>
 800299e:	e6cb      	b.n	8002738 <__aeabi_dsub+0x480>
 80029a0:	e614      	b.n	80025cc <__aeabi_dsub+0x314>
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	000007ff 	.word	0x000007ff
 80029a8:	ff7fffff 	.word	0xff7fffff
 80029ac:	000007fe 	.word	0x000007fe
 80029b0:	2300      	movs	r3, #0
 80029b2:	4a01      	ldr	r2, [pc, #4]	; (80029b8 <__aeabi_dsub+0x700>)
 80029b4:	001c      	movs	r4, r3
 80029b6:	e529      	b.n	800240c <__aeabi_dsub+0x154>
 80029b8:	000007ff 	.word	0x000007ff

080029bc <__aeabi_dcmpun>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	0005      	movs	r5, r0
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <__aeabi_dcmpun+0x38>)
 80029c2:	031c      	lsls	r4, r3, #12
 80029c4:	0016      	movs	r6, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	030a      	lsls	r2, r1, #12
 80029ca:	0049      	lsls	r1, r1, #1
 80029cc:	0b12      	lsrs	r2, r2, #12
 80029ce:	0d49      	lsrs	r1, r1, #21
 80029d0:	0b24      	lsrs	r4, r4, #12
 80029d2:	0d5b      	lsrs	r3, r3, #21
 80029d4:	4281      	cmp	r1, r0
 80029d6:	d008      	beq.n	80029ea <__aeabi_dcmpun+0x2e>
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <__aeabi_dcmpun+0x38>)
 80029da:	2000      	movs	r0, #0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <__aeabi_dcmpun+0x2c>
 80029e0:	0020      	movs	r0, r4
 80029e2:	4330      	orrs	r0, r6
 80029e4:	1e43      	subs	r3, r0, #1
 80029e6:	4198      	sbcs	r0, r3
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
 80029ea:	2001      	movs	r0, #1
 80029ec:	432a      	orrs	r2, r5
 80029ee:	d1fb      	bne.n	80029e8 <__aeabi_dcmpun+0x2c>
 80029f0:	e7f2      	b.n	80029d8 <__aeabi_dcmpun+0x1c>
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	000007ff 	.word	0x000007ff

080029f8 <__aeabi_d2iz>:
 80029f8:	000a      	movs	r2, r1
 80029fa:	b530      	push	{r4, r5, lr}
 80029fc:	4c13      	ldr	r4, [pc, #76]	; (8002a4c <__aeabi_d2iz+0x54>)
 80029fe:	0053      	lsls	r3, r2, #1
 8002a00:	0309      	lsls	r1, r1, #12
 8002a02:	0005      	movs	r5, r0
 8002a04:	0b09      	lsrs	r1, r1, #12
 8002a06:	2000      	movs	r0, #0
 8002a08:	0d5b      	lsrs	r3, r3, #21
 8002a0a:	0fd2      	lsrs	r2, r2, #31
 8002a0c:	42a3      	cmp	r3, r4
 8002a0e:	dd04      	ble.n	8002a1a <__aeabi_d2iz+0x22>
 8002a10:	480f      	ldr	r0, [pc, #60]	; (8002a50 <__aeabi_d2iz+0x58>)
 8002a12:	4283      	cmp	r3, r0
 8002a14:	dd02      	ble.n	8002a1c <__aeabi_d2iz+0x24>
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <__aeabi_d2iz+0x5c>)
 8002a18:	18d0      	adds	r0, r2, r3
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	2080      	movs	r0, #128	; 0x80
 8002a1e:	0340      	lsls	r0, r0, #13
 8002a20:	4301      	orrs	r1, r0
 8002a22:	480d      	ldr	r0, [pc, #52]	; (8002a58 <__aeabi_d2iz+0x60>)
 8002a24:	1ac0      	subs	r0, r0, r3
 8002a26:	281f      	cmp	r0, #31
 8002a28:	dd08      	ble.n	8002a3c <__aeabi_d2iz+0x44>
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <__aeabi_d2iz+0x64>)
 8002a2c:	1ac3      	subs	r3, r0, r3
 8002a2e:	40d9      	lsrs	r1, r3
 8002a30:	000b      	movs	r3, r1
 8002a32:	4258      	negs	r0, r3
 8002a34:	2a00      	cmp	r2, #0
 8002a36:	d1f0      	bne.n	8002a1a <__aeabi_d2iz+0x22>
 8002a38:	0018      	movs	r0, r3
 8002a3a:	e7ee      	b.n	8002a1a <__aeabi_d2iz+0x22>
 8002a3c:	4c08      	ldr	r4, [pc, #32]	; (8002a60 <__aeabi_d2iz+0x68>)
 8002a3e:	40c5      	lsrs	r5, r0
 8002a40:	46a4      	mov	ip, r4
 8002a42:	4463      	add	r3, ip
 8002a44:	4099      	lsls	r1, r3
 8002a46:	000b      	movs	r3, r1
 8002a48:	432b      	orrs	r3, r5
 8002a4a:	e7f2      	b.n	8002a32 <__aeabi_d2iz+0x3a>
 8002a4c:	000003fe 	.word	0x000003fe
 8002a50:	0000041d 	.word	0x0000041d
 8002a54:	7fffffff 	.word	0x7fffffff
 8002a58:	00000433 	.word	0x00000433
 8002a5c:	00000413 	.word	0x00000413
 8002a60:	fffffbed 	.word	0xfffffbed

08002a64 <__aeabi_i2d>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d016      	beq.n	8002a98 <__aeabi_i2d+0x34>
 8002a6a:	17c3      	asrs	r3, r0, #31
 8002a6c:	18c5      	adds	r5, r0, r3
 8002a6e:	405d      	eors	r5, r3
 8002a70:	0fc4      	lsrs	r4, r0, #31
 8002a72:	0028      	movs	r0, r5
 8002a74:	f000 f8ac 	bl	8002bd0 <__clzsi2>
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <__aeabi_i2d+0x5c>)
 8002a7a:	1a1b      	subs	r3, r3, r0
 8002a7c:	280a      	cmp	r0, #10
 8002a7e:	dc16      	bgt.n	8002aae <__aeabi_i2d+0x4a>
 8002a80:	0002      	movs	r2, r0
 8002a82:	002e      	movs	r6, r5
 8002a84:	3215      	adds	r2, #21
 8002a86:	4096      	lsls	r6, r2
 8002a88:	220b      	movs	r2, #11
 8002a8a:	1a12      	subs	r2, r2, r0
 8002a8c:	40d5      	lsrs	r5, r2
 8002a8e:	055b      	lsls	r3, r3, #21
 8002a90:	032d      	lsls	r5, r5, #12
 8002a92:	0b2d      	lsrs	r5, r5, #12
 8002a94:	0d5b      	lsrs	r3, r3, #21
 8002a96:	e003      	b.n	8002aa0 <__aeabi_i2d+0x3c>
 8002a98:	2400      	movs	r4, #0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	051b      	lsls	r3, r3, #20
 8002aa2:	432b      	orrs	r3, r5
 8002aa4:	07e4      	lsls	r4, r4, #31
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	0030      	movs	r0, r6
 8002aaa:	0019      	movs	r1, r3
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	380b      	subs	r0, #11
 8002ab0:	4085      	lsls	r5, r0
 8002ab2:	055b      	lsls	r3, r3, #21
 8002ab4:	032d      	lsls	r5, r5, #12
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	0b2d      	lsrs	r5, r5, #12
 8002aba:	0d5b      	lsrs	r3, r3, #21
 8002abc:	e7f0      	b.n	8002aa0 <__aeabi_i2d+0x3c>
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	0000041e 	.word	0x0000041e

08002ac4 <__aeabi_d2f>:
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac8:	004b      	lsls	r3, r1, #1
 8002aca:	030d      	lsls	r5, r1, #12
 8002acc:	0f40      	lsrs	r0, r0, #29
 8002ace:	0d5b      	lsrs	r3, r3, #21
 8002ad0:	0fcc      	lsrs	r4, r1, #31
 8002ad2:	0a6d      	lsrs	r5, r5, #9
 8002ad4:	493a      	ldr	r1, [pc, #232]	; (8002bc0 <__aeabi_d2f+0xfc>)
 8002ad6:	4305      	orrs	r5, r0
 8002ad8:	1c58      	adds	r0, r3, #1
 8002ada:	00d7      	lsls	r7, r2, #3
 8002adc:	4208      	tst	r0, r1
 8002ade:	d00a      	beq.n	8002af6 <__aeabi_d2f+0x32>
 8002ae0:	4938      	ldr	r1, [pc, #224]	; (8002bc4 <__aeabi_d2f+0x100>)
 8002ae2:	1859      	adds	r1, r3, r1
 8002ae4:	29fe      	cmp	r1, #254	; 0xfe
 8002ae6:	dd16      	ble.n	8002b16 <__aeabi_d2f+0x52>
 8002ae8:	20ff      	movs	r0, #255	; 0xff
 8002aea:	2200      	movs	r2, #0
 8002aec:	05c0      	lsls	r0, r0, #23
 8002aee:	4310      	orrs	r0, r2
 8002af0:	07e4      	lsls	r4, r4, #31
 8002af2:	4320      	orrs	r0, r4
 8002af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <__aeabi_d2f+0x44>
 8002afa:	433d      	orrs	r5, r7
 8002afc:	d026      	beq.n	8002b4c <__aeabi_d2f+0x88>
 8002afe:	2205      	movs	r2, #5
 8002b00:	0192      	lsls	r2, r2, #6
 8002b02:	0a52      	lsrs	r2, r2, #9
 8002b04:	b2d8      	uxtb	r0, r3
 8002b06:	e7f1      	b.n	8002aec <__aeabi_d2f+0x28>
 8002b08:	432f      	orrs	r7, r5
 8002b0a:	d0ed      	beq.n	8002ae8 <__aeabi_d2f+0x24>
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	03d2      	lsls	r2, r2, #15
 8002b10:	20ff      	movs	r0, #255	; 0xff
 8002b12:	432a      	orrs	r2, r5
 8002b14:	e7ea      	b.n	8002aec <__aeabi_d2f+0x28>
 8002b16:	2900      	cmp	r1, #0
 8002b18:	dd1b      	ble.n	8002b52 <__aeabi_d2f+0x8e>
 8002b1a:	0192      	lsls	r2, r2, #6
 8002b1c:	1e50      	subs	r0, r2, #1
 8002b1e:	4182      	sbcs	r2, r0
 8002b20:	00ed      	lsls	r5, r5, #3
 8002b22:	0f7f      	lsrs	r7, r7, #29
 8002b24:	432a      	orrs	r2, r5
 8002b26:	433a      	orrs	r2, r7
 8002b28:	0753      	lsls	r3, r2, #29
 8002b2a:	d047      	beq.n	8002bbc <__aeabi_d2f+0xf8>
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d000      	beq.n	8002b36 <__aeabi_d2f+0x72>
 8002b34:	3204      	adds	r2, #4
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	04db      	lsls	r3, r3, #19
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d03e      	beq.n	8002bbc <__aeabi_d2f+0xf8>
 8002b3e:	1c48      	adds	r0, r1, #1
 8002b40:	29fe      	cmp	r1, #254	; 0xfe
 8002b42:	d0d1      	beq.n	8002ae8 <__aeabi_d2f+0x24>
 8002b44:	0192      	lsls	r2, r2, #6
 8002b46:	0a52      	lsrs	r2, r2, #9
 8002b48:	b2c0      	uxtb	r0, r0
 8002b4a:	e7cf      	b.n	8002aec <__aeabi_d2f+0x28>
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	2200      	movs	r2, #0
 8002b50:	e7cc      	b.n	8002aec <__aeabi_d2f+0x28>
 8002b52:	000a      	movs	r2, r1
 8002b54:	3217      	adds	r2, #23
 8002b56:	db2f      	blt.n	8002bb8 <__aeabi_d2f+0xf4>
 8002b58:	2680      	movs	r6, #128	; 0x80
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	432e      	orrs	r6, r5
 8002b5e:	251e      	movs	r5, #30
 8002b60:	1a6d      	subs	r5, r5, r1
 8002b62:	2d1f      	cmp	r5, #31
 8002b64:	dd11      	ble.n	8002b8a <__aeabi_d2f+0xc6>
 8002b66:	2202      	movs	r2, #2
 8002b68:	4252      	negs	r2, r2
 8002b6a:	1a52      	subs	r2, r2, r1
 8002b6c:	0031      	movs	r1, r6
 8002b6e:	40d1      	lsrs	r1, r2
 8002b70:	2d20      	cmp	r5, #32
 8002b72:	d004      	beq.n	8002b7e <__aeabi_d2f+0xba>
 8002b74:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <__aeabi_d2f+0x104>)
 8002b76:	4694      	mov	ip, r2
 8002b78:	4463      	add	r3, ip
 8002b7a:	409e      	lsls	r6, r3
 8002b7c:	4337      	orrs	r7, r6
 8002b7e:	003a      	movs	r2, r7
 8002b80:	1e53      	subs	r3, r2, #1
 8002b82:	419a      	sbcs	r2, r3
 8002b84:	430a      	orrs	r2, r1
 8002b86:	2100      	movs	r1, #0
 8002b88:	e7ce      	b.n	8002b28 <__aeabi_d2f+0x64>
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <__aeabi_d2f+0x108>)
 8002b8c:	0038      	movs	r0, r7
 8002b8e:	4694      	mov	ip, r2
 8002b90:	4463      	add	r3, ip
 8002b92:	4098      	lsls	r0, r3
 8002b94:	003a      	movs	r2, r7
 8002b96:	1e41      	subs	r1, r0, #1
 8002b98:	4188      	sbcs	r0, r1
 8002b9a:	409e      	lsls	r6, r3
 8002b9c:	40ea      	lsrs	r2, r5
 8002b9e:	4330      	orrs	r0, r6
 8002ba0:	4302      	orrs	r2, r0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	0753      	lsls	r3, r2, #29
 8002ba6:	d1c1      	bne.n	8002b2c <__aeabi_d2f+0x68>
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	0013      	movs	r3, r2
 8002bac:	04c9      	lsls	r1, r1, #19
 8002bae:	2001      	movs	r0, #1
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	420a      	tst	r2, r1
 8002bb4:	d1c6      	bne.n	8002b44 <__aeabi_d2f+0x80>
 8002bb6:	e7a3      	b.n	8002b00 <__aeabi_d2f+0x3c>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e7a0      	b.n	8002afe <__aeabi_d2f+0x3a>
 8002bbc:	000b      	movs	r3, r1
 8002bbe:	e79f      	b.n	8002b00 <__aeabi_d2f+0x3c>
 8002bc0:	000007fe 	.word	0x000007fe
 8002bc4:	fffffc80 	.word	0xfffffc80
 8002bc8:	fffffca2 	.word	0xfffffca2
 8002bcc:	fffffc82 	.word	0xfffffc82

08002bd0 <__clzsi2>:
 8002bd0:	211c      	movs	r1, #28
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	4298      	cmp	r0, r3
 8002bd8:	d301      	bcc.n	8002bde <__clzsi2+0xe>
 8002bda:	0c00      	lsrs	r0, r0, #16
 8002bdc:	3910      	subs	r1, #16
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	4298      	cmp	r0, r3
 8002be2:	d301      	bcc.n	8002be8 <__clzsi2+0x18>
 8002be4:	0a00      	lsrs	r0, r0, #8
 8002be6:	3908      	subs	r1, #8
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	4298      	cmp	r0, r3
 8002bec:	d301      	bcc.n	8002bf2 <__clzsi2+0x22>
 8002bee:	0900      	lsrs	r0, r0, #4
 8002bf0:	3904      	subs	r1, #4
 8002bf2:	a202      	add	r2, pc, #8	; (adr r2, 8002bfc <__clzsi2+0x2c>)
 8002bf4:	5c10      	ldrb	r0, [r2, r0]
 8002bf6:	1840      	adds	r0, r0, r1
 8002bf8:	4770      	bx	lr
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	02020304 	.word	0x02020304
 8002c00:	01010101 	.word	0x01010101
	...

08002c0c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <SystemInit+0x74>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <SystemInit+0x74>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <SystemInit+0x74>)
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <SystemInit+0x74>)
 8002c22:	4918      	ldr	r1, [pc, #96]	; (8002c84 <SystemInit+0x78>)
 8002c24:	400a      	ands	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <SystemInit+0x74>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <SystemInit+0x74>)
 8002c2e:	4916      	ldr	r1, [pc, #88]	; (8002c88 <SystemInit+0x7c>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <SystemInit+0x74>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <SystemInit+0x74>)
 8002c3a:	4914      	ldr	r1, [pc, #80]	; (8002c8c <SystemInit+0x80>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <SystemInit+0x74>)
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <SystemInit+0x74>)
 8002c46:	4912      	ldr	r1, [pc, #72]	; (8002c90 <SystemInit+0x84>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <SystemInit+0x74>)
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <SystemInit+0x74>)
 8002c52:	210f      	movs	r1, #15
 8002c54:	438a      	bics	r2, r1
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <SystemInit+0x74>)
 8002c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <SystemInit+0x74>)
 8002c5e:	490d      	ldr	r1, [pc, #52]	; (8002c94 <SystemInit+0x88>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <SystemInit+0x74>)
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <SystemInit+0x74>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <SystemInit+0x74>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8002c76:	f000 f885 	bl	8002d84 <SetSysClock>
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08ffb80c 	.word	0x08ffb80c
 8002c88:	fef6ffff 	.word	0xfef6ffff
 8002c8c:	fffbffff 	.word	0xfffbffff
 8002c90:	ffc0ffff 	.word	0xffc0ffff
 8002c94:	fffffeac 	.word	0xfffffeac

08002c98 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <SystemCoreClockUpdate+0xdc>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d011      	beq.n	8002ce2 <SystemCoreClockUpdate+0x4a>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d83f      	bhi.n	8002d44 <SystemCoreClockUpdate+0xac>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <SystemCoreClockUpdate+0x3a>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d004      	beq.n	8002cda <SystemCoreClockUpdate+0x42>
 8002cd0:	e038      	b.n	8002d44 <SystemCoreClockUpdate+0xac>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002cd4:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <SystemCoreClockUpdate+0xe4>)
 8002cd6:	601a      	str	r2, [r3, #0]
      break;
 8002cd8:	e038      	b.n	8002d4c <SystemCoreClockUpdate+0xb4>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002cdc:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <SystemCoreClockUpdate+0xe4>)
 8002cde:	601a      	str	r2, [r3, #0]
      break;
 8002ce0:	e034      	b.n	8002d4c <SystemCoreClockUpdate+0xb4>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <SystemCoreClockUpdate+0xdc>)
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	23f0      	movs	r3, #240	; 0xf0
 8002ce8:	039b      	lsls	r3, r3, #14
 8002cea:	4013      	ands	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <SystemCoreClockUpdate+0xdc>)
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	23c0      	movs	r3, #192	; 0xc0
 8002cf4:	025b      	lsls	r3, r3, #9
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0c9b      	lsrs	r3, r3, #18
 8002cfe:	3302      	adds	r3, #2
 8002d00:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10c      	bne.n	8002d22 <SystemCoreClockUpdate+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	0152      	lsls	r2, r2, #5
 8002d0e:	1a52      	subs	r2, r2, r1
 8002d10:	0193      	lsls	r3, r2, #6
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	185b      	adds	r3, r3, r1
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002d1e:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8002d20:	e014      	b.n	8002d4c <SystemCoreClockUpdate+0xb4>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <SystemCoreClockUpdate+0xdc>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	220f      	movs	r2, #15
 8002d28:	4013      	ands	r3, r2
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	4812      	ldr	r0, [pc, #72]	; (8002d7c <SystemCoreClockUpdate+0xe4>)
 8002d32:	f7fd f9f1 	bl	8000118 <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	001a      	movs	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	435a      	muls	r2, r3
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002d40:	601a      	str	r2, [r3, #0]
      break;
 8002d42:	e003      	b.n	8002d4c <SystemCoreClockUpdate+0xb4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002d46:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <SystemCoreClockUpdate+0xe4>)
 8002d48:	601a      	str	r2, [r3, #0]
      break;
 8002d4a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <SystemCoreClockUpdate+0xdc>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	220f      	movs	r2, #15
 8002d54:	4013      	ands	r3, r2
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <SystemCoreClockUpdate+0xe8>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	40da      	lsrs	r2, r3
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <SystemCoreClockUpdate+0xe0>)
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40021000 	.word	0x40021000
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	20000004 	.word	0x20000004

08002d84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <SetSysClock+0xd4>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <SetSysClock+0xd4>)
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	0249      	lsls	r1, r1, #9
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <SetSysClock+0xd4>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4013      	ands	r3, r2
 8002daa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3301      	adds	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <SetSysClock+0x3e>
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	01db      	lsls	r3, r3, #7
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1ee      	bne.n	8002da0 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002dc2:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <SetSysClock+0xd4>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d002      	beq.n	8002dd4 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	e001      	b.n	8002dd8 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d138      	bne.n	8002e50 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <SetSysClock+0xd8>)
 8002de0:	2211      	movs	r2, #17
 8002de2:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002de4:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <SetSysClock+0xd4>)
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <SetSysClock+0xd4>)
 8002de8:	6852      	ldr	r2, [r2, #4]
 8002dea:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <SetSysClock+0xd4>)
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <SetSysClock+0xd4>)
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <SetSysClock+0xd4>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <SetSysClock+0xd4>)
 8002dfa:	4919      	ldr	r1, [pc, #100]	; (8002e60 <SetSysClock+0xdc>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <SetSysClock+0xd4>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <SetSysClock+0xd4>)
 8002e06:	2188      	movs	r1, #136	; 0x88
 8002e08:	0349      	lsls	r1, r1, #13
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <SetSysClock+0xd4>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <SetSysClock+0xd4>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0449      	lsls	r1, r1, #17
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <SetSysClock+0xd4>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	049b      	lsls	r3, r3, #18
 8002e26:	4013      	ands	r3, r2
 8002e28:	d0f9      	beq.n	8002e1e <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <SetSysClock+0xd4>)
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <SetSysClock+0xd4>)
 8002e30:	2103      	movs	r1, #3
 8002e32:	438a      	bics	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <SetSysClock+0xd4>)
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <SetSysClock+0xd4>)
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SetSysClock+0xd4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	220c      	movs	r2, #12
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d1f9      	bne.n	8002e44 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	ffc07fff 	.word	0xffc07fff

08002e64 <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <ADC_DeInit+0x30>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10b      	bne.n	8002e8c <ADC_DeInit+0x28>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	2101      	movs	r1, #1
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 fe22 	bl	8003ac4 <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	2100      	movs	r1, #0
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 fe1c 	bl	8003ac4 <RCC_APB2PeriphResetCmd>
  }
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40012400 	.word	0x40012400

08002e98 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <ADC_Init+0x54>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	791b      	ldrb	r3, [r3, #4]
 8002ebc:	035b      	lsls	r3, r3, #13
 8002ebe:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8002ec4:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8002ed0:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	60da      	str	r2, [r3, #12]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	ffffd203 	.word	0xffffd203

08002ef0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	000a      	movs	r2, r1
 8002f2e:	1cfb      	adds	r3, r7, #3
 8002f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f32:	1cfb      	adds	r3, r7, #3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <ADC_Cmd+0x24>
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
  }
}
 8002f46:	e005      	b.n	8002f54 <ADC_Cmd+0x30>
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <ADC_ChannelConfig>:
  *            @arg ADC_SampleTime_71_5Cycles: Sample time equal to 71.5 cycles
  *            @arg ADC_SampleTime_239_5Cycles: Sample time equal to 239.5 cycles
  * @retval None
  */
void ADC_ChannelConfig(ADC_TypeDef* ADCx, uint32_t ADC_Channel, uint32_t ADC_SampleTime)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Clear the Sampling time Selection bits */
  tmpreg &= ~ADC_SMPR1_SMPR;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	615a      	str	r2, [r3, #20]
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b006      	add	sp, #24
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ADC_GetCalibrationFactor>:
  *         reset configuration (ADEN must be equal to 0).
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	0612      	lsls	r2, r2, #24
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	0fdb      	lsrs	r3, r3, #31
 8002fbe:	07db      	lsls	r3, r3, #31
 8002fc0:	60fb      	str	r3, [r7, #12]
    calibrationcounter++;  
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	23f0      	movs	r3, #240	; 0xf0
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d002      	beq.n	8002fd8 <ADC_GetCalibrationFactor+0x42>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ef      	bne.n	8002fb8 <ADC_GetCalibrationFactor+0x22>
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db03      	blt.n	8002fe8 <ADC_GetCalibrationFactor+0x52>
  {
    /*Get the calibration factor from the ADC data register */
    tmpreg = ADCx->DR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e001      	b.n	8002fec <ADC_GetCalibrationFactor+0x56>
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  }
  return tmpreg;
 8002fec:	697b      	ldr	r3, [r7, #20]
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <ADC_StartOfConversion>:
  *         assertion of EOSEQ because the sequence is automatic relaunched
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2204      	movs	r2, #4
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	609a      	str	r2, [r3, #8]
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}

08003012 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	000a      	movs	r2, r1
 800301c:	1cfb      	adds	r3, r7, #3
 800301e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003020:	1cfb      	adds	r3, r7, #3
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <ADC_DMACmd+0x24>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
  }
}
 8003034:	e006      	b.n	8003044 <ADC_DMACmd+0x32>
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	4393      	bics	r3, r2
 800303e:	001a      	movs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <ADC_DMARequestModeConfig>:
  *            @arg ADC_DMAMode_OneShot: DMA One Shot Mode 
  *            @arg ADC_DMAMode_Circular: DMA Circular Mode  
  *  @retval None
  */
void ADC_DMARequestModeConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMARequestMode)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_DMACFG;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2202      	movs	r2, #2
 800305c:	4393      	bics	r3, r2
 800305e:	001a      	movs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
  ADCx->CFGR1 |= (uint32_t)ADC_DMARequestMode;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}

08003078 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_ADSTP: ADC stop flag
  *            @arg ADC_FLAG_ADCAL: ADC Calibration flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	045b      	lsls	r3, r3, #17
 8003094:	4013      	ands	r3, r2
 8003096:	d005      	beq.n	80030a4 <ADC_GetFlagStatus+0x2c>
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <ADC_GetFlagStatus+0x5c>)
 800309e:	4013      	ands	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	e002      	b.n	80030aa <ADC_GetFlagStatus+0x32>
  }
  else
  {
    tmpreg = ADCx->ISR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60bb      	str	r3, [r7, #8]
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4013      	ands	r3, r2
 80030b0:	d004      	beq.n	80030bc <ADC_GetFlagStatus+0x44>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e003      	b.n	80030c4 <ADC_GetFlagStatus+0x4c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	781b      	ldrb	r3, [r3, #0]
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	feffffff 	.word	0xfeffffff

080030d8 <DMA_DeInit>:
  *         x can be 1 to 7 for DMA1 to select the DMA Channel.
  * @note   Channel 6 and 7 are available only for STM32F072 devices.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <DMA_DeInit+0x14c>)
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a48      	ldr	r2, [pc, #288]	; (8003228 <DMA_DeInit+0x150>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d106      	bne.n	800311a <DMA_DeInit+0x42>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 800310c:	4b47      	ldr	r3, [pc, #284]	; (800322c <DMA_DeInit+0x154>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <DMA_DeInit+0x154>)
 8003112:	210f      	movs	r1, #15
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8003118:	e07f      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a44      	ldr	r2, [pc, #272]	; (8003230 <DMA_DeInit+0x158>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d106      	bne.n	8003130 <DMA_DeInit+0x58>
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <DMA_DeInit+0x154>)
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <DMA_DeInit+0x154>)
 8003128:	21f0      	movs	r1, #240	; 0xf0
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
}
 800312e:	e074      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a40      	ldr	r2, [pc, #256]	; (8003234 <DMA_DeInit+0x15c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d107      	bne.n	8003148 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8003138:	4b3c      	ldr	r3, [pc, #240]	; (800322c <DMA_DeInit+0x154>)
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <DMA_DeInit+0x154>)
 800313e:	21f0      	movs	r1, #240	; 0xf0
 8003140:	0109      	lsls	r1, r1, #4
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
}
 8003146:	e068      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel4)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3b      	ldr	r2, [pc, #236]	; (8003238 <DMA_DeInit+0x160>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d107      	bne.n	8003160 <DMA_DeInit+0x88>
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <DMA_DeInit+0x154>)
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <DMA_DeInit+0x154>)
 8003156:	21f0      	movs	r1, #240	; 0xf0
 8003158:	0209      	lsls	r1, r1, #8
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
}
 800315e:	e05c      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel5)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a36      	ldr	r2, [pc, #216]	; (800323c <DMA_DeInit+0x164>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d107      	bne.n	8003178 <DMA_DeInit+0xa0>
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <DMA_DeInit+0x154>)
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4b2f      	ldr	r3, [pc, #188]	; (800322c <DMA_DeInit+0x154>)
 800316e:	21f0      	movs	r1, #240	; 0xf0
 8003170:	0309      	lsls	r1, r1, #12
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
}
 8003176:	e050      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel6)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a31      	ldr	r2, [pc, #196]	; (8003240 <DMA_DeInit+0x168>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d107      	bne.n	8003190 <DMA_DeInit+0xb8>
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8003180:	4b2a      	ldr	r3, [pc, #168]	; (800322c <DMA_DeInit+0x154>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <DMA_DeInit+0x154>)
 8003186:	21f0      	movs	r1, #240	; 0xf0
 8003188:	0409      	lsls	r1, r1, #16
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
}
 800318e:	e044      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel7)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <DMA_DeInit+0x16c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d107      	bne.n	80031a8 <DMA_DeInit+0xd0>
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <DMA_DeInit+0x154>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <DMA_DeInit+0x154>)
 800319e:	21f0      	movs	r1, #240	; 0xf0
 80031a0:	0509      	lsls	r1, r1, #20
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
}
 80031a6:	e038      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a27      	ldr	r2, [pc, #156]	; (8003248 <DMA_DeInit+0x170>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d106      	bne.n	80031be <DMA_DeInit+0xe6>
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <DMA_DeInit+0x174>)
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <DMA_DeInit+0x174>)
 80031b6:	210f      	movs	r1, #15
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
}
 80031bc:	e02d      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <DMA_DeInit+0x178>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d106      	bne.n	80031d4 <DMA_DeInit+0xfc>
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <DMA_DeInit+0x174>)
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <DMA_DeInit+0x174>)
 80031cc:	21f0      	movs	r1, #240	; 0xf0
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
}
 80031d2:	e022      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <DMA_DeInit+0x17c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d107      	bne.n	80031ec <DMA_DeInit+0x114>
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <DMA_DeInit+0x174>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <DMA_DeInit+0x174>)
 80031e2:	21f0      	movs	r1, #240	; 0xf0
 80031e4:	0109      	lsls	r1, r1, #4
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
}
 80031ea:	e016      	b.n	800321a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel4)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <DMA_DeInit+0x180>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d107      	bne.n	8003204 <DMA_DeInit+0x12c>
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <DMA_DeInit+0x174>)
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <DMA_DeInit+0x174>)
 80031fa:	21f0      	movs	r1, #240	; 0xf0
 80031fc:	0209      	lsls	r1, r1, #8
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
}
 8003202:	e00a      	b.n	800321a <DMA_DeInit+0x142>
    if (DMAy_Channelx == DMA2_Channel5)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <DMA_DeInit+0x184>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d106      	bne.n	800321a <DMA_DeInit+0x142>
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <DMA_DeInit+0x174>)
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <DMA_DeInit+0x174>)
 8003212:	21f0      	movs	r1, #240	; 0xf0
 8003214:	0309      	lsls	r1, r1, #12
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	0000fffe 	.word	0x0000fffe
 8003228:	40020008 	.word	0x40020008
 800322c:	40020000 	.word	0x40020000
 8003230:	4002001c 	.word	0x4002001c
 8003234:	40020030 	.word	0x40020030
 8003238:	40020044 	.word	0x40020044
 800323c:	40020058 	.word	0x40020058
 8003240:	4002006c 	.word	0x4002006c
 8003244:	40020080 	.word	0x40020080
 8003248:	40020408 	.word	0x40020408
 800324c:	40020400 	.word	0x40020400
 8003250:	4002041c 	.word	0x4002041c
 8003254:	40020430 	.word	0x40020430
 8003258:	40020444 	.word	0x40020444
 800325c:	40020458 	.word	0x40020458

08003260 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <DMA_Init+0x78>)
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800328a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003296:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80032a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60da      	str	r2, [r3, #12]
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	ffff800f 	.word	0xffff800f

080032dc <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	000a      	movs	r2, r1
 80032e6:	1cfb      	adds	r3, r7, #3
 80032e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80032ea:	1cfb      	adds	r3, r7, #3
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <DMA_Cmd+0x24>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  }
}
 80032fe:	e005      	b.n	800330c <DMA_Cmd+0x30>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <DMA_Cmd+0x38>)
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0000fffe 	.word	0x0000fffe

08003318 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
  *         contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <EXTI_Init+0xdc>)
 8003326:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	799b      	ldrb	r3, [r3, #6]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d04f      	beq.n	80033d0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <EXTI_Init+0xdc>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	43d9      	mvns	r1, r3
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <EXTI_Init+0xdc>)
 800333c:	400a      	ands	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8003340:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <EXTI_Init+0xdc>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	43d9      	mvns	r1, r3
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <EXTI_Init+0xdc>)
 800334c:	400a      	ands	r2, r1
 800334e:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	791b      	ldrb	r3, [r3, #4]
 8003354:	001a      	movs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	189b      	adds	r3, r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <EXTI_Init+0xdc>)
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	43d9      	mvns	r1, r3
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <EXTI_Init+0xdc>)
 8003376:	400a      	ands	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <EXTI_Init+0xdc>)
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	43d9      	mvns	r1, r3
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <EXTI_Init+0xdc>)
 8003386:	400a      	ands	r2, r1
 8003388:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	795b      	ldrb	r3, [r3, #5]
 800338e:	2b10      	cmp	r3, #16
 8003390:	d10e      	bne.n	80033b0 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <EXTI_Init+0xdc>)
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <EXTI_Init+0xdc>)
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <EXTI_Init+0xdc>)
 80033a2:	68d9      	ldr	r1, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <EXTI_Init+0xdc>)
 80033aa:	430a      	orrs	r2, r1
 80033ac:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80033ae:	e01d      	b.n	80033ec <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <EXTI_Init+0xdc>)
 80033b2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	795b      	ldrb	r3, [r3, #5]
 80033b8:	001a      	movs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
}
 80033ce:	e00d      	b.n	80033ec <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	791b      	ldrb	r3, [r3, #4]
 80033d4:	001a      	movs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	43d9      	mvns	r1, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	400a      	ands	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40010400 	.word	0x40010400

080033f8 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be (0..27).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
   FlagStatus bitstatus = RESET;
 8003400:	210f      	movs	r1, #15
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <EXTI_GetFlagStatus+0x38>)
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4013      	ands	r3, r2
 8003410:	d003      	beq.n	800341a <EXTI_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 8003412:	187b      	adds	r3, r7, r1
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e003      	b.n	8003422 <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800341a:	230f      	movs	r3, #15
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003422:	230f      	movs	r3, #15
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	781b      	ldrb	r3, [r3, #0]
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40010400 	.word	0x40010400

08003434 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <EXTI_ClearITPendingBit+0x18>)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	615a      	str	r2, [r3, #20]
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40010400 	.word	0x40010400

08003450 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e07c      	b.n	8003566 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800346c:	2201      	movs	r2, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	409a      	lsls	r2, r3
 8003472:	0013      	movs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d16b      	bne.n	8003560 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	791b      	ldrb	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d003      	beq.n	8003498 <GPIO_Init+0x48>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	791b      	ldrb	r3, [r3, #4]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d134      	bne.n	8003502 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	0052      	lsls	r2, r2, #1
 80034a0:	2103      	movs	r1, #3
 80034a2:	4091      	lsls	r1, r2
 80034a4:	000a      	movs	r2, r1
 80034a6:	43d2      	mvns	r2, r2
 80034a8:	401a      	ands	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	795b      	ldrb	r3, [r3, #5]
 80034b6:	0019      	movs	r1, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4099      	lsls	r1, r3
 80034be:	000b      	movs	r3, r1
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	b292      	uxth	r2, r2
 80034d0:	0011      	movs	r1, r2
 80034d2:	2201      	movs	r2, #1
 80034d4:	408a      	lsls	r2, r1
 80034d6:	b292      	uxth	r2, r2
 80034d8:	43d2      	mvns	r2, r2
 80034da:	b292      	uxth	r2, r2
 80034dc:	4013      	ands	r3, r2
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	889b      	ldrh	r3, [r3, #4]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	799b      	ldrb	r3, [r3, #6]
 80034ee:	0019      	movs	r1, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4099      	lsls	r1, r3
 80034f6:	000b      	movs	r3, r1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	0052      	lsls	r2, r2, #1
 800350a:	2103      	movs	r1, #3
 800350c:	4091      	lsls	r1, r2
 800350e:	000a      	movs	r2, r1
 8003510:	43d2      	mvns	r2, r2
 8003512:	401a      	ands	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	0019      	movs	r1, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4099      	lsls	r1, r3
 8003528:	000b      	movs	r3, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	b292      	uxth	r2, r2
 8003538:	0052      	lsls	r2, r2, #1
 800353a:	2103      	movs	r1, #3
 800353c:	4091      	lsls	r1, r2
 800353e:	000a      	movs	r2, r1
 8003540:	43d2      	mvns	r2, r2
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	79db      	ldrb	r3, [r3, #7]
 8003550:	0019      	movs	r1, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4099      	lsls	r1, r3
 8003558:	000b      	movs	r3, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3301      	adds	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d800      	bhi.n	800356e <GPIO_Init+0x11e>
 800356c:	e77e      	b.n	800346c <GPIO_Init+0x1c>
    }
  }
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	b006      	add	sp, #24
 8003576:	bd80      	pop	{r7, pc}

08003578 <GPIO_ReadInputDataBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	000a      	movs	r2, r1
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
 8003586:	210f      	movs	r1, #15
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8a1b      	ldrh	r3, [r3, #16]
 8003592:	b29b      	uxth	r3, r3
 8003594:	1cba      	adds	r2, r7, #2
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <GPIO_ReadInputDataBit+0x30>
  {
    bitstatus = (uint8_t)Bit_SET;
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e003      	b.n	80035b0 <GPIO_ReadInputDataBit+0x38>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80035a8:	230f      	movs	r3, #15
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80035b0:	230f      	movs	r3, #15
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	781b      	ldrb	r3, [r3, #0]
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}

080035be <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	000a      	movs	r2, r1
 80035c8:	1cbb      	adds	r3, r7, #2
 80035ca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80035cc:	1cbb      	adds	r3, r7, #2
 80035ce:	881a      	ldrh	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	000a      	movs	r2, r1
 80035e6:	1cbb      	adds	r3, r7, #2
 80035e8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	1cba      	adds	r2, r7, #2
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b002      	add	sp, #8
 80035f8:	bd80      	pop	{r7, pc}

080035fa <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	0008      	movs	r0, r1
 8003604:	0011      	movs	r1, r2
 8003606:	1cbb      	adds	r3, r7, #2
 8003608:	1c02      	adds	r2, r0, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	1c7b      	adds	r3, r7, #1
 800360e:	1c0a      	adds	r2, r1, #0
 8003610:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800361a:	1c7b      	adds	r3, r7, #1
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	1cbb      	adds	r3, r7, #2
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	2107      	movs	r1, #7
 8003624:	400b      	ands	r3, r1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800362e:	1cbb      	adds	r3, r7, #2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	08db      	lsrs	r3, r3, #3
 8003634:	b29b      	uxth	r3, r3
 8003636:	001a      	movs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	58d3      	ldr	r3, [r2, r3]
 8003640:	1cba      	adds	r2, r7, #2
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	2107      	movs	r1, #7
 8003646:	400a      	ands	r2, r1
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	210f      	movs	r1, #15
 800364c:	4091      	lsls	r1, r2
 800364e:	000a      	movs	r2, r1
 8003650:	43d2      	mvns	r2, r2
 8003652:	1cb9      	adds	r1, r7, #2
 8003654:	8809      	ldrh	r1, [r1, #0]
 8003656:	08c9      	lsrs	r1, r1, #3
 8003658:	b289      	uxth	r1, r1
 800365a:	0008      	movs	r0, r1
 800365c:	401a      	ands	r2, r3
 800365e:	0011      	movs	r1, r2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0002      	movs	r2, r0
 8003664:	3208      	adds	r2, #8
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800366a:	1cbb      	adds	r3, r7, #2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	b29b      	uxth	r3, r3
 8003672:	001a      	movs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	58d3      	ldr	r3, [r2, r3]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	08db      	lsrs	r3, r3, #3
 8003688:	b29b      	uxth	r3, r3
 800368a:	001a      	movs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	0092      	lsls	r2, r2, #2
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	50d1      	str	r1, [r2, r3]
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	789b      	ldrb	r3, [r3, #2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d039      	beq.n	8003728 <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80036b4:	4a24      	ldr	r2, [pc, #144]	; (8003748 <NVIC_Init+0xa8>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	33c0      	adds	r3, #192	; 0xc0
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	589b      	ldr	r3, [r3, r2]
 80036c4:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	001a      	movs	r2, r3
 80036cc:	2303      	movs	r3, #3
 80036ce:	4013      	ands	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	409a      	lsls	r2, r3
 80036d6:	0013      	movs	r3, r2
 80036d8:	43da      	mvns	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	22ff      	movs	r2, #255	; 0xff
 80036e8:	401a      	ands	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	0019      	movs	r1, r3
 80036f0:	2303      	movs	r3, #3
 80036f2:	400b      	ands	r3, r1
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	409a      	lsls	r2, r3
 80036f8:	0013      	movs	r3, r2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8003700:	4911      	ldr	r1, [pc, #68]	; (8003748 <NVIC_Init+0xa8>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	33c0      	adds	r3, #192	; 0xc0
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	001a      	movs	r2, r3
 8003718:	231f      	movs	r3, #31
 800371a:	401a      	ands	r2, r3
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <NVIC_Init+0xa8>)
 800371e:	2101      	movs	r1, #1
 8003720:	4091      	lsls	r1, r2
 8003722:	000a      	movs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003726:	e00a      	b.n	800373e <NVIC_Init+0x9e>
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	001a      	movs	r2, r3
 800372e:	231f      	movs	r3, #31
 8003730:	4013      	ands	r3, r2
 8003732:	4905      	ldr	r1, [pc, #20]	; (8003748 <NVIC_Init+0xa8>)
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	0013      	movs	r3, r2
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	508b      	str	r3, [r1, r2]
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	e000e100 	.word	0xe000e100

0800374c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800376c:	4baf      	ldr	r3, [pc, #700]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	220c      	movs	r2, #12
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d048      	beq.n	800380e <RCC_GetClocksFreq+0xc2>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d849      	bhi.n	8003816 <RCC_GetClocksFreq+0xca>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d011      	beq.n	80037ac <RCC_GetClocksFreq+0x60>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d843      	bhi.n	8003816 <RCC_GetClocksFreq+0xca>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <RCC_GetClocksFreq+0x50>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d004      	beq.n	80037a4 <RCC_GetClocksFreq+0x58>
 800379a:	e03c      	b.n	8003816 <RCC_GetClocksFreq+0xca>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4aa4      	ldr	r2, [pc, #656]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 80037a0:	601a      	str	r2, [r3, #0]
      break;
 80037a2:	e03c      	b.n	800381e <RCC_GetClocksFreq+0xd2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4aa2      	ldr	r2, [pc, #648]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 80037a8:	601a      	str	r2, [r3, #0]
      break;
 80037aa:	e038      	b.n	800381e <RCC_GetClocksFreq+0xd2>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80037ac:	4b9f      	ldr	r3, [pc, #636]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	23f0      	movs	r3, #240	; 0xf0
 80037b2:	039b      	lsls	r3, r3, #14
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80037b8:	4b9c      	ldr	r3, [pc, #624]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	23c0      	movs	r3, #192	; 0xc0
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
      pllmull = ( pllmull >> 18) + 2;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	0c9b      	lsrs	r3, r3, #18
 80037c8:	3302      	adds	r3, #2
 80037ca:	617b      	str	r3, [r7, #20]
      
      if (pllsource == 0x00)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <RCC_GetClocksFreq+0x9c>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80037d2:	6979      	ldr	r1, [r7, #20]
 80037d4:	000a      	movs	r2, r1
 80037d6:	0152      	lsls	r2, r2, #5
 80037d8:	1a52      	subs	r2, r2, r1
 80037da:	0193      	lsls	r3, r2, #6
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	185b      	adds	r3, r3, r1
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e00e      	b.n	8003806 <RCC_GetClocksFreq+0xba>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80037e8:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	220f      	movs	r2, #15
 80037ee:	4013      	ands	r3, r2
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80037f4:	68f9      	ldr	r1, [r7, #12]
 80037f6:	488e      	ldr	r0, [pc, #568]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 80037f8:	f7fc fc8e 	bl	8000118 <__udivsi3>
 80037fc:	0003      	movs	r3, r0
 80037fe:	001a      	movs	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4353      	muls	r3, r2
 8003804:	61fb      	str	r3, [r7, #28]
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	601a      	str	r2, [r3, #0]
      break;
 800380c:	e007      	b.n	800381e <RCC_GetClocksFreq+0xd2>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a88      	ldr	r2, [pc, #544]	; (8003a34 <RCC_GetClocksFreq+0x2e8>)
 8003812:	601a      	str	r2, [r3, #0]
      break;
 8003814:	e003      	b.n	800381e <RCC_GetClocksFreq+0xd2>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a85      	ldr	r2, [pc, #532]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 800381a:	601a      	str	r2, [r3, #0]
      break;
 800381c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800381e:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	22f0      	movs	r2, #240	; 0xf0
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp]; 
 800382e:	4a82      	ldr	r2, [pc, #520]	; (8003a38 <RCC_GetClocksFreq+0x2ec>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	40da      	lsrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8003846:	4b79      	ldr	r3, [pc, #484]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	23e0      	movs	r3, #224	; 0xe0
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 8;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003858:	4a77      	ldr	r2, [pc, #476]	; (8003a38 <RCC_GetClocksFreq+0x2ec>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	18d3      	adds	r3, r2, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	60bb      	str	r3, [r7, #8]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	40da      	lsrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8003870:	4b6e      	ldr	r3, [pc, #440]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	401a      	ands	r2, r3
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	429a      	cmp	r2, r3
 8003880:	d003      	beq.n	800388a <RCC_GetClocksFreq+0x13e>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a6d      	ldr	r2, [pc, #436]	; (8003a3c <RCC_GetClocksFreq+0x2f0>)
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	e013      	b.n	80038b2 <RCC_GetClocksFreq+0x166>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 800388a:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	01db      	lsls	r3, r3, #7
 8003892:	401a      	ands	r2, r3
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	01db      	lsls	r3, r3, #7
 8003898:	429a      	cmp	r2, r3
 800389a:	d005      	beq.n	80038a8 <RCC_GetClocksFreq+0x15c>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	085a      	lsrs	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	e004      	b.n	80038b2 <RCC_GetClocksFreq+0x166>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	089a      	lsrs	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80038b2:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	2240      	movs	r2, #64	; 0x40
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d003      	beq.n	80038c6 <RCC_GetClocksFreq+0x17a>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a5f      	ldr	r2, [pc, #380]	; (8003a40 <RCC_GetClocksFreq+0x2f4>)
 80038c2:	611a      	str	r2, [r3, #16]
 80038c4:	e003      	b.n	80038ce <RCC_GetClocksFreq+0x182>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0212      	lsls	r2, r2, #8
 80038cc:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80038ce:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	2210      	movs	r2, #16
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d003      	beq.n	80038e2 <RCC_GetClocksFreq+0x196>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a54      	ldr	r2, [pc, #336]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 80038de:	615a      	str	r2, [r3, #20]
 80038e0:	e003      	b.n	80038ea <RCC_GetClocksFreq+0x19e>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80038ea:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2203      	movs	r2, #3
 80038f0:	4013      	ands	r3, r2
 80038f2:	d104      	bne.n	80038fe <RCC_GetClocksFreq+0x1b2>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
 80038fc:	e01e      	b.n	800393c <RCC_GetClocksFreq+0x1f0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80038fe:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	2b01      	cmp	r3, #1
 8003908:	d104      	bne.n	8003914 <RCC_GetClocksFreq+0x1c8>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]
 8003912:	e013      	b.n	800393c <RCC_GetClocksFreq+0x1f0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8003914:	4b45      	ldr	r3, [pc, #276]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	2203      	movs	r2, #3
 800391a:	4013      	ands	r3, r2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d104      	bne.n	800392a <RCC_GetClocksFreq+0x1de>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	0212      	lsls	r2, r2, #8
 8003926:	619a      	str	r2, [r3, #24]
 8003928:	e008      	b.n	800393c <RCC_GetClocksFreq+0x1f0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	2203      	movs	r2, #3
 8003930:	4013      	ands	r3, r2
 8003932:	2b03      	cmp	r3, #3
 8003934:	d102      	bne.n	800393c <RCC_GetClocksFreq+0x1f0>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a3d      	ldr	r2, [pc, #244]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 800393a:	619a      	str	r2, [r3, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 800393e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003940:	23c0      	movs	r3, #192	; 0xc0
 8003942:	029b      	lsls	r3, r3, #10
 8003944:	4013      	ands	r3, r2
 8003946:	d104      	bne.n	8003952 <RCC_GetClocksFreq+0x206>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	61da      	str	r2, [r3, #28]
 8003950:	e027      	b.n	80039a2 <RCC_GetClocksFreq+0x256>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003956:	23c0      	movs	r3, #192	; 0xc0
 8003958:	029b      	lsls	r3, r3, #10
 800395a:	401a      	ands	r2, r3
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	429a      	cmp	r2, r3
 8003962:	d104      	bne.n	800396e <RCC_GetClocksFreq+0x222>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	61da      	str	r2, [r3, #28]
 800396c:	e019      	b.n	80039a2 <RCC_GetClocksFreq+0x256>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003972:	23c0      	movs	r3, #192	; 0xc0
 8003974:	029b      	lsls	r3, r3, #10
 8003976:	401a      	ands	r2, r3
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	429a      	cmp	r2, r3
 800397e:	d104      	bne.n	800398a <RCC_GetClocksFreq+0x23e>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	0212      	lsls	r2, r2, #8
 8003986:	61da      	str	r2, [r3, #28]
 8003988:	e00b      	b.n	80039a2 <RCC_GetClocksFreq+0x256>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 800398c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398e:	23c0      	movs	r3, #192	; 0xc0
 8003990:	029b      	lsls	r3, r3, #10
 8003992:	401a      	ands	r2, r3
 8003994:	23c0      	movs	r3, #192	; 0xc0
 8003996:	029b      	lsls	r3, r3, #10
 8003998:	429a      	cmp	r2, r3
 800399a:	d102      	bne.n	80039a2 <RCC_GetClocksFreq+0x256>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 80039a0:	61da      	str	r2, [r3, #28]
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	23c0      	movs	r3, #192	; 0xc0
 80039a8:	031b      	lsls	r3, r3, #12
 80039aa:	4013      	ands	r3, r2
 80039ac:	d104      	bne.n	80039b8 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	621a      	str	r2, [r3, #32]
 80039b6:	e027      	b.n	8003a08 <RCC_GetClocksFreq+0x2bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80039ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039bc:	23c0      	movs	r3, #192	; 0xc0
 80039be:	031b      	lsls	r3, r3, #12
 80039c0:	401a      	ands	r2, r3
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	02db      	lsls	r3, r3, #11
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d104      	bne.n	80039d4 <RCC_GetClocksFreq+0x288>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]
 80039d2:	e019      	b.n	8003a08 <RCC_GetClocksFreq+0x2bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80039d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d8:	23c0      	movs	r3, #192	; 0xc0
 80039da:	031b      	lsls	r3, r3, #12
 80039dc:	401a      	ands	r2, r3
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	031b      	lsls	r3, r3, #12
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d104      	bne.n	80039f0 <RCC_GetClocksFreq+0x2a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	0212      	lsls	r2, r2, #8
 80039ec:	621a      	str	r2, [r3, #32]
 80039ee:	e00b      	b.n	8003a08 <RCC_GetClocksFreq+0x2bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 80039f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f4:	23c0      	movs	r3, #192	; 0xc0
 80039f6:	031b      	lsls	r3, r3, #12
 80039f8:	401a      	ands	r2, r3
 80039fa:	23c0      	movs	r3, #192	; 0xc0
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d102      	bne.n	8003a08 <RCC_GetClocksFreq+0x2bc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <RCC_GetClocksFreq+0x2e4>)
 8003a06:	621a      	str	r2, [r3, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <RCC_GetClocksFreq+0x2e0>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d003      	beq.n	8003a1c <RCC_GetClocksFreq+0x2d0>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <RCC_GetClocksFreq+0x2e8>)
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 8003a1a:	e002      	b.n	8003a22 <RCC_GetClocksFreq+0x2d6>
    RCC_Clocks->USBCLK_Frequency = pllclk;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b008      	add	sp, #32
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	007a1200 	.word	0x007a1200
 8003a34:	02dc6c00 	.word	0x02dc6c00
 8003a38:	20000014 	.word	0x20000014
 8003a3c:	00d59f80 	.word	0x00d59f80
 8003a40:	00008012 	.word	0x00008012

08003a44 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	1cfb      	adds	r3, r7, #3
 8003a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a52:	1cfb      	adds	r3, r7, #3
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <RCC_AHBPeriphClockCmd+0x3c>)
 8003a5c:	6959      	ldr	r1, [r3, #20]
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <RCC_AHBPeriphClockCmd+0x3c>)
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8003a66:	e006      	b.n	8003a76 <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <RCC_AHBPeriphClockCmd+0x3c>)
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	43d9      	mvns	r1, r3
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <RCC_AHBPeriphClockCmd+0x3c>)
 8003a72:	400a      	ands	r2, r1
 8003a74:	615a      	str	r2, [r3, #20]
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	40021000 	.word	0x40021000

08003a84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	000a      	movs	r2, r1
 8003a8e:	1cfb      	adds	r3, r7, #3
 8003a90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a92:	1cfb      	adds	r3, r7, #3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <RCC_APB2PeriphClockCmd+0x3c>)
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <RCC_APB2PeriphClockCmd+0x3c>)
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003aa6:	e006      	b.n	8003ab6 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <RCC_APB2PeriphClockCmd+0x3c>)
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	43d9      	mvns	r1, r3
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <RCC_APB2PeriphClockCmd+0x3c>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b002      	add	sp, #8
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	000a      	movs	r2, r1
 8003ace:	1cfb      	adds	r3, r7, #3
 8003ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ad2:	1cfb      	adds	r3, r7, #3
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <RCC_APB2PeriphResetCmd+0x3c>)
 8003adc:	68d9      	ldr	r1, [r3, #12]
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <RCC_APB2PeriphResetCmd+0x3c>)
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8003ae6:	e006      	b.n	8003af6 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <RCC_APB2PeriphResetCmd+0x3c>)
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <RCC_APB2PeriphResetCmd+0x3c>)
 8003af2:	400a      	ands	r2, r1
 8003af4:	60da      	str	r2, [r3, #12]
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	40021000 	.word	0x40021000

08003b04 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	000a      	movs	r2, r1
 8003b0e:	1cfb      	adds	r3, r7, #3
 8003b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b12:	1cfb      	adds	r3, r7, #3
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003b1c:	6919      	ldr	r1, [r3, #16]
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8003b26:	e006      	b.n	8003b36 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	611a      	str	r2, [r3, #16]
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000

08003b44 <SPI_I2S_DeInit>:
  * @note   SPI2 is not available for STM32F031 devices.
  *         I2S mode is not supported for STM32F030 devices.      
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <SPI_I2S_DeInit+0x54>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10c      	bne.n	8003b6e <SPI_I2S_DeInit+0x2a>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	015b      	lsls	r3, r3, #5
 8003b58:	2101      	movs	r1, #1
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff ffb2 	bl	8003ac4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	015b      	lsls	r3, r3, #5
 8003b64:	2100      	movs	r1, #0
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7ff ffac 	bl	8003ac4 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  }
}
 8003b6c:	e00f      	b.n	8003b8e <SPI_I2S_DeInit+0x4a>
    if (SPIx == SPI2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <SPI_I2S_DeInit+0x58>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10b      	bne.n	8003b8e <SPI_I2S_DeInit+0x4a>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	01db      	lsls	r3, r3, #7
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff ffc1 	bl	8003b04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	01db      	lsls	r3, r3, #7
 8003b86:	2100      	movs	r1, #0
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff ffbb 	bl	8003b04 <RCC_APB1PeriphResetCmd>
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	40013000 	.word	0x40013000
 8003b9c:	40003800 	.word	0x40003800

08003ba0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003baa:	200e      	movs	r0, #14
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	2200      	movs	r2, #0
 8003bb0:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003bb2:	183b      	adds	r3, r7, r0
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	8812      	ldrh	r2, [r2, #0]
 8003bb8:	801a      	strh	r2, [r3, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003bba:	183b      	adds	r3, r7, r0
 8003bbc:	183a      	adds	r2, r7, r0
 8003bbe:	8811      	ldrh	r1, [r2, #0]
 8003bc0:	22c1      	movs	r2, #193	; 0xc1
 8003bc2:	0192      	lsls	r2, r2, #6
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	801a      	strh	r2, [r3, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	89db      	ldrh	r3, [r3, #14]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b299      	uxth	r1, r3
 8003bf4:	183b      	adds	r3, r7, r0
 8003bf6:	183a      	adds	r2, r7, r0
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	183a      	adds	r2, r7, r0
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	801a      	strh	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	8892      	ldrh	r2, [r2, #4]
 8003c0c:	801a      	strh	r2, [r3, #0]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	183a      	adds	r2, r7, r0
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	4919      	ldr	r1, [pc, #100]	; (8003c7c <SPI_Init+0xdc>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	8899      	ldrh	r1, [r3, #4]
 8003c1e:	183b      	adds	r3, r7, r0
 8003c20:	183a      	adds	r2, r7, r0
 8003c22:	8812      	ldrh	r2, [r2, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	183a      	adds	r2, r7, r0
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	809a      	strh	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	8a1a      	ldrh	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	821a      	strh	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	801a      	strh	r2, [r3, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8003c40:	183b      	adds	r3, r7, r0
 8003c42:	183a      	adds	r2, r7, r0
 8003c44:	8812      	ldrh	r2, [r2, #0]
 8003c46:	2104      	movs	r1, #4
 8003c48:	438a      	bics	r2, r1
 8003c4a:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	8859      	ldrh	r1, [r3, #2]
 8003c50:	183b      	adds	r3, r7, r0
 8003c52:	183a      	adds	r2, r7, r0
 8003c54:	8812      	ldrh	r2, [r2, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	183a      	adds	r2, r7, r0
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8b9b      	ldrh	r3, [r3, #28]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <SPI_Init+0xe0>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	839a      	strh	r2, [r3, #28]
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	fffff0ff 	.word	0xfffff0ff
 8003c80:	fffff7ff 	.word	0xfffff7ff

08003c84 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	000a      	movs	r2, r1
 8003c8e:	1cfb      	adds	r3, r7, #3
 8003c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c92:	1cfb      	adds	r3, r7, #3
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <SPI_Cmd+0x28>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8003caa:	e007      	b.n	8003cbc <SPI_Cmd+0x38>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	801a      	strh	r2, [r3, #0]
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <SPI_SendData8>:
  * @note   SPI2 is not available for STM32F031 devices.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	000a      	movs	r2, r1
 8003cce:	1cfb      	adds	r3, r7, #3
 8003cd0:	701a      	strb	r2, [r3, #0]
  uint32_t spixbase = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1cfa      	adds	r2, r7, #3
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	701a      	strb	r2, [r3, #0]
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SYSCFG_EXTILineConfig>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	1dbb      	adds	r3, r7, #6
 8003cfe:	1c0a      	adds	r2, r1, #0
 8003d00:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0x00;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003d06:	1dbb      	adds	r3, r7, #6
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	220f      	movs	r2, #15
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <SYSCFG_EXTILineConfig+0x8c>)
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	3302      	adds	r3, #2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	589b      	ldr	r3, [r3, r2]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	43d2      	mvns	r2, r2
 8003d2c:	4813      	ldr	r0, [pc, #76]	; (8003d7c <SYSCFG_EXTILineConfig+0x8c>)
 8003d2e:	1db9      	adds	r1, r7, #6
 8003d30:	7809      	ldrb	r1, [r1, #0]
 8003d32:	0889      	lsrs	r1, r1, #2
 8003d34:	b2c9      	uxtb	r1, r1
 8003d36:	401a      	ands	r2, r3
 8003d38:	1c8b      	adds	r3, r1, #2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	501a      	str	r2, [r3, r0]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8003d3e:	4a0f      	ldr	r2, [pc, #60]	; (8003d7c <SYSCFG_EXTILineConfig+0x8c>)
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3302      	adds	r3, #2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	589a      	ldr	r2, [r3, r2]
 8003d4e:	1dfb      	adds	r3, r7, #7
 8003d50:	7819      	ldrb	r1, [r3, #0]
 8003d52:	1dbb      	adds	r3, r7, #6
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2003      	movs	r0, #3
 8003d58:	4003      	ands	r3, r0
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4099      	lsls	r1, r3
 8003d5e:	000b      	movs	r3, r1
 8003d60:	4806      	ldr	r0, [pc, #24]	; (8003d7c <SYSCFG_EXTILineConfig+0x8c>)
 8003d62:	1db9      	adds	r1, r7, #6
 8003d64:	7809      	ldrb	r1, [r1, #0]
 8003d66:	0889      	lsrs	r1, r1, #2
 8003d68:	b2c9      	uxtb	r1, r1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	1c8b      	adds	r3, r1, #2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	501a      	str	r2, [r3, r0]
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	40010000 	.word	0x40010000

08003d80 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8003d8a:	210e      	movs	r1, #14
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2200      	movs	r2, #0
 8003d90:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	801a      	strh	r2, [r3, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <TIM_TimeBaseInit+0xc8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d008      	beq.n	8003db4 <TIM_TimeBaseInit+0x34>
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d003      	beq.n	8003db4 <TIM_TimeBaseInit+0x34>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <TIM_TimeBaseInit+0xcc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10d      	bne.n	8003dd0 <TIM_TimeBaseInit+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8003db4:	200e      	movs	r0, #14
 8003db6:	183b      	adds	r3, r7, r0
 8003db8:	183a      	adds	r2, r7, r0
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	2170      	movs	r1, #112	; 0x70
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	8859      	ldrh	r1, [r3, #2]
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	183a      	adds	r2, r7, r0
 8003dca:	8812      	ldrh	r2, [r2, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	801a      	strh	r2, [r3, #0]
  }
 
  if(TIMx != TIM6)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <TIM_TimeBaseInit+0xd0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00d      	beq.n	8003df4 <TIM_TimeBaseInit+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003dd8:	200e      	movs	r0, #14
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	183a      	adds	r2, r7, r0
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	491c      	ldr	r1, [pc, #112]	; (8003e54 <TIM_TimeBaseInit+0xd4>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	8919      	ldrh	r1, [r3, #8]
 8003dea:	183b      	adds	r3, r7, r0
 8003dec:	183a      	adds	r2, r7, r0
 8003dee:	8812      	ldrh	r2, [r2, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	220e      	movs	r2, #14
 8003df8:	18ba      	adds	r2, r7, r2
 8003dfa:	8812      	ldrh	r2, [r2, #0]
 8003dfc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <TIM_TimeBaseInit+0xc8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_TimeBaseInit+0xae>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <TIM_TimeBaseInit+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_TimeBaseInit+0xae>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <TIM_TimeBaseInit+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_TimeBaseInit+0xae>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <TIM_TimeBaseInit+0xe0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d104      	bne.n	8003e38 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	7a9b      	ldrb	r3, [r3, #10]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	829a      	strh	r2, [r3, #20]
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b004      	add	sp, #16
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40001000 	.word	0x40001000
 8003e54:	fffffcff 	.word	0xfffffcff
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_SetCounter>:
  * @note   TIM2 is not applicable for STM32F030 devices.    
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
//   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	000a      	movs	r2, r1
 8003e86:	1cfb      	adds	r3, r7, #3
 8003e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003e8a:	1cfb      	adds	r3, r7, #3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8003ea2:	e007      	b.n	8003eb4 <TIM_Cmd+0x38>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4393      	bics	r3, r2
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	801a      	strh	r2, [r3, #0]
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	000a      	movs	r2, r1
 8003ec6:	1cfb      	adds	r3, r7, #3
 8003ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003eca:	1cfb      	adds	r3, r7, #3
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2244      	movs	r2, #68	; 0x44
 8003ed6:	5a9b      	ldrh	r3, [r3, r2]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <TIM_CtrlPWMOutputs+0x48>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2244      	movs	r2, #68	; 0x44
 8003ee4:	5299      	strh	r1, [r3, r2]
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8003ee6:	e009      	b.n	8003efc <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2244      	movs	r2, #68	; 0x44
 8003eec:	5a9b      	ldrh	r3, [r3, r2]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	045b      	lsls	r3, r3, #17
 8003ef2:	0c5b      	lsrs	r3, r3, #17
 8003ef4:	b299      	uxth	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2244      	movs	r2, #68	; 0x44
 8003efa:	5299      	strh	r1, [r3, r2]
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	ffff8000 	.word	0xffff8000

08003f08 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003f12:	210a      	movs	r1, #10
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2200      	movs	r2, #0
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	240e      	movs	r4, #14
 8003f1c:	193b      	adds	r3, r7, r4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	200c      	movs	r0, #12
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	2200      	movs	r2, #0
 8003f28:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8c1b      	ldrh	r3, [r3, #32]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2201      	movs	r2, #1
 8003f32:	4393      	bics	r3, r2
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	8c12      	ldrh	r2, [r2, #32]
 8003f40:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	8892      	ldrh	r2, [r2, #4]
 8003f48:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	8b12      	ldrh	r2, [r2, #24]
 8003f50:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	0008      	movs	r0, r1
 8003f56:	187a      	adds	r2, r7, r1
 8003f58:	8812      	ldrh	r2, [r2, #0]
 8003f5a:	2170      	movs	r1, #112	; 0x70
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8003f60:	183b      	adds	r3, r7, r0
 8003f62:	183a      	adds	r2, r7, r0
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	2103      	movs	r1, #3
 8003f68:	438a      	bics	r2, r1
 8003f6a:	801a      	strh	r2, [r3, #0]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	8819      	ldrh	r1, [r3, #0]
 8003f70:	183b      	adds	r3, r7, r0
 8003f72:	183a      	adds	r2, r7, r0
 8003f74:	8812      	ldrh	r2, [r2, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	183a      	adds	r2, r7, r0
 8003f80:	8812      	ldrh	r2, [r2, #0]
 8003f82:	2102      	movs	r1, #2
 8003f84:	438a      	bics	r2, r1
 8003f86:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	8999      	ldrh	r1, [r3, #12]
 8003f8c:	183b      	adds	r3, r7, r0
 8003f8e:	183a      	adds	r2, r7, r0
 8003f90:	8812      	ldrh	r2, [r2, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	8859      	ldrh	r1, [r3, #2]
 8003f9a:	183b      	adds	r3, r7, r0
 8003f9c:	183a      	adds	r2, r7, r0
 8003f9e:	8812      	ldrh	r2, [r2, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <TIM_OC1Init+0x158>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_OC1Init+0xbc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <TIM_OC1Init+0x15c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC1Init+0xbc>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <TIM_OC1Init+0x160>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC1Init+0xbc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	; (800406c <TIM_OC1Init+0x164>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d135      	bne.n	8004030 <TIM_OC1Init+0x128>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8003fc4:	200e      	movs	r0, #14
 8003fc6:	183b      	adds	r3, r7, r0
 8003fc8:	183a      	adds	r2, r7, r0
 8003fca:	8812      	ldrh	r2, [r2, #0]
 8003fcc:	2108      	movs	r1, #8
 8003fce:	438a      	bics	r2, r1
 8003fd0:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	89d9      	ldrh	r1, [r3, #14]
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	183a      	adds	r2, r7, r0
 8003fda:	8812      	ldrh	r2, [r2, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	801a      	strh	r2, [r3, #0]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003fe0:	183b      	adds	r3, r7, r0
 8003fe2:	183a      	adds	r2, r7, r0
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	438a      	bics	r2, r1
 8003fea:	801a      	strh	r2, [r3, #0]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	8899      	ldrh	r1, [r3, #4]
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	183a      	adds	r2, r7, r0
 8003ff4:	8812      	ldrh	r2, [r2, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	801a      	strh	r2, [r3, #0]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8003ffa:	200c      	movs	r0, #12
 8003ffc:	183b      	adds	r3, r7, r0
 8003ffe:	183a      	adds	r2, r7, r0
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	491b      	ldr	r1, [pc, #108]	; (8004070 <TIM_OC1Init+0x168>)
 8004004:	400a      	ands	r2, r1
 8004006:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8004008:	183b      	adds	r3, r7, r0
 800400a:	183a      	adds	r2, r7, r0
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	4919      	ldr	r1, [pc, #100]	; (8004074 <TIM_OC1Init+0x16c>)
 8004010:	400a      	ands	r2, r1
 8004012:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	8a19      	ldrh	r1, [r3, #16]
 8004018:	183b      	adds	r3, r7, r0
 800401a:	183a      	adds	r2, r7, r0
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	8a59      	ldrh	r1, [r3, #18]
 8004026:	183b      	adds	r3, r7, r0
 8004028:	183a      	adds	r2, r7, r0
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	220c      	movs	r2, #12
 8004034:	18ba      	adds	r2, r7, r2
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	220a      	movs	r2, #10
 800403e:	18ba      	adds	r2, r7, r2
 8004040:	8812      	ldrh	r2, [r2, #0]
 8004042:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	220e      	movs	r2, #14
 8004050:	18ba      	adds	r2, r7, r2
 8004052:	8812      	ldrh	r2, [r2, #0]
 8004054:	841a      	strh	r2, [r3, #32]
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b005      	add	sp, #20
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800
 8004070:	fffffeff 	.word	0xfffffeff
 8004074:	fffffdff 	.word	0xfffffdff

08004078 <TIM_OC2Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004082:	210a      	movs	r1, #10
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2200      	movs	r2, #0
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	240e      	movs	r4, #14
 800408c:	193b      	adds	r3, r7, r4
 800408e:	2200      	movs	r2, #0
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	200c      	movs	r0, #12
 8004094:	183b      	adds	r3, r7, r0
 8004096:	2200      	movs	r2, #0
 8004098:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8c1b      	ldrh	r3, [r3, #32]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2210      	movs	r2, #16
 80040a2:	4393      	bics	r3, r2
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	8c12      	ldrh	r2, [r2, #32]
 80040b0:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b2:	183b      	adds	r3, r7, r0
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	8892      	ldrh	r2, [r2, #4]
 80040b8:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ba:	187b      	adds	r3, r7, r1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	8b12      	ldrh	r2, [r2, #24]
 80040c0:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	0008      	movs	r0, r1
 80040c6:	187a      	adds	r2, r7, r1
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	4946      	ldr	r1, [pc, #280]	; (80041e4 <TIM_OC2Init+0x16c>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80040d0:	183b      	adds	r3, r7, r0
 80040d2:	183a      	adds	r2, r7, r0
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	4944      	ldr	r1, [pc, #272]	; (80041e8 <TIM_OC2Init+0x170>)
 80040d8:	400a      	ands	r2, r1
 80040da:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	b299      	uxth	r1, r3
 80040e4:	183b      	adds	r3, r7, r0
 80040e6:	183a      	adds	r2, r7, r0
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80040ee:	0020      	movs	r0, r4
 80040f0:	183b      	adds	r3, r7, r0
 80040f2:	183a      	adds	r2, r7, r0
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	2120      	movs	r1, #32
 80040f8:	438a      	bics	r2, r1
 80040fa:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	899b      	ldrh	r3, [r3, #12]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	b299      	uxth	r1, r3
 8004104:	183b      	adds	r3, r7, r0
 8004106:	183a      	adds	r2, r7, r0
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	885b      	ldrh	r3, [r3, #2]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	b299      	uxth	r1, r3
 8004116:	183b      	adds	r3, r7, r0
 8004118:	183a      	adds	r2, r7, r0
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM15))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a32      	ldr	r2, [pc, #200]	; (80041ec <TIM_OC2Init+0x174>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC2Init+0xb8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <TIM_OC2Init+0x178>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d141      	bne.n	80041b4 <TIM_OC2Init+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Ouput Compare State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8004130:	200c      	movs	r0, #12
 8004132:	183b      	adds	r3, r7, r0
 8004134:	183a      	adds	r2, r7, r0
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	492e      	ldr	r1, [pc, #184]	; (80041f4 <TIM_OC2Init+0x17c>)
 800413a:	400a      	ands	r2, r1
 800413c:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	8a1b      	ldrh	r3, [r3, #16]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	b299      	uxth	r1, r3
 8004146:	183b      	adds	r3, r7, r0
 8004148:	183a      	adds	r2, r7, r0
 800414a:	8812      	ldrh	r2, [r2, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	801a      	strh	r2, [r3, #0]
    
    if (TIMx == TIM1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_OC2Init+0x174>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d12d      	bne.n	80041b4 <TIM_OC2Init+0x13c>
      assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
      assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
      assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
      
      /* Reset the Output N Polarity level */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8004158:	240e      	movs	r4, #14
 800415a:	193b      	adds	r3, r7, r4
 800415c:	193a      	adds	r2, r7, r4
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	438a      	bics	r2, r1
 8004164:	801a      	strh	r2, [r3, #0]
      /* Set the Output N Polarity */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	89db      	ldrh	r3, [r3, #14]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	b299      	uxth	r1, r3
 800416e:	193b      	adds	r3, r7, r4
 8004170:	193a      	adds	r2, r7, r4
 8004172:	8812      	ldrh	r2, [r2, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	801a      	strh	r2, [r3, #0]
      
      /* Reset the Output N State */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8004178:	193b      	adds	r3, r7, r4
 800417a:	193a      	adds	r2, r7, r4
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	2140      	movs	r1, #64	; 0x40
 8004180:	438a      	bics	r2, r1
 8004182:	801a      	strh	r2, [r3, #0]
      /* Set the Output N State */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	889b      	ldrh	r3, [r3, #4]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	b299      	uxth	r1, r3
 800418c:	193b      	adds	r3, r7, r4
 800418e:	193a      	adds	r2, r7, r4
 8004190:	8812      	ldrh	r2, [r2, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	801a      	strh	r2, [r3, #0]
      
      /* Reset the Output Compare N IDLE State */
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8004196:	183b      	adds	r3, r7, r0
 8004198:	183a      	adds	r2, r7, r0
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	4916      	ldr	r1, [pc, #88]	; (80041f8 <TIM_OC2Init+0x180>)
 800419e:	400a      	ands	r2, r1
 80041a0:	801a      	strh	r2, [r3, #0]
      
      /* Set the Output N Idle state */
      tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	8a5b      	ldrh	r3, [r3, #18]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	b299      	uxth	r1, r3
 80041aa:	183b      	adds	r3, r7, r0
 80041ac:	183a      	adds	r2, r7, r0
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	801a      	strh	r2, [r3, #0]
    }
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	220c      	movs	r2, #12
 80041b8:	18ba      	adds	r2, r7, r2
 80041ba:	8812      	ldrh	r2, [r2, #0]
 80041bc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	220a      	movs	r2, #10
 80041c2:	18ba      	adds	r2, r7, r2
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	220e      	movs	r2, #14
 80041d4:	18ba      	adds	r2, r7, r2
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	841a      	strh	r2, [r3, #32]
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b005      	add	sp, #20
 80041e0:	bd90      	pop	{r4, r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	ffff8fff 	.word	0xffff8fff
 80041e8:	fffffcff 	.word	0xfffffcff
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40014000 	.word	0x40014000
 80041f4:	fffffbff 	.word	0xfffffbff
 80041f8:	fffff7ff 	.word	0xfffff7ff

080041fc <TIM_OC4Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80041fc:	b5b0      	push	{r4, r5, r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004206:	210c      	movs	r1, #12
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2200      	movs	r2, #0
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	240a      	movs	r4, #10
 8004210:	193b      	adds	r3, r7, r4
 8004212:	2200      	movs	r2, #0
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	250e      	movs	r5, #14
 8004218:	197b      	adds	r3, r7, r5
 800421a:	2200      	movs	r2, #0
 800421c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8c1b      	ldrh	r3, [r3, #32]
 8004222:	b29b      	uxth	r3, r3
 8004224:	4a34      	ldr	r2, [pc, #208]	; (80042f8 <TIM_OC4Init+0xfc>)
 8004226:	4013      	ands	r3, r2
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	193b      	adds	r3, r7, r4
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	8c12      	ldrh	r2, [r2, #32]
 8004234:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004236:	197b      	adds	r3, r7, r5
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	8892      	ldrh	r2, [r2, #4]
 800423c:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	187b      	adds	r3, r7, r1
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	8b92      	ldrh	r2, [r2, #28]
 8004244:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8004246:	187b      	adds	r3, r7, r1
 8004248:	0008      	movs	r0, r1
 800424a:	187a      	adds	r2, r7, r1
 800424c:	8812      	ldrh	r2, [r2, #0]
 800424e:	492b      	ldr	r1, [pc, #172]	; (80042fc <TIM_OC4Init+0x100>)
 8004250:	400a      	ands	r2, r1
 8004252:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8004254:	183b      	adds	r3, r7, r0
 8004256:	183a      	adds	r2, r7, r0
 8004258:	8812      	ldrh	r2, [r2, #0]
 800425a:	4929      	ldr	r1, [pc, #164]	; (8004300 <TIM_OC4Init+0x104>)
 800425c:	400a      	ands	r2, r1
 800425e:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	b299      	uxth	r1, r3
 8004268:	183b      	adds	r3, r7, r0
 800426a:	183a      	adds	r2, r7, r0
 800426c:	8812      	ldrh	r2, [r2, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8004272:	0020      	movs	r0, r4
 8004274:	183b      	adds	r3, r7, r0
 8004276:	183a      	adds	r2, r7, r0
 8004278:	8812      	ldrh	r2, [r2, #0]
 800427a:	4922      	ldr	r1, [pc, #136]	; (8004304 <TIM_OC4Init+0x108>)
 800427c:	400a      	ands	r2, r1
 800427e:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	899b      	ldrh	r3, [r3, #12]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	b299      	uxth	r1, r3
 8004288:	183b      	adds	r3, r7, r0
 800428a:	183a      	adds	r2, r7, r0
 800428c:	8812      	ldrh	r2, [r2, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	885b      	ldrh	r3, [r3, #2]
 8004296:	031b      	lsls	r3, r3, #12
 8004298:	b299      	uxth	r1, r3
 800429a:	183b      	adds	r3, r7, r0
 800429c:	183a      	adds	r2, r7, r0
 800429e:	8812      	ldrh	r2, [r2, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	801a      	strh	r2, [r3, #0]
    
  if(TIMx == TIM1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <TIM_OC4Init+0x10c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10e      	bne.n	80042ca <TIM_OC4Init+0xce>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80042ac:	197b      	adds	r3, r7, r5
 80042ae:	197a      	adds	r2, r7, r5
 80042b0:	8812      	ldrh	r2, [r2, #0]
 80042b2:	4916      	ldr	r1, [pc, #88]	; (800430c <TIM_OC4Init+0x110>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	8a1b      	ldrh	r3, [r3, #16]
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	b299      	uxth	r1, r3
 80042c0:	197b      	adds	r3, r7, r5
 80042c2:	197a      	adds	r2, r7, r5
 80042c4:	8812      	ldrh	r2, [r2, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	220e      	movs	r2, #14
 80042ce:	18ba      	adds	r2, r7, r2
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	220c      	movs	r2, #12
 80042d8:	18ba      	adds	r2, r7, r2
 80042da:	8812      	ldrh	r2, [r2, #0]
 80042dc:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	220a      	movs	r2, #10
 80042ea:	18ba      	adds	r2, r7, r2
 80042ec:	8812      	ldrh	r2, [r2, #0]
 80042ee:	841a      	strh	r2, [r3, #32]
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b004      	add	sp, #16
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}
 80042f8:	ffffefff 	.word	0xffffefff
 80042fc:	ffff8fff 	.word	0xffff8fff
 8004300:	fffffcff 	.word	0xfffffcff
 8004304:	ffffdfff 	.word	0xffffdfff
 8004308:	40012c00 	.word	0x40012c00
 800430c:	ffffbfff 	.word	0xffffbfff

08004310 <TIM_SetCompare1>:
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
//  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <TIM_SetCompare2>:
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
//  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b091      	sub	sp, #68	; 0x44
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434e:	2300      	movs	r3, #0
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
 8004352:	2300      	movs	r3, #0
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	4393      	bics	r3, r2
 800435e:	001a      	movs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	4a4f      	ldr	r2, [pc, #316]	; (80044ac <USART_Init+0x16c>)
 800436e:	4013      	ands	r3, r2
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004378:	4313      	orrs	r3, r2
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004380:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	4a49      	ldr	r2, [pc, #292]	; (80044b0 <USART_Init+0x170>)
 800438c:	4013      	ands	r3, r2
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800439e:	4313      	orrs	r3, r2
 80043a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a2:	4313      	orrs	r3, r2
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043aa:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80043b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b4:	4a3f      	ldr	r2, [pc, #252]	; (80044b4 <USART_Init+0x174>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c0:	4313      	orrs	r3, r2
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80043ca:	240c      	movs	r4, #12
 80043cc:	193b      	adds	r3, r7, r4
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff f9bc 	bl	800374c <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <USART_Init+0x178>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d103      	bne.n	80043e4 <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80043dc:	193b      	adds	r3, r7, r4
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e2:	e015      	b.n	8004410 <USART_Init+0xd0>
  }
  else if (USARTx == USART2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a35      	ldr	r2, [pc, #212]	; (80044bc <USART_Init+0x17c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d104      	bne.n	80043f6 <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80043ec:	230c      	movs	r3, #12
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f4:	e00c      	b.n	8004410 <USART_Init+0xd0>
  }
   else if (USARTx == USART3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <USART_Init+0x180>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d104      	bne.n	8004408 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 80043fe:	230c      	movs	r3, #12
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
 8004406:	e003      	b.n	8004410 <USART_Init+0xd0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8004408:	230c      	movs	r3, #12
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	4013      	ands	r3, r2
 800441a:	d014      	beq.n	8004446 <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	005a      	lsls	r2, r3, #1
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0019      	movs	r1, r3
 8004426:	0010      	movs	r0, r2
 8004428:	f7fb fe76 	bl	8000118 <__udivsi3>
 800442c:	0003      	movs	r3, r0
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	005a      	lsls	r2, r3, #1
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0019      	movs	r1, r3
 800443a:	0010      	movs	r0, r2
 800443c:	f7fb fef2 	bl	8000224 <__aeabi_uidivmod>
 8004440:	000b      	movs	r3, r1
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	e010      	b.n	8004468 <USART_Init+0x128>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	0019      	movs	r1, r3
 800444c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800444e:	f7fb fe63 	bl	8000118 <__udivsi3>
 8004452:	0003      	movs	r3, r0
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	0011      	movs	r1, r2
 800445e:	0018      	movs	r0, r3
 8004460:	f7fb fee0 	bl	8000224 <__aeabi_uidivmod>
 8004464:	000b      	movs	r3, r1
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <USART_Init+0x13a>
  {
    divider++;
 8004474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004476:	3301      	adds	r3, #1
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4013      	ands	r3, r2
 8004484:	d00a      	beq.n	800449c <USART_Init+0x15c>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8004486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	2207      	movs	r2, #7
 800448c:	4013      	ands	r3, r2
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	4a0c      	ldr	r2, [pc, #48]	; (80044c4 <USART_Init+0x184>)
 8004494:	4013      	ands	r3, r2
 8004496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004498:	4313      	orrs	r3, r2
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 800449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	819a      	strh	r2, [r3, #12]
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b011      	add	sp, #68	; 0x44
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	ffffcfff 	.word	0xffffcfff
 80044b0:	ffffe9f3 	.word	0xffffe9f3
 80044b4:	fffffcff 	.word	0xfffffcff
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40004800 	.word	0x40004800
 80044c4:	0000fff0 	.word	0x0000fff0

080044c8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	000a      	movs	r2, r1
 80044d2:	1cfb      	adds	r3, r7, #3
 80044d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80044d6:	1cfb      	adds	r3, r7, #3
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80044ea:	e006      	b.n	80044fa <USART_Cmd+0x32>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	4393      	bics	r3, r2
 80044f4:	001a      	movs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b002      	add	sp, #8
 8004500:	bd80      	pop	{r7, pc}

08004502 <USART_ReceiveData>:
  * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800450e:	b29b      	uxth	r3, r3
 8004510:	05db      	lsls	r3, r3, #23
 8004512:	0ddb      	lsrs	r3, r3, #23
 8004514:	b29b      	uxth	r3, r3
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}

0800451e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b088      	sub	sp, #32
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	b29b      	uxth	r3, r3
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	b29b      	uxth	r3, r3
 8004548:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	4013      	ands	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8004552:	2201      	movs	r2, #1
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	409a      	lsls	r2, r3
 8004558:	0013      	movs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d103      	bne.n	800456a <USART_ITConfig+0x4c>
  {
    usartxbase += 0x04;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3304      	adds	r3, #4
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e005      	b.n	8004576 <USART_ITConfig+0x58>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b03      	cmp	r3, #3
 800456e:	d102      	bne.n	8004576 <USART_ITConfig+0x58>
  {
    usartxbase += 0x08;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	3308      	adds	r3, #8
 8004574:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d006      	beq.n	800458c <USART_ITConfig+0x6e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800458a:	e006      	b.n	800459a <USART_ITConfig+0x7c>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43d9      	mvns	r1, r3
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	46bd      	mov	sp, r7
 800459e:	b008      	add	sp, #32
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	2300      	movs	r3, #0
 80045b6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80045b8:	2313      	movs	r3, #19
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	4013      	ands	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80045d2:	2201      	movs	r2, #1
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	409a      	lsls	r2, r3
 80045d8:	0013      	movs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d105      	bne.n	80045ee <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4013      	ands	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e00d      	b.n	800460a <USART_GetITStatus+0x68>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d105      	bne.n	8004600 <USART_GetITStatus+0x5e>
  {
    itmask &= USARTx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4013      	ands	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e004      	b.n	800460a <USART_GetITStatus+0x68>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4013      	ands	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8004610:	2201      	movs	r2, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	409a      	lsls	r2, r3
 8004616:	0013      	movs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <USART_GetITStatus+0x98>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <USART_GetITStatus+0x98>
  {
    bitstatus = SET;
 8004630:	2313      	movs	r3, #19
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e003      	b.n	8004642 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800463a:	2313      	movs	r3, #19
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
 8004642:	2313      	movs	r3, #19
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b006      	add	sp, #24
 800464e:	bd80      	pop	{r7, pc}

08004650 <USART_ClearITPendingBit>:
  *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
  *           USART_RQR (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8004668:	2201      	movs	r2, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	409a      	lsls	r2, r3
 800466e:	0013      	movs	r3, r2
 8004670:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}

08004680 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 8004686:	f000 f9cd 	bl	8004a24 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 800468a:	1dfb      	adds	r3, r7, #7
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e04b      	b.n	800472a <Button_Init+0xaa>
		kpad[i].index = i;
 8004692:	1dfb      	adds	r3, r7, #7
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	492d      	ldr	r1, [pc, #180]	; (800474c <Button_Init+0xcc>)
 8004698:	0013      	movs	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	189b      	adds	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	18cb      	adds	r3, r1, r3
 80046a2:	330a      	adds	r3, #10
 80046a4:	1dfa      	adds	r2, r7, #7
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	701a      	strb	r2, [r3, #0]
		kpad[i].mode = BUTTON_MODE_LOGIC;
 80046aa:	1dfb      	adds	r3, r7, #7
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	4927      	ldr	r1, [pc, #156]	; (800474c <Button_Init+0xcc>)
 80046b0:	0013      	movs	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	18cb      	adds	r3, r1, r3
 80046ba:	330b      	adds	r3, #11
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 80046c0:	1dfb      	adds	r3, r7, #7
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	4921      	ldr	r1, [pc, #132]	; (800474c <Button_Init+0xcc>)
 80046c6:	0013      	movs	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	189b      	adds	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	18cb      	adds	r3, r1, r3
 80046d0:	3310      	adds	r3, #16
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <Button_Init+0xd0>)
 80046d4:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80046d6:	1dfb      	adds	r3, r7, #7
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <Button_Init+0xd4>)
 80046dc:	00d2      	lsls	r2, r2, #3
 80046de:	58d0      	ldr	r0, [r2, r3]
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <Button_Init+0xd4>)
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	3304      	adds	r3, #4
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	0019      	movs	r1, r3
 80046f0:	f7fe ff42 	bl	8003578 <GPIO_ReadInputDataBit>
 80046f4:	0003      	movs	r3, r0
 80046f6:	0019      	movs	r1, r3
 80046f8:	1dfb      	adds	r3, r7, #7
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <Button_Init+0xd4>)
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	18d3      	adds	r3, r2, r3
 8004702:	3306      	adds	r3, #6
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	4299      	cmp	r1, r3
 8004708:	d10a      	bne.n	8004720 <Button_Init+0xa0>
			kpad[i].sold = PIN_ACTIVE;
 800470a:	1dfb      	adds	r3, r7, #7
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	490f      	ldr	r1, [pc, #60]	; (800474c <Button_Init+0xcc>)
 8004710:	0013      	movs	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	189b      	adds	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	18cb      	adds	r3, r1, r3
 800471a:	3309      	adds	r3, #9
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8004720:	1dfb      	adds	r3, r7, #7
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	1dfb      	adds	r3, r7, #7
 8004726:	3201      	adds	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	1dfb      	adds	r3, r7, #7
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d9af      	bls.n	8004692 <Button_Init+0x12>
		}
	}

    TimerStart("", BUTTON_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScanEventHandler, NULL);
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <Button_Init+0xd8>)
 8004734:	4809      	ldr	r0, [pc, #36]	; (800475c <Button_Init+0xdc>)
 8004736:	2200      	movs	r2, #0
 8004738:	9200      	str	r2, [sp, #0]
 800473a:	22ff      	movs	r2, #255	; 0xff
 800473c:	2105      	movs	r1, #5
 800473e:	f002 fd79 	bl	8007234 <TimerStart>
}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	46bd      	mov	sp, r7
 8004746:	b002      	add	sp, #8
 8004748:	bd80      	pop	{r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	200000d4 	.word	0x200000d4
 8004750:	08004795 	.word	0x08004795
 8004754:	20000024 	.word	0x20000024
 8004758:	080049c5 	.word	0x080049c5
 800475c:	08009020 	.word	0x08009020

08004760 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_e buttonEvent,
    button_event_callback procbuttonEvent
) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	0002      	movs	r2, r0
 8004768:	6039      	str	r1, [r7, #0]
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	701a      	strb	r2, [r3, #0]
	if ((buttonEvent < BUTTON_EVENT_MAX) && (procbuttonEvent != NULL)) {
 800476e:	1dfb      	adds	r3, r7, #7
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d808      	bhi.n	8004788 <Button_RegisterEventCallback+0x28>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <Button_RegisterEventCallback+0x28>
        pEventCallbacks[buttonEvent] = procbuttonEvent;
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <Button_RegisterEventCallback+0x30>)
 8004782:	0092      	lsls	r2, r2, #2
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	50d1      	str	r1, [r2, r3]
	}
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b002      	add	sp, #8
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000110 	.word	0x20000110

08004794 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 80047a0:	240b      	movs	r4, #11
 80047a2:	193b      	adds	r3, r7, r4
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	7a92      	ldrb	r2, [r2, #10]
 80047a8:	701a      	strb	r2, [r3, #0]
    
    if (bt->mode != BUTTON_MODE_IDLE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	7adb      	ldrb	r3, [r3, #11]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d100      	bne.n	80047b4 <ButtonScanTypeEdge+0x20>
 80047b2:	e0fe      	b.n	80049b2 <ButtonScanTypeEdge+0x21e>
    {
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80047b4:	193b      	adds	r3, r7, r4
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	4b80      	ldr	r3, [pc, #512]	; (80049bc <ButtonScanTypeEdge+0x228>)
 80047ba:	00d2      	lsls	r2, r2, #3
 80047bc:	58d0      	ldr	r0, [r2, r3]
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	4a7e      	ldr	r2, [pc, #504]	; (80049bc <ButtonScanTypeEdge+0x228>)
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	3304      	adds	r3, #4
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	0019      	movs	r1, r3
 80047ce:	f7fe fed3 	bl	8003578 <GPIO_ReadInputDataBit>
 80047d2:	0003      	movs	r3, r0
 80047d4:	0019      	movs	r1, r3
 80047d6:	193b      	adds	r3, r7, r4
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	4a78      	ldr	r2, [pc, #480]	; (80049bc <ButtonScanTypeEdge+0x228>)
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	3306      	adds	r3, #6
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	4299      	cmp	r1, r3
 80047e6:	d10a      	bne.n	80047fe <ButtonScanTypeEdge+0x6a>
			if (bt->countActive != 0xFFU) {
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	7b5b      	ldrb	r3, [r3, #13]
 80047ec:	2bff      	cmp	r3, #255	; 0xff
 80047ee:	d013      	beq.n	8004818 <ButtonScanTypeEdge+0x84>
				bt->countActive++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	7b5b      	ldrb	r3, [r3, #13]
 80047f4:	3301      	adds	r3, #1
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	735a      	strb	r2, [r3, #13]
 80047fc:	e00c      	b.n	8004818 <ButtonScanTypeEdge+0x84>
			}
		}
		else {
			if (bt->countInactive != 0xFFU) {
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	7b1b      	ldrb	r3, [r3, #12]
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d005      	beq.n	8004812 <ButtonScanTypeEdge+0x7e>
				bt->countInactive++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	7b1b      	ldrb	r3, [r3, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	731a      	strb	r2, [r3, #12]
			}

			bt->countActive = 0;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	735a      	strb	r2, [r3, #13]
		}

		if (bt->countInactive >= TIMECNT_UNACTPRESS) {
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	7b1b      	ldrb	r3, [r3, #12]
 800481c:	2b09      	cmp	r3, #9
 800481e:	d95e      	bls.n	80048de <ButtonScanTypeEdge+0x14a>
			if (bt->sold == PIN_ACTIVE) {
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	7a5b      	ldrb	r3, [r3, #9]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11a      	bne.n	800485e <ButtonScanTypeEdge+0xca>
				bt->sold = PIN_UNACTIVE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	725a      	strb	r2, [r3, #9]

				if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_MODE_EDGE)) {
 800482e:	4b64      	ldr	r3, [pc, #400]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <ButtonScanTypeEdge+0xbe>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	7adb      	ldrb	r3, [r3, #11]
 800483a:	001a      	movs	r2, r3
 800483c:	2302      	movs	r3, #2
 800483e:	4013      	ands	r3, r2
 8004840:	d007      	beq.n	8004852 <ButtonScanTypeEdge+0xbe>
					pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 8004842:	4b5f      	ldr	r3, [pc, #380]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	220b      	movs	r2, #11
 8004848:	18ba      	adds	r2, r7, r2
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	2101      	movs	r1, #1
 800484e:	0010      	movs	r0, r2
 8004850:	4798      	blx	r3
				}

				bt->time = bt->countInactive;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	7b1b      	ldrb	r3, [r3, #12]
 8004856:	001a      	movs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e03f      	b.n	80048de <ButtonScanTypeEdge+0x14a>
			} else {
				bt->time++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	601a      	str	r2, [r3, #0]
				if (bt->time >= TIMECNT_BW2PRESS) {
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b4f      	cmp	r3, #79	; 0x4f
 800486e:	d936      	bls.n	80048de <ButtonScanTypeEdge+0x14a>
					if (bt->holdCnt != 0) {
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d014      	beq.n	80048a2 <ButtonScanTypeEdge+0x10e>
						if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_MODE_LOGIC)) {
 8004878:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d028      	beq.n	80048d2 <ButtonScanTypeEdge+0x13e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	7adb      	ldrb	r3, [r3, #11]
 8004884:	001a      	movs	r2, r3
 8004886:	2301      	movs	r3, #1
 8004888:	4013      	ands	r3, r2
 800488a:	d022      	beq.n	80048d2 <ButtonScanTypeEdge+0x13e>
							pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	b299      	uxth	r1, r3
 8004896:	230b      	movs	r3, #11
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	0018      	movs	r0, r3
 800489e:	4790      	blx	r2
 80048a0:	e017      	b.n	80048d2 <ButtonScanTypeEdge+0x13e>
						}
					}
					else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_MODE_LOGIC) \
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d013      	beq.n	80048d2 <ButtonScanTypeEdge+0x13e>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	7adb      	ldrb	r3, [r3, #11]
 80048ae:	001a      	movs	r2, r3
 80048b0:	2301      	movs	r3, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <ButtonScanTypeEdge+0x13e>
							 && bt->pressCnt != 0)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	7a1b      	ldrb	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <ButtonScanTypeEdge+0x13e>
					{
						pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	7a12      	ldrb	r2, [r2, #8]
 80048c6:	b291      	uxth	r1, r2
 80048c8:	220b      	movs	r2, #11
 80048ca:	18ba      	adds	r2, r7, r2
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	0010      	movs	r0, r2
 80048d0:	4798      	blx	r3
					}

					bt->holdCnt = 0;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]
					bt->pressCnt = 0;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (bt->countActive >= TIMECNT_ACTPRESS) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	7b5b      	ldrb	r3, [r3, #13]
 80048e2:	2b09      	cmp	r3, #9
 80048e4:	d965      	bls.n	80049b2 <ButtonScanTypeEdge+0x21e>
			/* reset count inactive */
			bt->countInactive = 0;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	731a      	strb	r2, [r3, #12]

			if (bt->sold == PIN_UNACTIVE) {
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	7a5b      	ldrb	r3, [r3, #9]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d120      	bne.n	8004936 <ButtonScanTypeEdge+0x1a2>
				bt->sold = PIN_ACTIVE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	725a      	strb	r2, [r3, #9]

				if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_MODE_EDGE)) {
 80048fa:	4b31      	ldr	r3, [pc, #196]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <ButtonScanTypeEdge+0x18a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	7adb      	ldrb	r3, [r3, #11]
 8004906:	001a      	movs	r2, r3
 8004908:	2302      	movs	r3, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d007      	beq.n	800491e <ButtonScanTypeEdge+0x18a>
					pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 800490e:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	220b      	movs	r2, #11
 8004914:	18ba      	adds	r2, r7, r2
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	0010      	movs	r0, r2
 800491c:	4798      	blx	r3
				}

				bt->time = bt->countActive;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	7b5b      	ldrb	r3, [r3, #13]
 8004922:	001a      	movs	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]
				bt->pressCnt++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	7a1b      	ldrb	r3, [r3, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	721a      	strb	r2, [r3, #8]
					}
				}
			}
		}
    }
}
 8004934:	e03d      	b.n	80049b2 <ButtonScanTypeEdge+0x21e>
				bt->time++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
				if (bt->time >= TIMECNT_IS_HOLD) {
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b77      	cmp	r3, #119	; 0x77
 8004946:	d934      	bls.n	80049b2 <ButtonScanTypeEdge+0x21e>
					bt->pressCnt = 0;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	721a      	strb	r2, [r3, #8]
					bt->holdCnt = bt->time;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]
					if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b78      	cmp	r3, #120	; 0x78
 800495c:	d015      	beq.n	800498a <ButtonScanTypeEdge+0x1f6>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2bc8      	cmp	r3, #200	; 0xc8
 8004964:	d011      	beq.n	800498a <ButtonScanTypeEdge+0x1f6>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	2396      	movs	r3, #150	; 0x96
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	429a      	cmp	r2, r3
 8004970:	d00b      	beq.n	800498a <ButtonScanTypeEdge+0x1f6>
						(bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685a      	ldr	r2, [r3, #4]
					if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8004976:	23fa      	movs	r3, #250	; 0xfa
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	429a      	cmp	r2, r3
 800497c:	d005      	beq.n	800498a <ButtonScanTypeEdge+0x1f6>
						(bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	23fa      	movs	r3, #250	; 0xfa
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	429a      	cmp	r2, r3
 8004988:	d113      	bne.n	80049b2 <ButtonScanTypeEdge+0x21e>
						if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_MODE_LOGIC)) {
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00f      	beq.n	80049b2 <ButtonScanTypeEdge+0x21e>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	7adb      	ldrb	r3, [r3, #11]
 8004996:	001a      	movs	r2, r3
 8004998:	2301      	movs	r3, #1
 800499a:	4013      	ands	r3, r2
 800499c:	d009      	beq.n	80049b2 <ButtonScanTypeEdge+0x21e>
							pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <ButtonScanTypeEdge+0x22c>)
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	b299      	uxth	r1, r3
 80049a8:	230b      	movs	r3, #11
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	0018      	movs	r0, r3
 80049b0:	4790      	blx	r2
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b005      	add	sp, #20
 80049b8:	bd90      	pop	{r4, r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20000024 	.word	0x20000024
 80049c0:	20000110 	.word	0x20000110

080049c4 <ButtonScanEventHandler>:
 * @retval None
 */
void
ButtonScanEventHandler(
    void *arg
) {
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 80049cc:	230f      	movs	r3, #15
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e01a      	b.n	8004a0c <ButtonScanEventHandler+0x48>
        kpad[i].scanBtnFunc(&kpad[i]);
 80049d6:	200f      	movs	r0, #15
 80049d8:	183b      	adds	r3, r7, r0
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	4910      	ldr	r1, [pc, #64]	; (8004a20 <ButtonScanEventHandler+0x5c>)
 80049de:	0013      	movs	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18cb      	adds	r3, r1, r3
 80049e8:	3310      	adds	r3, #16
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	0004      	movs	r4, r0
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	0013      	movs	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <ButtonScanEventHandler+0x5c>)
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	0018      	movs	r0, r3
 8004a00:	4788      	blx	r1
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8004a02:	193b      	adds	r3, r7, r4
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	3201      	adds	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	230f      	movs	r3, #15
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d9df      	bls.n	80049d6 <ButtonScanEventHandler+0x12>
    }
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b005      	add	sp, #20
 8004a1e:	bd90      	pop	{r4, r7, pc}
 8004a20:	200000d4 	.word	0x200000d4

08004a24 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	2101      	movs	r1, #1
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7ff f807 	bl	8003a44 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	03db      	lsls	r3, r3, #15
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7ff f801 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004a42:	003b      	movs	r3, r7
 8004a44:	2200      	movs	r2, #0
 8004a46:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004a48:	003b      	movs	r3, r7
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8004a4e:	003b      	movs	r3, r7
 8004a50:	2201      	movs	r2, #1
 8004a52:	71da      	strb	r2, [r3, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004a54:	003b      	movs	r3, r7
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	0212      	lsls	r2, r2, #8
 8004a5a:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004a5c:	003a      	movs	r2, r7
 8004a5e:	2390      	movs	r3, #144	; 0x90
 8004a60:	05db      	lsls	r3, r3, #23
 8004a62:	0011      	movs	r1, r2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f7fe fcf3 	bl	8003450 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8004a6a:	003b      	movs	r3, r7
 8004a6c:	22c0      	movs	r2, #192	; 0xc0
 8004a6e:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004a70:	003b      	movs	r3, r7
 8004a72:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <BTNGPIO_Init+0x60>)
 8004a74:	0019      	movs	r1, r3
 8004a76:	0010      	movs	r0, r2
 8004a78:	f7fe fcea 	bl	8003450 <GPIO_Init>
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	48001400 	.word	0x48001400

08004a88 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <EventButton_Init+0x38>)
 8004a8e:	0019      	movs	r1, r3
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7ff fe65 	bl	8004760 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <EventButton_Init+0x3c>)
 8004a98:	0019      	movs	r1, r3
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f7ff fe60 	bl	8004760 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <EventButton_Init+0x40>)
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	f7ff fe5b 	bl	8004760 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <EventButton_Init+0x44>)
 8004aac:	0019      	movs	r1, r3
 8004aae:	2003      	movs	r0, #3
 8004ab0:	f7ff fe56 	bl	8004760 <Button_RegisterEventCallback>

    Button_Init();
 8004ab4:	f7ff fde4 	bl	8004680 <Button_Init>
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004b17 	.word	0x08004b17
 8004ac8:	08004bab 	.word	0x08004bab
 8004acc:	08004c35 	.word	0x08004c35

08004ad0 <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	1c0a      	adds	r2, r1, #0
 8004ae0:	801a      	strh	r2, [r3, #0]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 8004ae2:	1d3b      	adds	r3, r7, #4
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <ButtonProcessEventEdge+0x26>
    {
    	event = EVENT_OF_BUTTON_BACK_PRESS_EDGE_RISING + btnID;
 8004aea:	230f      	movs	r3, #15
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	1dfa      	adds	r2, r7, #7
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e005      	b.n	8004b02 <ButtonProcessEventEdge+0x32>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_BACK_PRESS_EDGE_FALLING + btnID;
 8004af6:	230f      	movs	r3, #15
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	1dfa      	adds	r2, r7, #7
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	3203      	adds	r2, #3
 8004b00:	701a      	strb	r2, [r3, #0]
    }

    EventSchedulerAdd(event);
 8004b02:	230f      	movs	r3, #15
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f002 faa5 	bl	8007058 <EventSchedulerAdd>
}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t times
) {
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	1c0a      	adds	r2, r1, #0
 8004b26:	801a      	strh	r2, [r3, #0]
	uint8_t event;

	if (times == 1)
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <ButtonProcessEventPress+0x28>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_LOGIC + btnID;
 8004b30:	230f      	movs	r3, #15
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	1dfa      	adds	r2, r7, #7
 8004b36:	7812      	ldrb	r2, [r2, #0]
 8004b38:	3206      	adds	r2, #6
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e02a      	b.n	8004b94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 2)
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d106      	bne.n	8004b54 <ButtonProcessEventPress+0x3e>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_2_TIMES + btnID;
 8004b46:	230f      	movs	r3, #15
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	1dfa      	adds	r2, r7, #7
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	3209      	adds	r2, #9
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e01f      	b.n	8004b94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 3)
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d106      	bne.n	8004b6a <ButtonProcessEventPress+0x54>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_3_TIMES + btnID;
 8004b5c:	230f      	movs	r3, #15
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	1dfa      	adds	r2, r7, #7
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	320c      	adds	r2, #12
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	e014      	b.n	8004b94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 4)
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d106      	bne.n	8004b80 <ButtonProcessEventPress+0x6a>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_4_TIMES + btnID;
 8004b72:	230f      	movs	r3, #15
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	1dfa      	adds	r2, r7, #7
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	320f      	adds	r2, #15
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e009      	b.n	8004b94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 5)
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <ButtonProcessEventPress+0x8c>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_5_TIMES + btnID;
 8004b88:	230f      	movs	r3, #15
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	1dfa      	adds	r2, r7, #7
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	3212      	adds	r2, #18
 8004b92:	701a      	strb	r2, [r3, #0]
	}
	else return;

    EventSchedulerAdd(event);
 8004b94:	230f      	movs	r3, #15
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f002 fa5c 	bl	8007058 <EventSchedulerAdd>
 8004ba0:	e000      	b.n	8004ba4 <ButtonProcessEventPress+0x8e>
	else return;
 8004ba2:	46c0      	nop			; (mov r8, r8)
}
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b004      	add	sp, #16
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	1dfb      	adds	r3, r7, #7
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	1c0a      	adds	r2, r1, #0
 8004bba:	801a      	strh	r2, [r3, #0]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	23fa      	movs	r3, #250	; 0xfa
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d106      	bne.n	8004bd6 <ButtonProcessEventHold+0x2c>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_10S + btnID;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	1dfa      	adds	r2, r7, #7
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	321e      	adds	r2, #30
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e023      	b.n	8004c1e <ButtonProcessEventHold+0x74>
	}
	else if (time == TIMECNT_HOLD5S)
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	881a      	ldrh	r2, [r3, #0]
 8004bda:	23fa      	movs	r3, #250	; 0xfa
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d106      	bne.n	8004bf0 <ButtonProcessEventHold+0x46>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_5S + btnID;
 8004be2:	230f      	movs	r3, #15
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	1dfa      	adds	r2, r7, #7
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	321b      	adds	r2, #27
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e016      	b.n	8004c1e <ButtonProcessEventHold+0x74>
	}
	else if (time == TIMECNT_HOLD3S)
 8004bf0:	1d3b      	adds	r3, r7, #4
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	2396      	movs	r3, #150	; 0x96
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d106      	bne.n	8004c0a <ButtonProcessEventHold+0x60>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_3S + btnID;
 8004bfc:	230f      	movs	r3, #15
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	1dfa      	adds	r2, r7, #7
 8004c02:	7812      	ldrb	r2, [r2, #0]
 8004c04:	3218      	adds	r2, #24
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e009      	b.n	8004c1e <ButtonProcessEventHold+0x74>
	}
	else if (time == TIMECNT_HOLD1S)
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	2bc8      	cmp	r3, #200	; 0xc8
 8004c10:	d10c      	bne.n	8004c2c <ButtonProcessEventHold+0x82>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_1S + btnID;
 8004c12:	230f      	movs	r3, #15
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	1dfa      	adds	r2, r7, #7
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	3215      	adds	r2, #21
 8004c1c:	701a      	strb	r2, [r3, #0]
	}
	else return;

	EventSchedulerAdd(event);
 8004c1e:	230f      	movs	r3, #15
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f002 fa17 	bl	8007058 <EventSchedulerAdd>
 8004c2a:	e000      	b.n	8004c2e <ButtonProcessEventHold+0x84>
	else return;
 8004c2c:	46c0      	nop			; (mov r8, r8)
}
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b004      	add	sp, #16
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	1dfb      	adds	r3, r7, #7
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	1c0a      	adds	r2, r1, #0
 8004c44:	801a      	strh	r2, [r3, #0]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	23fa      	movs	r3, #250	; 0xfa
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d306      	bcc.n	8004c60 <ButtonProcessEventRelease+0x2c>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_10S + btnID;
 8004c52:	230f      	movs	r3, #15
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	1dfa      	adds	r2, r7, #7
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	322a      	adds	r2, #42	; 0x2a
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e023      	b.n	8004ca8 <ButtonProcessEventRelease+0x74>
	}
	else if (time >= TIMECNT_HOLD5S)
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	881a      	ldrh	r2, [r3, #0]
 8004c64:	23fa      	movs	r3, #250	; 0xfa
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d306      	bcc.n	8004c7a <ButtonProcessEventRelease+0x46>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_5S + btnID;
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	1dfa      	adds	r2, r7, #7
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	3227      	adds	r2, #39	; 0x27
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e016      	b.n	8004ca8 <ButtonProcessEventRelease+0x74>
	}
	else if (time >= TIMECNT_HOLD3S)
 8004c7a:	1d3b      	adds	r3, r7, #4
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	2396      	movs	r3, #150	; 0x96
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d306      	bcc.n	8004c94 <ButtonProcessEventRelease+0x60>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_3S + btnID;
 8004c86:	230f      	movs	r3, #15
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	1dfa      	adds	r2, r7, #7
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	3224      	adds	r2, #36	; 0x24
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e009      	b.n	8004ca8 <ButtonProcessEventRelease+0x74>
	}
	else if (time >= TIMECNT_HOLD1S)
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	2bc7      	cmp	r3, #199	; 0xc7
 8004c9a:	d90c      	bls.n	8004cb6 <ButtonProcessEventRelease+0x82>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_1S + btnID;
 8004c9c:	230f      	movs	r3, #15
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	1dfa      	adds	r2, r7, #7
 8004ca2:	7812      	ldrb	r2, [r2, #0]
 8004ca4:	3221      	adds	r2, #33	; 0x21
 8004ca6:	701a      	strb	r2, [r3, #0]
	}
	else return;

	EventSchedulerAdd(event);
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f002 f9d2 	bl	8007058 <EventSchedulerAdd>
 8004cb4:	e000      	b.n	8004cb8 <ButtonProcessEventRelease+0x84>
	else return;
 8004cb6:	46c0      	nop			; (mov r8, r8)
}
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b004      	add	sp, #16
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <BuzzerControl_Init>:
 * @brief  Initialize module buzzer
 * @param  None
 * @retval None
 */
void
BuzzerControl_Init(void) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
	BUZZTIM_InitTimer();
 8004cc4:	f000 f80a 	bl	8004cdc <BUZZTIM_InitTimer>
	BUZZTIM_InitPWMChannel();
 8004cc8:	f000 f82e 	bl	8004d28 <BUZZTIM_InitPWMChannel>
	bBuzzInit = 1;
 8004ccc:	4b02      	ldr	r3, [pc, #8]	; (8004cd8 <BuzzerControl_Init+0x18>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000120 	.word	0x20000120

08004cdc <BUZZTIM_InitTimer>:
 * @param  [prescale]
 *         [period]
 * @retval None
 */
static void
BUZZTIM_InitTimer(void) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TimeBaseStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f7fe fecb 	bl	8003a84 <RCC_APB2PeriphClockCmd>

	/* Time base configuration */
    TimeBaseStructure.TIM_Prescaler = BUZZ_TIMER_PRESCALE - 1;
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	222f      	movs	r2, #47	; 0x2f
 8004cf2:	801a      	strh	r2, [r3, #0]
    TimeBaseStructure.TIM_Period = BUZZ_TIMER_PERIOD - 1;
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	22c7      	movs	r2, #199	; 0xc7
 8004cf8:	605a      	str	r2, [r3, #4]
    TimeBaseStructure.TIM_ClockDivision = 0;
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	811a      	strh	r2, [r3, #8]
    TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004d00:	1d3b      	adds	r3, r7, #4
 8004d02:	2200      	movs	r2, #0
 8004d04:	805a      	strh	r2, [r3, #2]
    TIM_TimeBaseInit(TIM1, &TimeBaseStructure);
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <BUZZTIM_InitTimer+0x48>)
 8004d0a:	0019      	movs	r1, r3
 8004d0c:	0010      	movs	r0, r2
 8004d0e:	f7ff f837 	bl	8003d80 <TIM_TimeBaseInit>

    /* TIM1 enable counter */
    TIM_Cmd(TIM1, ENABLE);
 8004d12:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <BUZZTIM_InitTimer+0x48>)
 8004d14:	2101      	movs	r1, #1
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7ff f8b0 	bl	8003e7c <TIM_Cmd>
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40012c00 	.word	0x40012c00

08004d28 <BUZZTIM_InitPWMChannel>:
 * @brief  None
 * @param  None
 * @retval None
 */
static void
BUZZTIM_InitPWMChannel(void) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    TIM_OCInitTypeDef TIM_OCInitStructure;

    /* GPIO Peripheral clock enable */
    RCC_AHBPeriphClockCmd(BUZZER_GPIO_CLK, ENABLE);
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	2101      	movs	r1, #1
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fe fe85 	bl	8003a44 <RCC_AHBPeriphClockCmd>

    /* Configure pin in output push-pull mode */
    GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8004d3a:	2118      	movs	r1, #24
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	0112      	lsls	r2, r2, #4
 8004d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	2203      	movs	r2, #3
 8004d48:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	2200      	movs	r2, #0
 8004d54:	719a      	strb	r2, [r3, #6]
    GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8004d56:	187a      	adds	r2, r7, r1
 8004d58:	2390      	movs	r3, #144	; 0x90
 8004d5a:	05db      	lsls	r3, r3, #23
 8004d5c:	0011      	movs	r1, r2
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7fe fb76 	bl	8003450 <GPIO_Init>

    GPIO_PinAFConfig(BUZZER_GPIO_PORT, BUZZER_GPIO_SOURCE, BUZZER_GPIO_AF);
 8004d64:	2390      	movs	r3, #144	; 0x90
 8004d66:	05db      	lsls	r3, r3, #23
 8004d68:	2202      	movs	r2, #2
 8004d6a:	210b      	movs	r1, #11
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fe fc44 	bl	80035fa <GPIO_PinAFConfig>

    /* Output Compare Timing Mode configuration: Channel 4 */
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; /* PWM1 Mode */
 8004d72:	1d3b      	adds	r3, r7, #4
 8004d74:	2260      	movs	r2, #96	; 0x60
 8004d76:	801a      	strh	r2, [r3, #0]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8004d78:	1d3b      	adds	r3, r7, #4
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	805a      	strh	r2, [r3, #2]
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	2204      	movs	r2, #4
 8004d82:	809a      	strh	r2, [r3, #4]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004d84:	1d3b      	adds	r3, r7, #4
 8004d86:	2200      	movs	r2, #0
 8004d88:	819a      	strh	r2, [r3, #12]
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	81da      	strh	r2, [r3, #14]
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	2280      	movs	r2, #128	; 0x80
 8004d94:	0052      	lsls	r2, r2, #1
 8004d96:	821a      	strh	r2, [r3, #16]
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	825a      	strh	r2, [r3, #18]
    TIM_OCInitStructure.TIM_Pulse = 0;
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]

    TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8004da4:	1d3b      	adds	r3, r7, #4
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <BUZZTIM_InitPWMChannel+0x9c>)
 8004da8:	0019      	movs	r1, r3
 8004daa:	0010      	movs	r0, r2
 8004dac:	f7ff fa26 	bl	80041fc <TIM_OC4Init>

    TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <BUZZTIM_InitPWMChannel+0x9c>)
 8004db2:	2101      	movs	r1, #1
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff f881 	bl	8003ebc <TIM_CtrlPWMOutputs>
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b008      	add	sp, #32
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	40012c00 	.word	0x40012c00

08004dc8 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(uint16_t x,uint16_t y,uint16_t fc, uint16_t bc, uint8_t num,uint8_t size,uint8_t mode)
{
 8004dc8:	b5b0      	push	{r4, r5, r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	0005      	movs	r5, r0
 8004dd0:	000c      	movs	r4, r1
 8004dd2:	0010      	movs	r0, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	1dbb      	adds	r3, r7, #6
 8004dd8:	1c2a      	adds	r2, r5, #0
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	1d3b      	adds	r3, r7, #4
 8004dde:	1c22      	adds	r2, r4, #0
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	1cbb      	adds	r3, r7, #2
 8004de4:	1c02      	adds	r2, r0, #0
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	003b      	movs	r3, r7
 8004dea:	1c0a      	adds	r2, r1, #0
 8004dec:	801a      	strh	r2, [r3, #0]
    uint8_t temp;
    uint8_t pos,t;
	uint16_t colortemp=POINT_COLOR;
 8004dee:	230a      	movs	r3, #10
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	4a88      	ldr	r2, [pc, #544]	; (8005014 <LCD_ShowChar+0x24c>)
 8004df4:	8812      	ldrh	r2, [r2, #0]
 8004df6:	801a      	strh	r2, [r3, #0]

	num=num-' ';
 8004df8:	2220      	movs	r2, #32
 8004dfa:	18bb      	adds	r3, r7, r2
 8004dfc:	18ba      	adds	r2, r7, r2
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	3a20      	subs	r2, #32
 8004e02:	701a      	strb	r2, [r3, #0]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);
 8004e04:	2124      	movs	r1, #36	; 0x24
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	1dbb      	adds	r3, r7, #6
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	18d3      	adds	r3, r2, r3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29c      	uxth	r4, r3
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	1d3b      	adds	r3, r7, #4
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	18d3      	adds	r3, r2, r3
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	8819      	ldrh	r1, [r3, #0]
 8004e32:	1dbb      	adds	r3, r7, #6
 8004e34:	8818      	ldrh	r0, [r3, #0]
 8004e36:	0013      	movs	r3, r2
 8004e38:	0022      	movs	r2, r4
 8004e3a:	f001 f825 	bl	8005e88 <LCD_SetWindows>
	if(!mode)
 8004e3e:	2328      	movs	r3, #40	; 0x28
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d162      	bne.n	8004f0e <LCD_ShowChar+0x146>
	{
		for(pos=0;pos<size;pos++)
 8004e48:	230e      	movs	r3, #14
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e054      	b.n	8004efc <LCD_ShowChar+0x134>
		{
			if(size==12)temp=asc2_1206[num][pos];
 8004e52:	2324      	movs	r3, #36	; 0x24
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d110      	bne.n	8004e7e <LCD_ShowChar+0xb6>
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	230e      	movs	r3, #14
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	7818      	ldrb	r0, [r3, #0]
 8004e68:	230f      	movs	r3, #15
 8004e6a:	18f9      	adds	r1, r7, r3
 8004e6c:	4c6a      	ldr	r4, [pc, #424]	; (8005018 <LCD_ShowChar+0x250>)
 8004e6e:	0013      	movs	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	189b      	adds	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	18e3      	adds	r3, r4, r3
 8004e78:	5c1b      	ldrb	r3, [r3, r0]
 8004e7a:	700b      	strb	r3, [r1, #0]
 8004e7c:	e00c      	b.n	8004e98 <LCD_ShowChar+0xd0>
			else temp=asc2_1608[num][pos];
 8004e7e:	2320      	movs	r3, #32
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	7819      	ldrb	r1, [r3, #0]
 8004e84:	230e      	movs	r3, #14
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	230f      	movs	r3, #15
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	4863      	ldr	r0, [pc, #396]	; (800501c <LCD_ShowChar+0x254>)
 8004e90:	0109      	lsls	r1, r1, #4
 8004e92:	1841      	adds	r1, r0, r1
 8004e94:	5c8a      	ldrb	r2, [r1, r2]
 8004e96:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004e98:	230d      	movs	r3, #13
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e01c      	b.n	8004edc <LCD_ShowChar+0x114>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8004ea2:	230f      	movs	r3, #15
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d005      	beq.n	8004eba <LCD_ShowChar+0xf2>
 8004eae:	1cbb      	adds	r3, r7, #2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 fd8c 	bl	80059d0 <Lcd_WriteData_16Bit>
 8004eb8:	e004      	b.n	8004ec4 <LCD_ShowChar+0xfc>
				else Lcd_WriteData_16Bit(bc);
 8004eba:	003b      	movs	r3, r7
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 fd86 	bl	80059d0 <Lcd_WriteData_16Bit>
				temp>>=1;
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	18bb      	adds	r3, r7, r2
 8004ec8:	18ba      	adds	r2, r7, r2
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	0852      	lsrs	r2, r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004ed0:	210d      	movs	r1, #13
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	781a      	ldrb	r2, [r3, #0]
 8004ed6:	187b      	adds	r3, r7, r1
 8004ed8:	3201      	adds	r2, #1
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	2324      	movs	r3, #36	; 0x24
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	220d      	movs	r2, #13
 8004ee8:	18ba      	adds	r2, r7, r2
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3d8      	bcc.n	8004ea2 <LCD_ShowChar+0xda>
		for(pos=0;pos<size;pos++)
 8004ef0:	210e      	movs	r1, #14
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	3201      	adds	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	230e      	movs	r3, #14
 8004efe:	18fa      	adds	r2, r7, r3
 8004f00:	2324      	movs	r3, #36	; 0x24
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3a2      	bcc.n	8004e52 <LCD_ShowChar+0x8a>
 8004f0c:	e06d      	b.n	8004fea <LCD_ShowChar+0x222>
		    }

		}
	}else
	{
		for(pos=0;pos<size;pos++)
 8004f0e:	230e      	movs	r3, #14
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e060      	b.n	8004fda <LCD_ShowChar+0x212>
		{
			if(size==12)temp=asc2_1206[num][pos];
 8004f18:	2324      	movs	r3, #36	; 0x24
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d110      	bne.n	8004f44 <LCD_ShowChar+0x17c>
 8004f22:	2320      	movs	r3, #32
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	230e      	movs	r3, #14
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	7818      	ldrb	r0, [r3, #0]
 8004f2e:	230f      	movs	r3, #15
 8004f30:	18f9      	adds	r1, r7, r3
 8004f32:	4c39      	ldr	r4, [pc, #228]	; (8005018 <LCD_ShowChar+0x250>)
 8004f34:	0013      	movs	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	18e3      	adds	r3, r4, r3
 8004f3e:	5c1b      	ldrb	r3, [r3, r0]
 8004f40:	700b      	strb	r3, [r1, #0]
 8004f42:	e00c      	b.n	8004f5e <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][pos];
 8004f44:	2320      	movs	r3, #32
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	7819      	ldrb	r1, [r3, #0]
 8004f4a:	230e      	movs	r3, #14
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	4831      	ldr	r0, [pc, #196]	; (800501c <LCD_ShowChar+0x254>)
 8004f56:	0109      	lsls	r1, r1, #4
 8004f58:	1841      	adds	r1, r0, r1
 8004f5a:	5c8a      	ldrb	r2, [r1, r2]
 8004f5c:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004f5e:	230d      	movs	r3, #13
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e028      	b.n	8004fba <LCD_ShowChar+0x1f2>
		    {
				POINT_COLOR=fc;
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <LCD_ShowChar+0x24c>)
 8004f6a:	1cba      	adds	r2, r7, #2
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	801a      	strh	r2, [r3, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d012      	beq.n	8004fa2 <LCD_ShowChar+0x1da>
 8004f7c:	230d      	movs	r3, #13
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	1dbb      	adds	r3, r7, #6
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	18d3      	adds	r3, r2, r3
 8004f8a:	b298      	uxth	r0, r3
 8004f8c:	230e      	movs	r3, #14
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	18d3      	adds	r3, r2, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	f000 fd4d 	bl	8005a3c <LCD_DrawPoint>
		        temp>>=1;
 8004fa2:	220f      	movs	r2, #15
 8004fa4:	18bb      	adds	r3, r7, r2
 8004fa6:	18ba      	adds	r2, r7, r2
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	0852      	lsrs	r2, r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004fae:	210d      	movs	r1, #13
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	3201      	adds	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	2324      	movs	r3, #36	; 0x24
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	220d      	movs	r2, #13
 8004fc6:	18ba      	adds	r2, r7, r2
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3cc      	bcc.n	8004f68 <LCD_ShowChar+0x1a0>
		for(pos=0;pos<size;pos++)
 8004fce:	210e      	movs	r1, #14
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	3201      	adds	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	230e      	movs	r3, #14
 8004fdc:	18fa      	adds	r2, r7, r3
 8004fde:	2324      	movs	r3, #36	; 0x24
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d396      	bcc.n	8004f18 <LCD_ShowChar+0x150>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <LCD_ShowChar+0x24c>)
 8004fec:	220a      	movs	r2, #10
 8004fee:	18ba      	adds	r2, r7, r2
 8004ff0:	8812      	ldrh	r2, [r2, #0]
 8004ff2:	801a      	strh	r2, [r3, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <LCD_ShowChar+0x258>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <LCD_ShowChar+0x258>)
 8004ffe:	885b      	ldrh	r3, [r3, #2]
 8005000:	3b01      	subs	r3, #1
 8005002:	b29b      	uxth	r3, r3
 8005004:	2100      	movs	r1, #0
 8005006:	2000      	movs	r0, #0
 8005008:	f000 ff3e 	bl	8005e88 <LCD_SetWindows>
}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b004      	add	sp, #16
 8005012:	bdb0      	pop	{r4, r5, r7, pc}
 8005014:	20000132 	.word	0x20000132
 8005018:	080090c0 	.word	0x080090c0
 800501c:	08009534 	.word	0x08009534
 8005020:	20000124 	.word	0x20000124

08005024 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont16(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
 8005024:	b5b0      	push	{r4, r5, r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	0005      	movs	r5, r0
 800502c:	000c      	movs	r4, r1
 800502e:	0010      	movs	r0, r2
 8005030:	0019      	movs	r1, r3
 8005032:	1dbb      	adds	r3, r7, #6
 8005034:	1c2a      	adds	r2, r5, #0
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	1d3b      	adds	r3, r7, #4
 800503a:	1c22      	adds	r2, r4, #0
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	1cbb      	adds	r3, r7, #2
 8005040:	1c02      	adds	r2, r0, #0
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	003b      	movs	r3, r7
 8005046:	1c0a      	adds	r2, r1, #0
 8005048:	801a      	strh	r2, [r3, #0]
	uint8_t i,j;
	uint16_t k;
	uint16_t HZnum;
	uint16_t x0 = x;
 800504a:	230a      	movs	r3, #10
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	1dba      	adds	r2, r7, #6
 8005050:	8812      	ldrh	r2, [r2, #0]
 8005052:	801a      	strh	r2, [r3, #0]
	HZnum = sizeof(tfont16)/sizeof(typFNT_GB16);
 8005054:	2308      	movs	r3, #8
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	223e      	movs	r2, #62	; 0x3e
 800505a:	801a      	strh	r2, [r3, #0]

	for (k=0;k<HZnum;k++)
 800505c:	230c      	movs	r3, #12
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	2200      	movs	r2, #0
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e0b8      	b.n	80051d8 <GUI_DrawFont16+0x1b4>
	{
	    if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8005066:	200c      	movs	r0, #12
 8005068:	183b      	adds	r3, r7, r0
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	4967      	ldr	r1, [pc, #412]	; (800520c <GUI_DrawFont16+0x1e8>)
 800506e:	0013      	movs	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	189b      	adds	r3, r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	5c5a      	ldrb	r2, [r3, r1]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d000      	beq.n	8005082 <GUI_DrawFont16+0x5e>
 8005080:	e0a3      	b.n	80051ca <GUI_DrawFont16+0x1a6>
 8005082:	183b      	adds	r3, r7, r0
 8005084:	881a      	ldrh	r2, [r3, #0]
 8005086:	4961      	ldr	r1, [pc, #388]	; (800520c <GUI_DrawFont16+0x1e8>)
 8005088:	0013      	movs	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	189b      	adds	r3, r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	18cb      	adds	r3, r1, r3
 8005092:	3301      	adds	r3, #1
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	3301      	adds	r3, #1
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d000      	beq.n	80050a2 <GUI_DrawFont16+0x7e>
 80050a0:	e093      	b.n	80051ca <GUI_DrawFont16+0x1a6>
	    {
	    	LCD_SetWindows(x,y,x+16-1,y+16-1);
 80050a2:	1dbb      	adds	r3, r7, #6
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	330f      	adds	r3, #15
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	330f      	adds	r3, #15
 80050b0:	b29c      	uxth	r4, r3
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	8819      	ldrh	r1, [r3, #0]
 80050b6:	1dbb      	adds	r3, r7, #6
 80050b8:	8818      	ldrh	r0, [r3, #0]
 80050ba:	0023      	movs	r3, r4
 80050bc:	f000 fee4 	bl	8005e88 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 80050c0:	230f      	movs	r3, #15
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e079      	b.n	80051be <GUI_DrawFont16+0x19a>
		    {
				for(j=0;j<8;j++)
 80050ca:	230e      	movs	r3, #14
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e069      	b.n	80051a8 <GUI_DrawFont16+0x184>
		    	{
					if(!mode)
 80050d4:	2324      	movs	r3, #36	; 0x24
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d123      	bne.n	8005126 <GUI_DrawFont16+0x102>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80050de:	230c      	movs	r3, #12
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	230f      	movs	r3, #15
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	7819      	ldrb	r1, [r3, #0]
 80050ea:	4848      	ldr	r0, [pc, #288]	; (800520c <GUI_DrawFont16+0x1e8>)
 80050ec:	0013      	movs	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	18c3      	adds	r3, r0, r3
 80050f6:	185b      	adds	r3, r3, r1
 80050f8:	3302      	adds	r3, #2
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	0019      	movs	r1, r3
 80050fe:	230e      	movs	r3, #14
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	411a      	asrs	r2, r3
 8005108:	0013      	movs	r3, r2
 800510a:	400b      	ands	r3, r1
 800510c:	d005      	beq.n	800511a <GUI_DrawFont16+0xf6>
 800510e:	1cbb      	adds	r3, r7, #2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	0018      	movs	r0, r3
 8005114:	f000 fc5c 	bl	80059d0 <Lcd_WriteData_16Bit>
 8005118:	e040      	b.n	800519c <GUI_DrawFont16+0x178>
						else Lcd_WriteData_16Bit(bc);
 800511a:	003b      	movs	r3, r7
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	0018      	movs	r0, r3
 8005120:	f000 fc56 	bl	80059d0 <Lcd_WriteData_16Bit>
 8005124:	e03a      	b.n	800519c <GUI_DrawFont16+0x178>
					}
					else
					{
						POINT_COLOR=fc;
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <GUI_DrawFont16+0x1ec>)
 8005128:	1cba      	adds	r2, r7, #2
 800512a:	8812      	ldrh	r2, [r2, #0]
 800512c:	801a      	strh	r2, [r3, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);
 800512e:	230c      	movs	r3, #12
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	230f      	movs	r3, #15
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	7819      	ldrb	r1, [r3, #0]
 800513a:	4834      	ldr	r0, [pc, #208]	; (800520c <GUI_DrawFont16+0x1e8>)
 800513c:	0013      	movs	r3, r2
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	189b      	adds	r3, r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	18c3      	adds	r3, r0, r3
 8005146:	185b      	adds	r3, r3, r1
 8005148:	3302      	adds	r3, #2
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	0019      	movs	r1, r3
 800514e:	230e      	movs	r3, #14
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	411a      	asrs	r2, r3
 8005158:	0013      	movs	r3, r2
 800515a:	400b      	ands	r3, r1
 800515c:	d007      	beq.n	800516e <GUI_DrawFont16+0x14a>
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	1dbb      	adds	r3, r7, #6
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	0011      	movs	r1, r2
 8005168:	0018      	movs	r0, r3
 800516a:	f000 fc67 	bl	8005a3c <LCD_DrawPoint>
						x++;
 800516e:	1dbb      	adds	r3, r7, #6
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	1dbb      	adds	r3, r7, #6
 8005174:	3201      	adds	r2, #1
 8005176:	801a      	strh	r2, [r3, #0]
						if((x-x0)==16)
 8005178:	1dbb      	adds	r3, r7, #6
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	210a      	movs	r1, #10
 800517e:	187b      	adds	r3, r7, r1
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b10      	cmp	r3, #16
 8005186:	d109      	bne.n	800519c <GUI_DrawFont16+0x178>
						{
							x=x0;
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	187a      	adds	r2, r7, r1
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	801a      	strh	r2, [r3, #0]
							y++;
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	881a      	ldrh	r2, [r3, #0]
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	3201      	adds	r2, #1
 8005198:	801a      	strh	r2, [r3, #0]
							break;
 800519a:	e00a      	b.n	80051b2 <GUI_DrawFont16+0x18e>
				for(j=0;j<8;j++)
 800519c:	210e      	movs	r1, #14
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	187b      	adds	r3, r7, r1
 80051a4:	3201      	adds	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	230e      	movs	r3, #14
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b07      	cmp	r3, #7
 80051b0:	d990      	bls.n	80050d4 <GUI_DrawFont16+0xb0>
		    for(i=0;i<16*2;i++)
 80051b2:	210f      	movs	r1, #15
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	3201      	adds	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	230f      	movs	r3, #15
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b1f      	cmp	r3, #31
 80051c6:	d800      	bhi.n	80051ca <GUI_DrawFont16+0x1a6>
 80051c8:	e77f      	b.n	80050ca <GUI_DrawFont16+0xa6>

			}


		}
		continue;
 80051ca:	46c0      	nop			; (mov r8, r8)
	for (k=0;k<HZnum;k++)
 80051cc:	210c      	movs	r1, #12
 80051ce:	187b      	adds	r3, r7, r1
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	3201      	adds	r2, #1
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	230c      	movs	r3, #12
 80051da:	18fa      	adds	r2, r7, r3
 80051dc:	2308      	movs	r3, #8
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	8812      	ldrh	r2, [r2, #0]
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d200      	bcs.n	80051ea <GUI_DrawFont16+0x1c6>
 80051e8:	e73d      	b.n	8005066 <GUI_DrawFont16+0x42>
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <GUI_DrawFont16+0x1f0>)
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <GUI_DrawFont16+0x1f0>)
 80051f4:	885b      	ldrh	r3, [r3, #2]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2100      	movs	r1, #0
 80051fc:	2000      	movs	r0, #0
 80051fe:	f000 fe43 	bl	8005e88 <LCD_SetWindows>
}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b004      	add	sp, #16
 8005208:	bdb0      	pop	{r4, r5, r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	08009b24 	.word	0x08009b24
 8005210:	20000132 	.word	0x20000132
 8005214:	20000124 	.word	0x20000124

08005218 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont24(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	0005      	movs	r5, r0
 8005220:	000c      	movs	r4, r1
 8005222:	0010      	movs	r0, r2
 8005224:	0019      	movs	r1, r3
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	1c2a      	adds	r2, r5, #0
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	1c22      	adds	r2, r4, #0
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	1cbb      	adds	r3, r7, #2
 8005234:	1c02      	adds	r2, r0, #0
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	003b      	movs	r3, r7
 800523a:	1c0a      	adds	r2, r1, #0
 800523c:	801a      	strh	r2, [r3, #0]
	uint8_t i,j;
	uint16_t k;
	uint16_t HZnum;
	uint16_t x0=x;
 800523e:	230a      	movs	r3, #10
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	1dba      	adds	r2, r7, #6
 8005244:	8812      	ldrh	r2, [r2, #0]
 8005246:	801a      	strh	r2, [r3, #0]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 8005248:	2308      	movs	r3, #8
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2207      	movs	r2, #7
 800524e:	801a      	strh	r2, [r3, #0]

	for (k=0;k<HZnum;k++)
 8005250:	230c      	movs	r3, #12
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2200      	movs	r2, #0
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e0b0      	b.n	80053bc <GUI_DrawFont24+0x1a4>
	{
	    if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 800525a:	200c      	movs	r0, #12
 800525c:	183b      	adds	r3, r7, r0
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <GUI_DrawFont24+0x1d8>)
 8005262:	214a      	movs	r1, #74	; 0x4a
 8005264:	434a      	muls	r2, r1
 8005266:	5cd2      	ldrb	r2, [r2, r3]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d000      	beq.n	8005272 <GUI_DrawFont24+0x5a>
 8005270:	e09d      	b.n	80053ae <GUI_DrawFont24+0x196>
 8005272:	183b      	adds	r3, r7, r0
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	4a5e      	ldr	r2, [pc, #376]	; (80053f0 <GUI_DrawFont24+0x1d8>)
 8005278:	214a      	movs	r1, #74	; 0x4a
 800527a:	434b      	muls	r3, r1
 800527c:	18d3      	adds	r3, r2, r3
 800527e:	3301      	adds	r3, #1
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	3301      	adds	r3, #1
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d000      	beq.n	800528e <GUI_DrawFont24+0x76>
 800528c:	e08f      	b.n	80053ae <GUI_DrawFont24+0x196>
	    {
	    	LCD_SetWindows(x,y,x+24-1,y+24-1);
 800528e:	1dbb      	adds	r3, r7, #6
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	3317      	adds	r3, #23
 8005294:	b29a      	uxth	r2, r3
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	3317      	adds	r3, #23
 800529c:	b29c      	uxth	r4, r3
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	8819      	ldrh	r1, [r3, #0]
 80052a2:	1dbb      	adds	r3, r7, #6
 80052a4:	8818      	ldrh	r0, [r3, #0]
 80052a6:	0023      	movs	r3, r4
 80052a8:	f000 fdee 	bl	8005e88 <LCD_SetWindows>
			for(i=0;i<24*3;i++)
 80052ac:	230f      	movs	r3, #15
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e075      	b.n	80053a2 <GUI_DrawFont24+0x18a>
			{
				for(j=0;j<8;j++)
 80052b6:	230e      	movs	r3, #14
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e065      	b.n	800538c <GUI_DrawFont24+0x174>
				{
					if(!mode)
 80052c0:	2324      	movs	r3, #36	; 0x24
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d121      	bne.n	800530e <GUI_DrawFont24+0xf6>
					{
						if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80052ca:	230c      	movs	r3, #12
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	881a      	ldrh	r2, [r3, #0]
 80052d0:	230f      	movs	r3, #15
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	4946      	ldr	r1, [pc, #280]	; (80053f0 <GUI_DrawFont24+0x1d8>)
 80052d8:	204a      	movs	r0, #74	; 0x4a
 80052da:	4342      	muls	r2, r0
 80052dc:	188a      	adds	r2, r1, r2
 80052de:	18d3      	adds	r3, r2, r3
 80052e0:	3302      	adds	r3, #2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	0019      	movs	r1, r3
 80052e6:	230e      	movs	r3, #14
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2280      	movs	r2, #128	; 0x80
 80052ee:	411a      	asrs	r2, r3
 80052f0:	0013      	movs	r3, r2
 80052f2:	400b      	ands	r3, r1
 80052f4:	d005      	beq.n	8005302 <GUI_DrawFont24+0xea>
 80052f6:	1cbb      	adds	r3, r7, #2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 fb68 	bl	80059d0 <Lcd_WriteData_16Bit>
 8005300:	e03e      	b.n	8005380 <GUI_DrawFont24+0x168>
						else Lcd_WriteData_16Bit(bc);
 8005302:	003b      	movs	r3, r7
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	0018      	movs	r0, r3
 8005308:	f000 fb62 	bl	80059d0 <Lcd_WriteData_16Bit>
 800530c:	e038      	b.n	8005380 <GUI_DrawFont24+0x168>
					}
					else
					{
						POINT_COLOR=fc;
 800530e:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <GUI_DrawFont24+0x1dc>)
 8005310:	1cba      	adds	r2, r7, #2
 8005312:	8812      	ldrh	r2, [r2, #0]
 8005314:	801a      	strh	r2, [r3, #0]
						if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);
 8005316:	230c      	movs	r3, #12
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	881a      	ldrh	r2, [r3, #0]
 800531c:	230f      	movs	r3, #15
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4933      	ldr	r1, [pc, #204]	; (80053f0 <GUI_DrawFont24+0x1d8>)
 8005324:	204a      	movs	r0, #74	; 0x4a
 8005326:	4342      	muls	r2, r0
 8005328:	188a      	adds	r2, r1, r2
 800532a:	18d3      	adds	r3, r2, r3
 800532c:	3302      	adds	r3, #2
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	0019      	movs	r1, r3
 8005332:	230e      	movs	r3, #14
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	411a      	asrs	r2, r3
 800533c:	0013      	movs	r3, r2
 800533e:	400b      	ands	r3, r1
 8005340:	d007      	beq.n	8005352 <GUI_DrawFont24+0x13a>
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	1dbb      	adds	r3, r7, #6
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	0011      	movs	r1, r2
 800534c:	0018      	movs	r0, r3
 800534e:	f000 fb75 	bl	8005a3c <LCD_DrawPoint>
						x++;
 8005352:	1dbb      	adds	r3, r7, #6
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	1dbb      	adds	r3, r7, #6
 8005358:	3201      	adds	r2, #1
 800535a:	801a      	strh	r2, [r3, #0]
						if((x-x0)==24)
 800535c:	1dbb      	adds	r3, r7, #6
 800535e:	881a      	ldrh	r2, [r3, #0]
 8005360:	210a      	movs	r1, #10
 8005362:	187b      	adds	r3, r7, r1
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b18      	cmp	r3, #24
 800536a:	d109      	bne.n	8005380 <GUI_DrawFont24+0x168>
						{
							x=x0;
 800536c:	1dbb      	adds	r3, r7, #6
 800536e:	187a      	adds	r2, r7, r1
 8005370:	8812      	ldrh	r2, [r2, #0]
 8005372:	801a      	strh	r2, [r3, #0]
							y++;
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	881a      	ldrh	r2, [r3, #0]
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	3201      	adds	r2, #1
 800537c:	801a      	strh	r2, [r3, #0]
							break;
 800537e:	e00a      	b.n	8005396 <GUI_DrawFont24+0x17e>
				for(j=0;j<8;j++)
 8005380:	210e      	movs	r1, #14
 8005382:	187b      	adds	r3, r7, r1
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	187b      	adds	r3, r7, r1
 8005388:	3201      	adds	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	230e      	movs	r3, #14
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b07      	cmp	r3, #7
 8005394:	d994      	bls.n	80052c0 <GUI_DrawFont24+0xa8>
			for(i=0;i<24*3;i++)
 8005396:	210f      	movs	r1, #15
 8005398:	187b      	adds	r3, r7, r1
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	187b      	adds	r3, r7, r1
 800539e:	3201      	adds	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	230f      	movs	r3, #15
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b47      	cmp	r3, #71	; 0x47
 80053aa:	d800      	bhi.n	80053ae <GUI_DrawFont24+0x196>
 80053ac:	e783      	b.n	80052b6 <GUI_DrawFont24+0x9e>
						}
					}
				}
			}
		}
		continue;
 80053ae:	46c0      	nop			; (mov r8, r8)
	for (k=0;k<HZnum;k++)
 80053b0:	210c      	movs	r1, #12
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	187b      	adds	r3, r7, r1
 80053b8:	3201      	adds	r2, #1
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	230c      	movs	r3, #12
 80053be:	18fa      	adds	r2, r7, r3
 80053c0:	2308      	movs	r3, #8
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	8812      	ldrh	r2, [r2, #0]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d200      	bcs.n	80053ce <GUI_DrawFont24+0x1b6>
 80053cc:	e745      	b.n	800525a <GUI_DrawFont24+0x42>
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <GUI_DrawFont24+0x1e0>)
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <GUI_DrawFont24+0x1e0>)
 80053d8:	885b      	ldrh	r3, [r3, #2]
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2100      	movs	r1, #0
 80053e0:	2000      	movs	r0, #0
 80053e2:	f000 fd51 	bl	8005e88 <LCD_SetWindows>
}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bdb0      	pop	{r4, r5, r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	0800a360 	.word	0x0800a360
 80053f4:	20000132 	.word	0x20000132
 80053f8:	20000124 	.word	0x20000124

080053fc <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont32(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
 80053fc:	b5b0      	push	{r4, r5, r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	0005      	movs	r5, r0
 8005404:	000c      	movs	r4, r1
 8005406:	0010      	movs	r0, r2
 8005408:	0019      	movs	r1, r3
 800540a:	1dbb      	adds	r3, r7, #6
 800540c:	1c2a      	adds	r2, r5, #0
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	1c22      	adds	r2, r4, #0
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	1cbb      	adds	r3, r7, #2
 8005418:	1c02      	adds	r2, r0, #0
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	003b      	movs	r3, r7
 800541e:	1c0a      	adds	r2, r1, #0
 8005420:	801a      	strh	r2, [r3, #0]
	uint8_t i, j;
	uint16_t k;
	uint16_t HZnum;
	uint16_t x0 = x;
 8005422:	230a      	movs	r3, #10
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	1dba      	adds	r2, r7, #6
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	801a      	strh	r2, [r3, #0]
	HZnum = sizeof(tfont32)/sizeof(typFNT_GB32);
 800542c:	2308      	movs	r3, #8
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	2204      	movs	r2, #4
 8005432:	801a      	strh	r2, [r3, #0]
	for (k = 0; k < HZnum; k++)
 8005434:	230c      	movs	r3, #12
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2200      	movs	r2, #0
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	e0b9      	b.n	80055b2 <GUI_DrawFont32+0x1b6>
	{
	  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 800543e:	200c      	movs	r0, #12
 8005440:	183b      	adds	r3, r7, r0
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	4967      	ldr	r1, [pc, #412]	; (80055e4 <GUI_DrawFont32+0x1e8>)
 8005446:	0013      	movs	r3, r2
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	189b      	adds	r3, r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	5c5a      	ldrb	r2, [r3, r1]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d000      	beq.n	800545a <GUI_DrawFont32+0x5e>
 8005458:	e0a4      	b.n	80055a4 <GUI_DrawFont32+0x1a8>
 800545a:	183b      	adds	r3, r7, r0
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	4961      	ldr	r1, [pc, #388]	; (80055e4 <GUI_DrawFont32+0x1e8>)
 8005460:	0013      	movs	r3, r2
 8005462:	019b      	lsls	r3, r3, #6
 8005464:	189b      	adds	r3, r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	18cb      	adds	r3, r1, r3
 800546a:	3301      	adds	r3, #1
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	3301      	adds	r3, #1
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d000      	beq.n	800547a <GUI_DrawFont32+0x7e>
 8005478:	e094      	b.n	80055a4 <GUI_DrawFont32+0x1a8>
	  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 800547a:	1dbb      	adds	r3, r7, #6
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	331f      	adds	r3, #31
 8005480:	b29a      	uxth	r2, r3
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	331f      	adds	r3, #31
 8005488:	b29c      	uxth	r4, r3
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	8819      	ldrh	r1, [r3, #0]
 800548e:	1dbb      	adds	r3, r7, #6
 8005490:	8818      	ldrh	r0, [r3, #0]
 8005492:	0023      	movs	r3, r4
 8005494:	f000 fcf8 	bl	8005e88 <LCD_SetWindows>
			for(i=0;i<32*4;i++)
 8005498:	230f      	movs	r3, #15
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e079      	b.n	8005596 <GUI_DrawFont32+0x19a>
			{
				for(j=0;j<8;j++)
 80054a2:	230e      	movs	r3, #14
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e069      	b.n	8005580 <GUI_DrawFont32+0x184>
				{
					if(!mode)
 80054ac:	2324      	movs	r3, #36	; 0x24
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d123      	bne.n	80054fe <GUI_DrawFont32+0x102>
					{
						if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80054b6:	230c      	movs	r3, #12
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	881a      	ldrh	r2, [r3, #0]
 80054bc:	230f      	movs	r3, #15
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	7819      	ldrb	r1, [r3, #0]
 80054c2:	4848      	ldr	r0, [pc, #288]	; (80055e4 <GUI_DrawFont32+0x1e8>)
 80054c4:	0013      	movs	r3, r2
 80054c6:	019b      	lsls	r3, r3, #6
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	18c3      	adds	r3, r0, r3
 80054ce:	185b      	adds	r3, r3, r1
 80054d0:	3302      	adds	r3, #2
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	0019      	movs	r1, r3
 80054d6:	230e      	movs	r3, #14
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2280      	movs	r2, #128	; 0x80
 80054de:	411a      	asrs	r2, r3
 80054e0:	0013      	movs	r3, r2
 80054e2:	400b      	ands	r3, r1
 80054e4:	d005      	beq.n	80054f2 <GUI_DrawFont32+0xf6>
 80054e6:	1cbb      	adds	r3, r7, #2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fa70 	bl	80059d0 <Lcd_WriteData_16Bit>
 80054f0:	e040      	b.n	8005574 <GUI_DrawFont32+0x178>
						else Lcd_WriteData_16Bit(bc);
 80054f2:	003b      	movs	r3, r7
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 fa6a 	bl	80059d0 <Lcd_WriteData_16Bit>
 80054fc:	e03a      	b.n	8005574 <GUI_DrawFont32+0x178>
					}
					else
					{
						POINT_COLOR = fc;
 80054fe:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <GUI_DrawFont32+0x1ec>)
 8005500:	1cba      	adds	r2, r7, #2
 8005502:	8812      	ldrh	r2, [r2, #0]
 8005504:	801a      	strh	r2, [r3, #0]
						if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);
 8005506:	230c      	movs	r3, #12
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	881a      	ldrh	r2, [r3, #0]
 800550c:	230f      	movs	r3, #15
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	7819      	ldrb	r1, [r3, #0]
 8005512:	4834      	ldr	r0, [pc, #208]	; (80055e4 <GUI_DrawFont32+0x1e8>)
 8005514:	0013      	movs	r3, r2
 8005516:	019b      	lsls	r3, r3, #6
 8005518:	189b      	adds	r3, r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	18c3      	adds	r3, r0, r3
 800551e:	185b      	adds	r3, r3, r1
 8005520:	3302      	adds	r3, #2
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	0019      	movs	r1, r3
 8005526:	230e      	movs	r3, #14
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	411a      	asrs	r2, r3
 8005530:	0013      	movs	r3, r2
 8005532:	400b      	ands	r3, r1
 8005534:	d007      	beq.n	8005546 <GUI_DrawFont32+0x14a>
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	1dbb      	adds	r3, r7, #6
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	0011      	movs	r1, r2
 8005540:	0018      	movs	r0, r3
 8005542:	f000 fa7b 	bl	8005a3c <LCD_DrawPoint>
						x++;
 8005546:	1dbb      	adds	r3, r7, #6
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	1dbb      	adds	r3, r7, #6
 800554c:	3201      	adds	r2, #1
 800554e:	801a      	strh	r2, [r3, #0]
						if((x-x0)==32)
 8005550:	1dbb      	adds	r3, r7, #6
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	210a      	movs	r1, #10
 8005556:	187b      	adds	r3, r7, r1
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	d109      	bne.n	8005574 <GUI_DrawFont32+0x178>
						{
							x=x0;
 8005560:	1dbb      	adds	r3, r7, #6
 8005562:	187a      	adds	r2, r7, r1
 8005564:	8812      	ldrh	r2, [r2, #0]
 8005566:	801a      	strh	r2, [r3, #0]
							y++;
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	3201      	adds	r2, #1
 8005570:	801a      	strh	r2, [r3, #0]
							break;
 8005572:	e00a      	b.n	800558a <GUI_DrawFont32+0x18e>
				for(j=0;j<8;j++)
 8005574:	210e      	movs	r1, #14
 8005576:	187b      	adds	r3, r7, r1
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	187b      	adds	r3, r7, r1
 800557c:	3201      	adds	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	230e      	movs	r3, #14
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b07      	cmp	r3, #7
 8005588:	d990      	bls.n	80054ac <GUI_DrawFont32+0xb0>
			for(i=0;i<32*4;i++)
 800558a:	210f      	movs	r1, #15
 800558c:	187b      	adds	r3, r7, r1
 800558e:	781a      	ldrb	r2, [r3, #0]
 8005590:	187b      	adds	r3, r7, r1
 8005592:	3201      	adds	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	230f      	movs	r3, #15
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b25b      	sxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	db00      	blt.n	80055a4 <GUI_DrawFont32+0x1a8>
 80055a2:	e77e      	b.n	80054a2 <GUI_DrawFont32+0xa6>
				}
			}


		}
		continue;
 80055a4:	46c0      	nop			; (mov r8, r8)
	for (k = 0; k < HZnum; k++)
 80055a6:	210c      	movs	r1, #12
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	3201      	adds	r2, #1
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	230c      	movs	r3, #12
 80055b4:	18fa      	adds	r2, r7, r3
 80055b6:	2308      	movs	r3, #8
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d200      	bcs.n	80055c4 <GUI_DrawFont32+0x1c8>
 80055c2:	e73c      	b.n	800543e <GUI_DrawFont32+0x42>
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <GUI_DrawFont32+0x1f0>)
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <GUI_DrawFont32+0x1f0>)
 80055ce:	885b      	ldrh	r3, [r3, #2]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2100      	movs	r1, #0
 80055d6:	2000      	movs	r0, #0
 80055d8:	f000 fc56 	bl	8005e88 <LCD_SetWindows>
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b004      	add	sp, #16
 80055e2:	bdb0      	pop	{r4, r5, r7, pc}
 80055e4:	0800a568 	.word	0x0800a568
 80055e8:	20000132 	.word	0x20000132
 80055ec:	20000124 	.word	0x20000124

080055f0 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str, uint8_t size, uint8_t mode)
{
 80055f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af04      	add	r7, sp, #16
 80055f6:	0005      	movs	r5, r0
 80055f8:	000c      	movs	r4, r1
 80055fa:	0010      	movs	r0, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	1dbb      	adds	r3, r7, #6
 8005600:	1c2a      	adds	r2, r5, #0
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	1d3b      	adds	r3, r7, #4
 8005606:	1c22      	adds	r2, r4, #0
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	1cbb      	adds	r3, r7, #2
 800560c:	1c02      	adds	r2, r0, #0
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	003b      	movs	r3, r7
 8005612:	1c0a      	adds	r2, r1, #0
 8005614:	801a      	strh	r2, [r3, #0]
	uint16_t x0=x;
 8005616:	230c      	movs	r3, #12
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	1dba      	adds	r2, r7, #6
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	801a      	strh	r2, [r3, #0]
  	uint8_t bHz=0;
 8005620:	230f      	movs	r3, #15
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
    while(*str!=0)
 8005628:	e100      	b.n	800582c <Show_Str+0x23c>
    {
        if(!bHz)
 800562a:	240f      	movs	r4, #15
 800562c:	193b      	adds	r3, r7, r4
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d000      	beq.n	8005636 <Show_Str+0x46>
 8005634:	e089      	b.n	800574a <Show_Str+0x15a>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 8005636:	1dbb      	adds	r3, r7, #6
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	4b82      	ldr	r3, [pc, #520]	; (8005844 <Show_Str+0x254>)
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	0019      	movs	r1, r3
 8005640:	2024      	movs	r0, #36	; 0x24
 8005642:	2508      	movs	r5, #8
 8005644:	1943      	adds	r3, r0, r5
 8005646:	19db      	adds	r3, r3, r7
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	1acb      	subs	r3, r1, r3
 8005650:	429a      	cmp	r2, r3
 8005652:	dd00      	ble.n	8005656 <Show_Str+0x66>
 8005654:	e0f0      	b.n	8005838 <Show_Str+0x248>
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	4b7a      	ldr	r3, [pc, #488]	; (8005844 <Show_Str+0x254>)
 800565c:	885b      	ldrh	r3, [r3, #2]
 800565e:	0019      	movs	r1, r3
 8005660:	1943      	adds	r3, r0, r5
 8005662:	19db      	adds	r3, r3, r7
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	1acb      	subs	r3, r1, r3
 8005668:	429a      	cmp	r2, r3
 800566a:	dd00      	ble.n	800566e <Show_Str+0x7e>
 800566c:	e0e4      	b.n	8005838 <Show_Str+0x248>
			return;
	        if(*str>0x80)bHz=1;
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d903      	bls.n	800567e <Show_Str+0x8e>
 8005676:	193b      	adds	r3, r7, r4
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e0d6      	b.n	800582c <Show_Str+0x23c>
	        else
	        {
		        if(*str==0x0D)
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b0d      	cmp	r3, #13
 8005684:	d113      	bne.n	80056ae <Show_Str+0xbe>
		        {
		            y+=size;
 8005686:	2324      	movs	r3, #36	; 0x24
 8005688:	2208      	movs	r2, #8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	b299      	uxth	r1, r3
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	1d3a      	adds	r2, r7, #4
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	188a      	adds	r2, r1, r2
 800569a:	801a      	strh	r2, [r3, #0]
					x=x0;
 800569c:	1dbb      	adds	r3, r7, #6
 800569e:	220c      	movs	r2, #12
 80056a0:	18ba      	adds	r2, r7, r2
 80056a2:	8812      	ldrh	r2, [r2, #0]
 80056a4:	801a      	strh	r2, [r3, #0]
		            str++;
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	3301      	adds	r3, #1
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ac:	e049      	b.n	8005742 <Show_Str+0x152>
		        }
		        else
				{
					if(size>16)
 80056ae:	2324      	movs	r3, #36	; 0x24
 80056b0:	2608      	movs	r6, #8
 80056b2:	199b      	adds	r3, r3, r6
 80056b4:	19db      	adds	r3, r3, r7
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d91b      	bls.n	80056f4 <Show_Str+0x104>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	003a      	movs	r2, r7
 80056c2:	8815      	ldrh	r5, [r2, #0]
 80056c4:	1cba      	adds	r2, r7, #2
 80056c6:	8814      	ldrh	r4, [r2, #0]
 80056c8:	1d3a      	adds	r2, r7, #4
 80056ca:	8811      	ldrh	r1, [r2, #0]
 80056cc:	1dba      	adds	r2, r7, #6
 80056ce:	8810      	ldrh	r0, [r2, #0]
 80056d0:	2228      	movs	r2, #40	; 0x28
 80056d2:	1992      	adds	r2, r2, r6
 80056d4:	19d2      	adds	r2, r2, r7
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	9202      	str	r2, [sp, #8]
 80056da:	2210      	movs	r2, #16
 80056dc:	9201      	str	r2, [sp, #4]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	002b      	movs	r3, r5
 80056e2:	0022      	movs	r2, r4
 80056e4:	f7ff fb70 	bl	8004dc8 <LCD_ShowChar>
					x+=8;
 80056e8:	1dbb      	adds	r3, r7, #6
 80056ea:	1dba      	adds	r2, r7, #6
 80056ec:	8812      	ldrh	r2, [r2, #0]
 80056ee:	3208      	adds	r2, #8
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e026      	b.n	8005742 <Show_Str+0x152>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	003a      	movs	r2, r7
 80056fa:	8815      	ldrh	r5, [r2, #0]
 80056fc:	1cba      	adds	r2, r7, #2
 80056fe:	8814      	ldrh	r4, [r2, #0]
 8005700:	1d3a      	adds	r2, r7, #4
 8005702:	8811      	ldrh	r1, [r2, #0]
 8005704:	1dba      	adds	r2, r7, #6
 8005706:	8810      	ldrh	r0, [r2, #0]
 8005708:	2228      	movs	r2, #40	; 0x28
 800570a:	2608      	movs	r6, #8
 800570c:	1992      	adds	r2, r2, r6
 800570e:	19d2      	adds	r2, r2, r7
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	9202      	str	r2, [sp, #8]
 8005714:	2624      	movs	r6, #36	; 0x24
 8005716:	2208      	movs	r2, #8
 8005718:	18b2      	adds	r2, r6, r2
 800571a:	19d2      	adds	r2, r2, r7
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	9201      	str	r2, [sp, #4]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	002b      	movs	r3, r5
 8005724:	0022      	movs	r2, r4
 8005726:	f7ff fb4f 	bl	8004dc8 <LCD_ShowChar>
					x+=size/2;
 800572a:	2308      	movs	r3, #8
 800572c:	18f3      	adds	r3, r6, r3
 800572e:	19db      	adds	r3, r3, r7
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	b299      	uxth	r1, r3
 8005738:	1dbb      	adds	r3, r7, #6
 800573a:	1dba      	adds	r2, r7, #6
 800573c:	8812      	ldrh	r2, [r2, #0]
 800573e:	188a      	adds	r2, r1, r2
 8005740:	801a      	strh	r2, [r3, #0]
					}
				}
				str++;
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	3301      	adds	r3, #1
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
 8005748:	e070      	b.n	800582c <Show_Str+0x23c>

	        }
        }else
        {
			if(x>(lcddev.width-size)||y>(lcddev.height-size))
 800574a:	1dbb      	adds	r3, r7, #6
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	4b3d      	ldr	r3, [pc, #244]	; (8005844 <Show_Str+0x254>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	0019      	movs	r1, r3
 8005754:	2024      	movs	r0, #36	; 0x24
 8005756:	2408      	movs	r4, #8
 8005758:	1903      	adds	r3, r0, r4
 800575a:	19db      	adds	r3, r3, r7
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	1acb      	subs	r3, r1, r3
 8005760:	429a      	cmp	r2, r3
 8005762:	dd00      	ble.n	8005766 <Show_Str+0x176>
 8005764:	e06a      	b.n	800583c <Show_Str+0x24c>
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	4b36      	ldr	r3, [pc, #216]	; (8005844 <Show_Str+0x254>)
 800576c:	885b      	ldrh	r3, [r3, #2]
 800576e:	0019      	movs	r1, r3
 8005770:	1903      	adds	r3, r0, r4
 8005772:	19db      	adds	r3, r3, r7
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	1acb      	subs	r3, r1, r3
 8005778:	429a      	cmp	r2, r3
 800577a:	dc5f      	bgt.n	800583c <Show_Str+0x24c>
			return;
            bHz=0;
 800577c:	230f      	movs	r3, #15
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
			if(size==32)
 8005784:	0025      	movs	r5, r4
 8005786:	1903      	adds	r3, r0, r4
 8005788:	19db      	adds	r3, r3, r7
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b20      	cmp	r3, #32
 800578e:	d112      	bne.n	80057b6 <Show_Str+0x1c6>
			GUI_DrawFont32(x,y,fc,bc,str,mode);
 8005790:	003b      	movs	r3, r7
 8005792:	881c      	ldrh	r4, [r3, #0]
 8005794:	1cbb      	adds	r3, r7, #2
 8005796:	881a      	ldrh	r2, [r3, #0]
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	8819      	ldrh	r1, [r3, #0]
 800579c:	1dbb      	adds	r3, r7, #6
 800579e:	8818      	ldrh	r0, [r3, #0]
 80057a0:	2328      	movs	r3, #40	; 0x28
 80057a2:	195b      	adds	r3, r3, r5
 80057a4:	19db      	adds	r3, r3, r7
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	0023      	movs	r3, r4
 80057b0:	f7ff fe24 	bl	80053fc <GUI_DrawFont32>
 80057b4:	e02c      	b.n	8005810 <Show_Str+0x220>
			else if(size==24)
 80057b6:	2324      	movs	r3, #36	; 0x24
 80057b8:	2508      	movs	r5, #8
 80057ba:	195b      	adds	r3, r3, r5
 80057bc:	19db      	adds	r3, r3, r7
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b18      	cmp	r3, #24
 80057c2:	d112      	bne.n	80057ea <Show_Str+0x1fa>
			GUI_DrawFont24(x,y,fc,bc,str,mode);
 80057c4:	003b      	movs	r3, r7
 80057c6:	881c      	ldrh	r4, [r3, #0]
 80057c8:	1cbb      	adds	r3, r7, #2
 80057ca:	881a      	ldrh	r2, [r3, #0]
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	8819      	ldrh	r1, [r3, #0]
 80057d0:	1dbb      	adds	r3, r7, #6
 80057d2:	8818      	ldrh	r0, [r3, #0]
 80057d4:	2328      	movs	r3, #40	; 0x28
 80057d6:	195b      	adds	r3, r3, r5
 80057d8:	19db      	adds	r3, r3, r7
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	0023      	movs	r3, r4
 80057e4:	f7ff fd18 	bl	8005218 <GUI_DrawFont24>
 80057e8:	e012      	b.n	8005810 <Show_Str+0x220>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 80057ea:	003b      	movs	r3, r7
 80057ec:	881c      	ldrh	r4, [r3, #0]
 80057ee:	1cbb      	adds	r3, r7, #2
 80057f0:	881a      	ldrh	r2, [r3, #0]
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	8819      	ldrh	r1, [r3, #0]
 80057f6:	1dbb      	adds	r3, r7, #6
 80057f8:	8818      	ldrh	r0, [r3, #0]
 80057fa:	2328      	movs	r3, #40	; 0x28
 80057fc:	2508      	movs	r5, #8
 80057fe:	195b      	adds	r3, r3, r5
 8005800:	19db      	adds	r3, r3, r7
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	0023      	movs	r3, r4
 800580c:	f7ff fc0a 	bl	8005024 <GUI_DrawFont16>

	        str+=2;
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	3302      	adds	r3, #2
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
	        x+=size;
 8005816:	2324      	movs	r3, #36	; 0x24
 8005818:	2208      	movs	r2, #8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	19db      	adds	r3, r3, r7
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b299      	uxth	r1, r3
 8005822:	1dbb      	adds	r3, r7, #6
 8005824:	1dba      	adds	r2, r7, #6
 8005826:	8812      	ldrh	r2, [r2, #0]
 8005828:	188a      	adds	r2, r1, r2
 800582a:	801a      	strh	r2, [r3, #0]
    while(*str!=0)
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d000      	beq.n	8005836 <Show_Str+0x246>
 8005834:	e6f9      	b.n	800562a <Show_Str+0x3a>
 8005836:	e002      	b.n	800583e <Show_Str+0x24e>
			return;
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	e000      	b.n	800583e <Show_Str+0x24e>
			return;
 800583c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800583e:	46bd      	mov	sp, r7
 8005840:	b005      	add	sp, #20
 8005842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005844:	20000124 	.word	0x20000124

08005848 <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str, uint8_t size, uint8_t mode)
{
 8005848:	b5b0      	push	{r4, r5, r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af04      	add	r7, sp, #16
 800584e:	0005      	movs	r5, r0
 8005850:	000c      	movs	r4, r1
 8005852:	0010      	movs	r0, r2
 8005854:	0019      	movs	r1, r3
 8005856:	1dbb      	adds	r3, r7, #6
 8005858:	1c2a      	adds	r2, r5, #0
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	1c22      	adds	r2, r4, #0
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	1cbb      	adds	r3, r7, #2
 8005864:	1c02      	adds	r2, r0, #0
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	003b      	movs	r3, r7
 800586a:	1c0a      	adds	r2, r1, #0
 800586c:	801a      	strh	r2, [r3, #0]
	uint16_t len = strlen((const char *)str);
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	0018      	movs	r0, r3
 8005872:	f7fa fc49 	bl	8000108 <strlen>
 8005876:	0002      	movs	r2, r0
 8005878:	200e      	movs	r0, #14
 800587a:	183b      	adds	r3, r7, r0
 800587c:	801a      	strh	r2, [r3, #0]
	uint16_t x1 = (lcddev.width - len * (size / 2)) / 2;
 800587e:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <Gui_StrCenter+0x90>)
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	0019      	movs	r1, r3
 8005884:	183b      	adds	r3, r7, r0
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	2224      	movs	r2, #36	; 0x24
 800588a:	18ba      	adds	r2, r7, r2
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	0852      	lsrs	r2, r2, #1
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	4353      	muls	r3, r2
 8005894:	1acb      	subs	r3, r1, r3
 8005896:	d500      	bpl.n	800589a <Gui_StrCenter+0x52>
 8005898:	3301      	adds	r3, #1
 800589a:	105b      	asrs	r3, r3, #1
 800589c:	001a      	movs	r2, r3
 800589e:	200c      	movs	r0, #12
 80058a0:	183b      	adds	r3, r7, r0
 80058a2:	801a      	strh	r2, [r3, #0]
	Show_Str(x1, y, fc, bc, str, size, mode);
 80058a4:	003b      	movs	r3, r7
 80058a6:	881c      	ldrh	r4, [r3, #0]
 80058a8:	1cbb      	adds	r3, r7, #2
 80058aa:	881a      	ldrh	r2, [r3, #0]
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	8819      	ldrh	r1, [r3, #0]
 80058b0:	183b      	adds	r3, r7, r0
 80058b2:	8818      	ldrh	r0, [r3, #0]
 80058b4:	2328      	movs	r3, #40	; 0x28
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	9302      	str	r3, [sp, #8]
 80058bc:	2324      	movs	r3, #36	; 0x24
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	0023      	movs	r3, r4
 80058ca:	f7ff fe91 	bl	80055f0 <Show_Str>
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b004      	add	sp, #16
 80058d4:	bdb0      	pop	{r4, r5, r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	20000124 	.word	0x20000124

080058dc <LCD_WR_REG>:
 * @brief	Write an 8-bit command to the LCD screen
 * @param	Command value to be written
 * @retval  None
*/
void LCD_WR_REG(uint8_t data)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	0002      	movs	r2, r0
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	701a      	strb	r2, [r3, #0]
	GPIO_ResetBits(LCD_PORT, DC_PIN);
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	015b      	lsls	r3, r3, #5
 80058ec:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <LCD_WR_REG+0x4c>)
 80058ee:	0019      	movs	r1, r3
 80058f0:	0010      	movs	r0, r2
 80058f2:	f7fd fe73 	bl	80035dc <GPIO_ResetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	01db      	lsls	r3, r3, #7
 80058fa:	4a0b      	ldr	r2, [pc, #44]	; (8005928 <LCD_WR_REG+0x4c>)
 80058fc:	0019      	movs	r1, r3
 80058fe:	0010      	movs	r0, r2
 8005900:	f7fd fe6c 	bl	80035dc <GPIO_ResetBits>
	LCDSPI_WriteByte(LCD_SPI, data);
 8005904:	1dfb      	adds	r3, r7, #7
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <LCD_WR_REG+0x50>)
 800590a:	0019      	movs	r1, r3
 800590c:	0010      	movs	r0, r2
 800590e:	f000 fc21 	bl	8006154 <LCDSPI_WriteByte>
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	01db      	lsls	r3, r3, #7
 8005916:	4a04      	ldr	r2, [pc, #16]	; (8005928 <LCD_WR_REG+0x4c>)
 8005918:	0019      	movs	r1, r3
 800591a:	0010      	movs	r0, r2
 800591c:	f7fd fe4f 	bl	80035be <GPIO_SetBits>
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b002      	add	sp, #8
 8005926:	bd80      	pop	{r7, pc}
 8005928:	48000400 	.word	0x48000400
 800592c:	40013000 	.word	0x40013000

08005930 <LCD_WR_DATA>:
 * @brief	Write an 8-bit data to the LCD screen
 * @param	data value to be written
 * @retval  None
*/
void LCD_WR_DATA(uint8_t data)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	0002      	movs	r2, r0
 8005938:	1dfb      	adds	r3, r7, #7
 800593a:	701a      	strb	r2, [r3, #0]
	GPIO_SetBits(LCD_PORT, DC_PIN);
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	015b      	lsls	r3, r3, #5
 8005940:	4a0e      	ldr	r2, [pc, #56]	; (800597c <LCD_WR_DATA+0x4c>)
 8005942:	0019      	movs	r1, r3
 8005944:	0010      	movs	r0, r2
 8005946:	f7fd fe3a 	bl	80035be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	01db      	lsls	r3, r3, #7
 800594e:	4a0b      	ldr	r2, [pc, #44]	; (800597c <LCD_WR_DATA+0x4c>)
 8005950:	0019      	movs	r1, r3
 8005952:	0010      	movs	r0, r2
 8005954:	f7fd fe42 	bl	80035dc <GPIO_ResetBits>
	LCDSPI_WriteByte(LCD_SPI, data);
 8005958:	1dfb      	adds	r3, r7, #7
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <LCD_WR_DATA+0x50>)
 800595e:	0019      	movs	r1, r3
 8005960:	0010      	movs	r0, r2
 8005962:	f000 fbf7 	bl	8006154 <LCDSPI_WriteByte>
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	01db      	lsls	r3, r3, #7
 800596a:	4a04      	ldr	r2, [pc, #16]	; (800597c <LCD_WR_DATA+0x4c>)
 800596c:	0019      	movs	r1, r3
 800596e:	0010      	movs	r0, r2
 8005970:	f7fd fe25 	bl	80035be <GPIO_SetBits>
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}
 800597c:	48000400 	.word	0x48000400
 8005980:	40013000 	.word	0x40013000

08005984 <LCD_WriteReg>:
 * @param 	LCD_Reg:Register address
            LCD_RegValue: Data to be written
 * @retval  None
*/
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	0002      	movs	r2, r0
 800598c:	1dfb      	adds	r3, r7, #7
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	1c0a      	adds	r2, r1, #0
 8005994:	801a      	strh	r2, [r3, #0]
	LCD_WR_REG(LCD_Reg);
 8005996:	1dfb      	adds	r3, r7, #7
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	0018      	movs	r0, r3
 800599c:	f7ff ff9e 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7ff ffc2 	bl	8005930 <LCD_WR_DATA>
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <LCD_WriteRAM_Prepare>:
 * @brief	Write GRAM
 * @param	None
 * @retval	None
*/
void LCD_WriteRAM_Prepare(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <LCD_WriteRAM_Prepare+0x18>)
 80059ba:	891b      	ldrh	r3, [r3, #8]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	0018      	movs	r0, r3
 80059c0:	f7ff ff8c 	bl	80058dc <LCD_WR_REG>
}
 80059c4:	46c0      	nop			; (mov r8, r8)
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	20000124 	.word	0x20000124

080059d0 <Lcd_WriteData_16Bit>:
 * @param   Write an 16-bit command to the LCD screen
 * @param	Data to be written
 * @retval	None
*/
void Lcd_WriteData_16Bit(uint16_t data)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	0002      	movs	r2, r0
 80059d8:	1dbb      	adds	r3, r7, #6
 80059da:	801a      	strh	r2, [r3, #0]
	GPIO_SetBits(LCD_PORT, DC_PIN);
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	015b      	lsls	r3, r3, #5
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <Lcd_WriteData_16Bit+0x64>)
 80059e2:	0019      	movs	r1, r3
 80059e4:	0010      	movs	r0, r2
 80059e6:	f7fd fdea 	bl	80035be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	01db      	lsls	r3, r3, #7
 80059ee:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <Lcd_WriteData_16Bit+0x64>)
 80059f0:	0019      	movs	r1, r3
 80059f2:	0010      	movs	r0, r2
 80059f4:	f7fd fdf2 	bl	80035dc <GPIO_ResetBits>
	LCDSPI_WriteByte(LCD_SPI, data >> 8);
 80059f8:	1dbb      	adds	r3, r7, #6
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	4a0d      	ldr	r2, [pc, #52]	; (8005a38 <Lcd_WriteData_16Bit+0x68>)
 8005a04:	0019      	movs	r1, r3
 8005a06:	0010      	movs	r0, r2
 8005a08:	f000 fba4 	bl	8006154 <LCDSPI_WriteByte>
	LCDSPI_WriteByte(LCD_SPI, data);
 8005a0c:	1dbb      	adds	r3, r7, #6
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <Lcd_WriteData_16Bit+0x68>)
 8005a14:	0019      	movs	r1, r3
 8005a16:	0010      	movs	r0, r2
 8005a18:	f000 fb9c 	bl	8006154 <LCDSPI_WriteByte>
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	01db      	lsls	r3, r3, #7
 8005a20:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <Lcd_WriteData_16Bit+0x64>)
 8005a22:	0019      	movs	r1, r3
 8005a24:	0010      	movs	r0, r2
 8005a26:	f7fd fdca 	bl	80035be <GPIO_SetBits>
}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b002      	add	sp, #8
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	48000400 	.word	0x48000400
 8005a38:	40013000 	.word	0x40013000

08005a3c <LCD_DrawPoint>:
 * @param	x:the x coordinate of the pixel
            y:the y coordinate of the pixel
 * @retval	None
*/
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	0002      	movs	r2, r0
 8005a44:	1dbb      	adds	r3, r7, #6
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	1c0a      	adds	r2, r1, #0
 8005a4c:	801a      	strh	r2, [r3, #0]
	LCD_SetCursor(x, y);
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	881a      	ldrh	r2, [r3, #0]
 8005a52:	1dbb      	adds	r3, r7, #6
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	0011      	movs	r1, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 fa75 	bl	8005f48 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR);
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <LCD_DrawPoint+0x34>)
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff ffb4 	bl	80059d0 <Lcd_WriteData_16Bit>
}
 8005a68:	46c0      	nop			; (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000132 	.word	0x20000132

08005a74 <LCD_Clear>:
 * @brief	Full screen filled LCD screen
 * @param	color:Filled color
 * @retval	None
*/
void LCD_Clear(uint16_t Color)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	1dbb      	adds	r3, r7, #6
 8005a7e:	801a      	strh	r2, [r3, #0]
    unsigned int i, m;
	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);
 8005a80:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <LCD_Clear+0x90>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <LCD_Clear+0x90>)
 8005a8a:	885b      	ldrh	r3, [r3, #2]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2100      	movs	r1, #0
 8005a92:	2000      	movs	r0, #0
 8005a94:	f000 f9f8 	bl	8005e88 <LCD_SetWindows>
	GPIO_SetBits(LCD_PORT, DC_PIN);
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	015b      	lsls	r3, r3, #5
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <LCD_Clear+0x94>)
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	0010      	movs	r0, r2
 8005aa2:	f7fd fd8c 	bl	80035be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 8005aa6:	2380      	movs	r3, #128	; 0x80
 8005aa8:	01db      	lsls	r3, r3, #7
 8005aaa:	4a17      	ldr	r2, [pc, #92]	; (8005b08 <LCD_Clear+0x94>)
 8005aac:	0019      	movs	r1, r3
 8005aae:	0010      	movs	r0, r2
 8005ab0:	f7fd fd94 	bl	80035dc <GPIO_ResetBits>
	for(i = 0; i < lcddev.height; i++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e013      	b.n	8005ae2 <LCD_Clear+0x6e>
	{
        for(m = 0; m < lcddev.width; m++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	e007      	b.n	8005ad0 <LCD_Clear+0x5c>
        {
			Lcd_WriteData_16Bit(Color);
 8005ac0:	1dbb      	adds	r3, r7, #6
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff ff83 	bl	80059d0 <Lcd_WriteData_16Bit>
        for(m = 0; m < lcddev.width; m++)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <LCD_Clear+0x90>)
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	001a      	movs	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d3f1      	bcc.n	8005ac0 <LCD_Clear+0x4c>
	for(i = 0; i < lcddev.height; i++)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <LCD_Clear+0x90>)
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	001a      	movs	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d3e5      	bcc.n	8005aba <LCD_Clear+0x46>
		}
	}
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <LCD_Clear+0x94>)
 8005af4:	0019      	movs	r1, r3
 8005af6:	0010      	movs	r0, r2
 8005af8:	f7fd fd61 	bl	80035be <GPIO_SetBits>
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b004      	add	sp, #16
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000124 	.word	0x20000124
 8005b08:	48000400 	.word	0x48000400

08005b0c <LCD_ClearCursor>:
 * @retval	None
*/
void LCD_ClearCursor(uint16_t wXs, uint16_t wYs, \
					 uint16_t wXe, uint16_t wYe, \
					 uint16_t wColor)
{
 8005b0c:	b5b0      	push	{r4, r5, r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	0005      	movs	r5, r0
 8005b14:	000c      	movs	r4, r1
 8005b16:	0010      	movs	r0, r2
 8005b18:	0019      	movs	r1, r3
 8005b1a:	1dbb      	adds	r3, r7, #6
 8005b1c:	1c2a      	adds	r2, r5, #0
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	1c22      	adds	r2, r4, #0
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	1cbb      	adds	r3, r7, #2
 8005b28:	1c02      	adds	r2, r0, #0
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	003b      	movs	r3, r7
 8005b2e:	1c0a      	adds	r2, r1, #0
 8005b30:	801a      	strh	r2, [r3, #0]
	unsigned int i, m;
	uint16_t width = wXe - wXs - 1;
 8005b32:	1cba      	adds	r2, r7, #2
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	230e      	movs	r3, #14
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	3a01      	subs	r2, #1
 8005b44:	801a      	strh	r2, [r3, #0]
	uint16_t height = wYe - wYs - 1;
 8005b46:	003a      	movs	r2, r7
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	8812      	ldrh	r2, [r2, #0]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	230c      	movs	r3, #12
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	3a01      	subs	r2, #1
 8005b58:	801a      	strh	r2, [r3, #0]
	LCD_SetWindows(wXs, wYs, wXe, wYe);
 8005b5a:	003b      	movs	r3, r7
 8005b5c:	881c      	ldrh	r4, [r3, #0]
 8005b5e:	1cbb      	adds	r3, r7, #2
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	8819      	ldrh	r1, [r3, #0]
 8005b66:	1dbb      	adds	r3, r7, #6
 8005b68:	8818      	ldrh	r0, [r3, #0]
 8005b6a:	0023      	movs	r3, r4
 8005b6c:	f000 f98c 	bl	8005e88 <LCD_SetWindows>
	GPIO_SetBits(LCD_PORT, DC_PIN);
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	015b      	lsls	r3, r3, #5
 8005b74:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <LCD_ClearCursor+0xec>)
 8005b76:	0019      	movs	r1, r3
 8005b78:	0010      	movs	r0, r2
 8005b7a:	f7fd fd20 	bl	80035be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	01db      	lsls	r3, r3, #7
 8005b82:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <LCD_ClearCursor+0xec>)
 8005b84:	0019      	movs	r1, r3
 8005b86:	0010      	movs	r0, r2
 8005b88:	f7fd fd28 	bl	80035dc <GPIO_ResetBits>
	for(i = 0; i < height; i++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e014      	b.n	8005bbc <LCD_ClearCursor+0xb0>
	{
		for(m = 0; m < width; m++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	e008      	b.n	8005baa <LCD_ClearCursor+0x9e>
		{
			Lcd_WriteData_16Bit(wColor);
 8005b98:	2328      	movs	r3, #40	; 0x28
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7ff ff16 	bl	80059d0 <Lcd_WriteData_16Bit>
		for(m = 0; m < width; m++)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	230e      	movs	r3, #14
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3f0      	bcc.n	8005b98 <LCD_ClearCursor+0x8c>
	for(i = 0; i < height; i++)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d3e4      	bcc.n	8005b92 <LCD_ClearCursor+0x86>
		}
	}
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	01db      	lsls	r3, r3, #7
 8005bcc:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <LCD_ClearCursor+0xec>)
 8005bce:	0019      	movs	r1, r3
 8005bd0:	0010      	movs	r0, r2
 8005bd2:	f7fd fcf4 	bl	80035be <GPIO_SetBits>
	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <LCD_ClearCursor+0xf0>)
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <LCD_ClearCursor+0xf0>)
 8005be0:	885b      	ldrh	r3, [r3, #2]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2100      	movs	r1, #0
 8005be8:	2000      	movs	r0, #0
 8005bea:	f000 f94d 	bl	8005e88 <LCD_SetWindows>
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b006      	add	sp, #24
 8005bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	48000400 	.word	0x48000400
 8005bfc:	20000124 	.word	0x20000124

08005c00 <LCD_RESET>:
 * @brief	Reset LCD screen
 * @param	None
 * @retval	None
*/
void LCD_RESET(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
	GPIO_ResetBits(LCD_PORT, RST_PIN);
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	019b      	lsls	r3, r3, #6
 8005c08:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <LCD_RESET+0x34>)
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	0010      	movs	r0, r2
 8005c0e:	f7fd fce5 	bl	80035dc <GPIO_ResetBits>
	delay_ms(100);
 8005c12:	2064      	movs	r0, #100	; 0x64
 8005c14:	f002 f8e2 	bl	8007ddc <delay_ms>
	GPIO_SetBits(LCD_PORT, RST_PIN);
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	019b      	lsls	r3, r3, #6
 8005c1c:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <LCD_RESET+0x34>)
 8005c1e:	0019      	movs	r1, r3
 8005c20:	0010      	movs	r0, r2
 8005c22:	f7fd fccc 	bl	80035be <GPIO_SetBits>
	delay_ms(50);
 8005c26:	2032      	movs	r0, #50	; 0x32
 8005c28:	f002 f8d8 	bl	8007ddc <delay_ms>
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	48000400 	.word	0x48000400

08005c38 <LCD_Init>:
 * @brief	Initialization LCD screen
 * @param	None
 * @retval	None
*/
void LCD_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
	LCDSPI_Config();
 8005c3c:	f000 fa1c 	bl	8006078 <LCDSPI_Config>
	LCDGPIO_Config();
 8005c40:	f000 f9ee 	bl	8006020 <LCDGPIO_Config>
 	LCD_RESET();
 8005c44:	f7ff ffdc 	bl	8005c00 <LCD_RESET>

 	//*************2.2inch ILI9341****************//
	LCD_WR_REG(0xCF);
 8005c48:	20cf      	movs	r0, #207	; 0xcf
 8005c4a:	f7ff fe47 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f7ff fe6e 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //C1
 8005c54:	20d9      	movs	r0, #217	; 0xd9
 8005c56:	f7ff fe6b 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8005c5a:	2030      	movs	r0, #48	; 0x30
 8005c5c:	f7ff fe68 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8005c60:	20ed      	movs	r0, #237	; 0xed
 8005c62:	f7ff fe3b 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8005c66:	2064      	movs	r0, #100	; 0x64
 8005c68:	f7ff fe62 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8005c6c:	2003      	movs	r0, #3
 8005c6e:	f7ff fe5f 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8005c72:	2012      	movs	r0, #18
 8005c74:	f7ff fe5c 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8005c78:	2081      	movs	r0, #129	; 0x81
 8005c7a:	f7ff fe59 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8005c7e:	20e8      	movs	r0, #232	; 0xe8
 8005c80:	f7ff fe2c 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8005c84:	2085      	movs	r0, #133	; 0x85
 8005c86:	f7ff fe53 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8005c8a:	2010      	movs	r0, #16
 8005c8c:	f7ff fe50 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8005c90:	207a      	movs	r0, #122	; 0x7a
 8005c92:	f7ff fe4d 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8005c96:	20cb      	movs	r0, #203	; 0xcb
 8005c98:	f7ff fe20 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8005c9c:	2039      	movs	r0, #57	; 0x39
 8005c9e:	f7ff fe47 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8005ca2:	202c      	movs	r0, #44	; 0x2c
 8005ca4:	f7ff fe44 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005ca8:	2000      	movs	r0, #0
 8005caa:	f7ff fe41 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8005cae:	2034      	movs	r0, #52	; 0x34
 8005cb0:	f7ff fe3e 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8005cb4:	2002      	movs	r0, #2
 8005cb6:	f7ff fe3b 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8005cba:	20f7      	movs	r0, #247	; 0xf7
 8005cbc:	f7ff fe0e 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8005cc0:	2020      	movs	r0, #32
 8005cc2:	f7ff fe35 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8005cc6:	20ea      	movs	r0, #234	; 0xea
 8005cc8:	f7ff fe08 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7ff fe2f 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f7ff fe2c 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);  //Power control
 8005cd8:	20c0      	movs	r0, #192	; 0xc0
 8005cda:	f7ff fdff 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x21); //VRH[5:0]  //1B
 8005cde:	2021      	movs	r0, #33	; 0x21
 8005ce0:	f7ff fe26 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);  //Power control
 8005ce4:	20c1      	movs	r0, #193	; 0xc1
 8005ce6:	f7ff fdf9 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x12); //SAP[2:0];BT[3:0] //01
 8005cea:	2012      	movs	r0, #18
 8005cec:	f7ff fe20 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);  //VCM control
 8005cf0:	20c5      	movs	r0, #197	; 0xc5
 8005cf2:	f7ff fdf3 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x39); //3F
 8005cf6:	2039      	movs	r0, #57	; 0x39
 8005cf8:	f7ff fe1a 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x37); //3C
 8005cfc:	2037      	movs	r0, #55	; 0x37
 8005cfe:	f7ff fe17 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);  //VCM control2
 8005d02:	20c7      	movs	r0, #199	; 0xc7
 8005d04:	f7ff fdea 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0XAB); //B0
 8005d08:	20ab      	movs	r0, #171	; 0xab
 8005d0a:	f7ff fe11 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0x36);  // Memory Access Control
 8005d0e:	2036      	movs	r0, #54	; 0x36
 8005d10:	f7ff fde4 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8005d14:	2048      	movs	r0, #72	; 0x48
 8005d16:	f7ff fe0b 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8005d1a:	203a      	movs	r0, #58	; 0x3a
 8005d1c:	f7ff fdde 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8005d20:	2055      	movs	r0, #85	; 0x55
 8005d22:	f7ff fe05 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8005d26:	20b1      	movs	r0, #177	; 0xb1
 8005d28:	f7ff fdd8 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f7ff fdff 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B); //1A
 8005d32:	201b      	movs	r0, #27
 8005d34:	f7ff fdfc 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);  // Display Function Control
 8005d38:	20b6      	movs	r0, #182	; 0xb6
 8005d3a:	f7ff fdcf 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8005d3e:	200a      	movs	r0, #10
 8005d40:	f7ff fdf6 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8005d44:	20a2      	movs	r0, #162	; 0xa2
 8005d46:	f7ff fdf3 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);  // 3Gamma Function Disable
 8005d4a:	20f2      	movs	r0, #242	; 0xf2
 8005d4c:	f7ff fdc6 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7ff fded 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0x26);  //Gamma curve selected
 8005d56:	2026      	movs	r0, #38	; 0x26
 8005d58:	f7ff fdc0 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f7ff fde7 	bl	8005930 <LCD_WR_DATA>

	LCD_WR_REG(0xE0);  //Set Gamma
 8005d62:	20e0      	movs	r0, #224	; 0xe0
 8005d64:	f7ff fdba 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8005d68:	200f      	movs	r0, #15
 8005d6a:	f7ff fde1 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x23);
 8005d6e:	2023      	movs	r0, #35	; 0x23
 8005d70:	f7ff fdde 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 8005d74:	201f      	movs	r0, #31
 8005d76:	f7ff fddb 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8005d7a:	200b      	movs	r0, #11
 8005d7c:	f7ff fdd8 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8005d80:	200e      	movs	r0, #14
 8005d82:	f7ff fdd5 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8005d86:	2008      	movs	r0, #8
 8005d88:	f7ff fdd2 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x4B);
 8005d8c:	204b      	movs	r0, #75	; 0x4b
 8005d8e:	f7ff fdcf 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0XA8);
 8005d92:	20a8      	movs	r0, #168	; 0xa8
 8005d94:	f7ff fdcc 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B);
 8005d98:	203b      	movs	r0, #59	; 0x3b
 8005d9a:	f7ff fdc9 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8005d9e:	200a      	movs	r0, #10
 8005da0:	f7ff fdc6 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 8005da4:	2014      	movs	r0, #20
 8005da6:	f7ff fdc3 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8005daa:	2006      	movs	r0, #6
 8005dac:	f7ff fdc0 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8005db0:	2010      	movs	r0, #16
 8005db2:	f7ff fdbd 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8005db6:	2009      	movs	r0, #9
 8005db8:	f7ff fdba 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f7ff fdb7 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0XE1); //Set Gamma
 8005dc2:	20e1      	movs	r0, #225	; 0xe1
 8005dc4:	f7ff fd8a 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f7ff fdb1 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x1C);
 8005dce:	201c      	movs	r0, #28
 8005dd0:	f7ff fdae 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x20);
 8005dd4:	2020      	movs	r0, #32
 8005dd6:	f7ff fdab 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8005dda:	2004      	movs	r0, #4
 8005ddc:	f7ff fda8 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8005de0:	2010      	movs	r0, #16
 8005de2:	f7ff fda5 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8005de6:	2008      	movs	r0, #8
 8005de8:	f7ff fda2 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8005dec:	2034      	movs	r0, #52	; 0x34
 8005dee:	f7ff fd9f 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x47);
 8005df2:	2047      	movs	r0, #71	; 0x47
 8005df4:	f7ff fd9c 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x44);
 8005df8:	2044      	movs	r0, #68	; 0x44
 8005dfa:	f7ff fd99 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8005dfe:	2005      	movs	r0, #5
 8005e00:	f7ff fd96 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8005e04:	200b      	movs	r0, #11
 8005e06:	f7ff fd93 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8005e0a:	2009      	movs	r0, #9
 8005e0c:	f7ff fd90 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x2F);
 8005e10:	202f      	movs	r0, #47	; 0x2f
 8005e12:	f7ff fd8d 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 8005e16:	2036      	movs	r0, #54	; 0x36
 8005e18:	f7ff fd8a 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8005e1c:	200f      	movs	r0, #15
 8005e1e:	f7ff fd87 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8005e22:	202b      	movs	r0, #43	; 0x2b
 8005e24:	f7ff fd5a 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f7ff fd81 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f7ff fd7e 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8005e34:	2001      	movs	r0, #1
 8005e36:	f7ff fd7b 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8005e3a:	203f      	movs	r0, #63	; 0x3f
 8005e3c:	f7ff fd78 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8005e40:	202a      	movs	r0, #42	; 0x2a
 8005e42:	f7ff fd4b 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005e46:	2000      	movs	r0, #0
 8005e48:	f7ff fd72 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7ff fd6f 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005e52:	2000      	movs	r0, #0
 8005e54:	f7ff fd6c 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8005e58:	20ef      	movs	r0, #239	; 0xef
 8005e5a:	f7ff fd69 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8005e5e:	2011      	movs	r0, #17
 8005e60:	f7ff fd3c 	bl	80058dc <LCD_WR_REG>
	delay_ms(120);
 8005e64:	2078      	movs	r0, #120	; 0x78
 8005e66:	f001 ffb9 	bl	8007ddc <delay_ms>
	LCD_WR_REG(0x29); //Display on
 8005e6a:	2029      	movs	r0, #41	; 0x29
 8005e6c:	f7ff fd36 	bl	80058dc <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);
 8005e70:	2000      	movs	r0, #0
 8005e72:	f000 f881 	bl	8005f78 <LCD_direction>
	LCD_Clear(WHITE);
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <LCD_Init+0x24c>)
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f7ff fdfb 	bl	8005a74 <LCD_Clear>
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	0000ffff 	.word	0x0000ffff

08005e88 <LCD_SetWindows>:
			yEnd:the endning y coordinate of the LCD display window
 * @retval	None
*/
void LCD_SetWindows(uint16_t xStar, uint16_t yStar, \
					uint16_t xEnd,  uint16_t yEnd)
{
 8005e88:	b5b0      	push	{r4, r5, r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	0005      	movs	r5, r0
 8005e90:	000c      	movs	r4, r1
 8005e92:	0010      	movs	r0, r2
 8005e94:	0019      	movs	r1, r3
 8005e96:	1dbb      	adds	r3, r7, #6
 8005e98:	1c2a      	adds	r2, r5, #0
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	1c22      	adds	r2, r4, #0
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	1cbb      	adds	r3, r7, #2
 8005ea4:	1c02      	adds	r2, r0, #0
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	003b      	movs	r3, r7
 8005eaa:	1c0a      	adds	r2, r1, #0
 8005eac:	801a      	strh	r2, [r3, #0]
	LCD_WR_REG(lcddev.setxcmd);
 8005eae:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <LCD_SetWindows+0xbc>)
 8005eb0:	895b      	ldrh	r3, [r3, #10]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7ff fd11 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(xStar >> 8);
 8005eba:	1dbb      	adds	r3, r7, #6
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7ff fd33 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & xStar);
 8005eca:	1dbb      	adds	r3, r7, #6
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7ff fd2d 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd >> 8);
 8005ed6:	1cbb      	adds	r3, r7, #2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7ff fd25 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & xEnd);
 8005ee6:	1cbb      	adds	r3, r7, #2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7ff fd1f 	bl	8005930 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <LCD_SetWindows+0xbc>)
 8005ef4:	899b      	ldrh	r3, [r3, #12]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f7ff fcef 	bl	80058dc <LCD_WR_REG>
	LCD_WR_DATA(yStar >> 8);
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7ff fd11 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & yStar);
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7ff fd0b 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd >> 8);
 8005f1a:	003b      	movs	r3, r7
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7ff fd03 	bl	8005930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & yEnd);
 8005f2a:	003b      	movs	r3, r7
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7ff fcfd 	bl	8005930 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();
 8005f36:	f7ff fd3d 	bl	80059b4 <LCD_WriteRAM_Prepare>
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bdb0      	pop	{r4, r5, r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	20000124 	.word	0x20000124

08005f48 <LCD_SetCursor>:
 * @param	Xpos:the  x coordinate of the pixel
			Ypos:the  y coordinate of the pixel
 * @retval	None
*/
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	0002      	movs	r2, r0
 8005f50:	1dbb      	adds	r3, r7, #6
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	1d3b      	adds	r3, r7, #4
 8005f56:	1c0a      	adds	r2, r1, #0
 8005f58:	801a      	strh	r2, [r3, #0]
	LCD_SetWindows(Xpos, Ypos, Xpos, Ypos);
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	881c      	ldrh	r4, [r3, #0]
 8005f5e:	1dbb      	adds	r3, r7, #6
 8005f60:	881a      	ldrh	r2, [r3, #0]
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	8819      	ldrh	r1, [r3, #0]
 8005f66:	1dbb      	adds	r3, r7, #6
 8005f68:	8818      	ldrh	r0, [r3, #0]
 8005f6a:	0023      	movs	r3, r4
 8005f6c:	f7ff ff8c 	bl	8005e88 <LCD_SetWindows>
}
 8005f70:	46c0      	nop			; (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b003      	add	sp, #12
 8005f76:	bd90      	pop	{r4, r7, pc}

08005f78 <LCD_direction>:
					   2-180 degree
					   3-270 degree
 * @retval	None
*/
void LCD_direction(uint8_t direction)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	0002      	movs	r2, r0
 8005f80:	1dfb      	adds	r3, r7, #7
 8005f82:	701a      	strb	r2, [r3, #0]
	lcddev.setxcmd = 0x2A;
 8005f84:	4b25      	ldr	r3, [pc, #148]	; (800601c <LCD_direction+0xa4>)
 8005f86:	222a      	movs	r2, #42	; 0x2a
 8005f88:	815a      	strh	r2, [r3, #10]
	lcddev.setycmd = 0x2B;
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <LCD_direction+0xa4>)
 8005f8c:	222b      	movs	r2, #43	; 0x2b
 8005f8e:	819a      	strh	r2, [r3, #12]
	lcddev.wramcmd = 0x2C;
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <LCD_direction+0xa4>)
 8005f92:	222c      	movs	r2, #44	; 0x2c
 8005f94:	811a      	strh	r2, [r3, #8]

	switch(direction){
 8005f96:	1dfb      	adds	r3, r7, #7
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d02c      	beq.n	8005ff8 <LCD_direction+0x80>
 8005f9e:	dc37      	bgt.n	8006010 <LCD_direction+0x98>
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d01d      	beq.n	8005fe0 <LCD_direction+0x68>
 8005fa4:	dc34      	bgt.n	8006010 <LCD_direction+0x98>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <LCD_direction+0x38>
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d00c      	beq.n	8005fc8 <LCD_direction+0x50>
			lcddev.width = LCD_H;
			lcddev.height = LCD_W;
			LCD_WriteReg(0x36, (1 << 3) | (1 << 7) | (1 <<5 ));// BGR == 1, MY == 1, MX == 0, MV == 1
		    break;
		default:
			break;
 8005fae:	e02f      	b.n	8006010 <LCD_direction+0x98>
			lcddev.width = LCD_W;
 8005fb0:	4b1a      	ldr	r3, [pc, #104]	; (800601c <LCD_direction+0xa4>)
 8005fb2:	22f0      	movs	r2, #240	; 0xf0
 8005fb4:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_H;
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <LCD_direction+0xa4>)
 8005fb8:	22a0      	movs	r2, #160	; 0xa0
 8005fba:	0052      	lsls	r2, r2, #1
 8005fbc:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (0 << 6)| (0 << 7));// BGR == 1, MY == 0, MX == 0, MV == 0
 8005fbe:	2108      	movs	r1, #8
 8005fc0:	2036      	movs	r0, #54	; 0x36
 8005fc2:	f7ff fcdf 	bl	8005984 <LCD_WriteReg>
		    break;
 8005fc6:	e024      	b.n	8006012 <LCD_direction+0x9a>
			lcddev.width = LCD_H;
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <LCD_direction+0xa4>)
 8005fca:	22a0      	movs	r2, #160	; 0xa0
 8005fcc:	0052      	lsls	r2, r2, #1
 8005fce:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_W;
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <LCD_direction+0xa4>)
 8005fd2:	22f0      	movs	r2, #240	; 0xf0
 8005fd4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (0 << 7)| (1 << 6) | (1 << 5));// BGR == 1, MY == 1, MX == 0, MV == 1
 8005fd6:	2168      	movs	r1, #104	; 0x68
 8005fd8:	2036      	movs	r0, #54	; 0x36
 8005fda:	f7ff fcd3 	bl	8005984 <LCD_WriteReg>
		    break;
 8005fde:	e018      	b.n	8006012 <LCD_direction+0x9a>
			lcddev.width = LCD_W;
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <LCD_direction+0xa4>)
 8005fe2:	22f0      	movs	r2, #240	; 0xf0
 8005fe4:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_H;
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	; (800601c <LCD_direction+0xa4>)
 8005fe8:	22a0      	movs	r2, #160	; 0xa0
 8005fea:	0052      	lsls	r2, r2, #1
 8005fec:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (1 << 6) | (1 << 7));// BGR == 1, MY == 0, MX == 0, MV == 0
 8005fee:	21c8      	movs	r1, #200	; 0xc8
 8005ff0:	2036      	movs	r0, #54	; 0x36
 8005ff2:	f7ff fcc7 	bl	8005984 <LCD_WriteReg>
		    break;
 8005ff6:	e00c      	b.n	8006012 <LCD_direction+0x9a>
			lcddev.width = LCD_H;
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <LCD_direction+0xa4>)
 8005ffa:	22a0      	movs	r2, #160	; 0xa0
 8005ffc:	0052      	lsls	r2, r2, #1
 8005ffe:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_W;
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <LCD_direction+0xa4>)
 8006002:	22f0      	movs	r2, #240	; 0xf0
 8006004:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (1 << 7) | (1 <<5 ));// BGR == 1, MY == 1, MX == 0, MV == 1
 8006006:	21a8      	movs	r1, #168	; 0xa8
 8006008:	2036      	movs	r0, #54	; 0x36
 800600a:	f7ff fcbb 	bl	8005984 <LCD_WriteReg>
		    break;
 800600e:	e000      	b.n	8006012 <LCD_direction+0x9a>
			break;
 8006010:	46c0      	nop			; (mov r8, r8)
	}
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b002      	add	sp, #8
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	20000124 	.word	0x20000124

08006020 <LCDGPIO_Config>:
 * @brief	Initialization LCD screen GPIO
 * @param	None
 * @retval	None
*/
static void LCDGPIO_Config(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(LCD_RCC, ENABLE);
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	02db      	lsls	r3, r3, #11
 800602a:	2101      	movs	r1, #1
 800602c:	0018      	movs	r0, r3
 800602e:	f7fd fd09 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = RST_PIN | DC_PIN | CS_PIN;
 8006032:	003b      	movs	r3, r7
 8006034:	22e0      	movs	r2, #224	; 0xe0
 8006036:	01d2      	lsls	r2, r2, #7
 8006038:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800603a:	003b      	movs	r3, r7
 800603c:	2201      	movs	r2, #1
 800603e:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006040:	003b      	movs	r3, r7
 8006042:	2203      	movs	r2, #3
 8006044:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006046:	003b      	movs	r3, r7
 8006048:	2200      	movs	r2, #0
 800604a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800604c:	003b      	movs	r3, r7
 800604e:	2200      	movs	r2, #0
 8006050:	71da      	strb	r2, [r3, #7]
	GPIO_Init(LCD_PORT, &GPIO_InitStructure);
 8006052:	003b      	movs	r3, r7
 8006054:	4a07      	ldr	r2, [pc, #28]	; (8006074 <LCDGPIO_Config+0x54>)
 8006056:	0019      	movs	r1, r3
 8006058:	0010      	movs	r0, r2
 800605a:	f7fd f9f9 	bl	8003450 <GPIO_Init>

	GPIO_SetBits(LCD_PORT, CS_PIN);
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	01db      	lsls	r3, r3, #7
 8006062:	4a04      	ldr	r2, [pc, #16]	; (8006074 <LCDGPIO_Config+0x54>)
 8006064:	0019      	movs	r1, r3
 8006066:	0010      	movs	r0, r2
 8006068:	f7fd faa9 	bl	80035be <GPIO_SetBits>
}
 800606c:	46c0      	nop			; (mov r8, r8)
 800606e:	46bd      	mov	sp, r7
 8006070:	b002      	add	sp, #8
 8006072:	bd80      	pop	{r7, pc}
 8006074:	48000400 	.word	0x48000400

08006078 <LCDSPI_Config>:
 * @brief  Initializes peripheral SPI
 * @param  None
 * @retval None
 */
static void LCDSPI_Config(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef SPI_InitStructure;

	/* Enable the SPI periph */
	RCC_APB2PeriphClockCmd(LCD_SPI_RCC, ENABLE);
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	015b      	lsls	r3, r3, #5
 8006082:	2101      	movs	r1, #1
 8006084:	0018      	movs	r0, r3
 8006086:	f7fd fcfd 	bl	8003a84 <RCC_APB2PeriphClockCmd>

	/* Enable SCK, MOSI, MISO and NSS GPIO clocks */
	RCC_AHBPeriphClockCmd(LCD_GPIO_RCC, ENABLE);
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	029b      	lsls	r3, r3, #10
 800608e:	2101      	movs	r1, #1
 8006090:	0018      	movs	r0, r3
 8006092:	f7fd fcd7 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	// Connect LCD_SPI pins to SPI Alternate Function
	GPIO_PinAFConfig(LCD_SPI_PORT, GPIO_PinSource5, LCD_SPI_AF);
 8006096:	2390      	movs	r3, #144	; 0x90
 8006098:	05db      	lsls	r3, r3, #23
 800609a:	2200      	movs	r2, #0
 800609c:	2105      	movs	r1, #5
 800609e:	0018      	movs	r0, r3
 80060a0:	f7fd faab 	bl	80035fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT, GPIO_PinSource6, LCD_SPI_AF);
 80060a4:	2390      	movs	r3, #144	; 0x90
 80060a6:	05db      	lsls	r3, r3, #23
 80060a8:	2200      	movs	r2, #0
 80060aa:	2106      	movs	r1, #6
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7fd faa4 	bl	80035fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT, GPIO_PinSource7, LCD_SPI_AF);
 80060b2:	2390      	movs	r3, #144	; 0x90
 80060b4:	05db      	lsls	r3, r3, #23
 80060b6:	2200      	movs	r2, #0
 80060b8:	2107      	movs	r1, #7
 80060ba:	0018      	movs	r0, r3
 80060bc:	f7fd fa9d 	bl	80035fa <GPIO_PinAFConfig>

	// Initializes GPIO Use For SPI
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80060c0:	2118      	movs	r1, #24
 80060c2:	187b      	adds	r3, r7, r1
 80060c4:	2202      	movs	r2, #2
 80060c6:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	2200      	movs	r2, #0
 80060cc:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	2200      	movs	r2, #0
 80060d2:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80060d4:	187b      	adds	r3, r7, r1
 80060d6:	2203      	movs	r2, #3
 80060d8:	715a      	strb	r2, [r3, #5]

	GPIO_InitStructure.GPIO_Pin = LCD_SPI_GPIO_SCK | LCD_SPI_GPIO_MOSI | LCD_SPI_GPIO_MISO;
 80060da:	187b      	adds	r3, r7, r1
 80060dc:	22e0      	movs	r2, #224	; 0xe0
 80060de:	601a      	str	r2, [r3, #0]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 80060e0:	187a      	adds	r2, r7, r1
 80060e2:	2390      	movs	r3, #144	; 0x90
 80060e4:	05db      	lsls	r3, r3, #23
 80060e6:	0011      	movs	r1, r2
 80060e8:	0018      	movs	r0, r3
 80060ea:	f7fd f9b1 	bl	8003450 <GPIO_Init>

	/* SPI configuration -----------------------------------------------------*/
	SPI_I2S_DeInit(LCD_SPI);
 80060ee:	4b18      	ldr	r3, [pc, #96]	; (8006150 <LCDSPI_Config+0xd8>)
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7fd fd27 	bl	8003b44 <SPI_I2S_DeInit>

	// Set to full duplex mode, separate MOSI and MISO lines
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80060f6:	1d3b      	adds	r3, r7, #4
 80060f8:	2200      	movs	r2, #0
 80060fa:	801a      	strh	r2, [r3, #0]

	// Transmit in master mode
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80060fc:	1d3b      	adds	r3, r7, #4
 80060fe:	2282      	movs	r2, #130	; 0x82
 8006100:	0052      	lsls	r2, r2, #1
 8006102:	805a      	strh	r2, [r3, #2]

	// One packet of data is 8 bits wide
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8006104:	1d3b      	adds	r3, r7, #4
 8006106:	22e0      	movs	r2, #224	; 0xe0
 8006108:	00d2      	lsls	r2, r2, #3
 800610a:	809a      	strh	r2, [r3, #4]

	// Clock is low when idle
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	2200      	movs	r2, #0
 8006110:	80da      	strh	r2, [r3, #6]

	// Data sampled at first edge
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8006112:	1d3b      	adds	r3, r7, #4
 8006114:	2200      	movs	r2, #0
 8006116:	811a      	strh	r2, [r3, #8]

	// Set NSS us software
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	815a      	strh	r2, [r3, #10]

	// SPI frequency is APB2 frequency / 2
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8006120:	1d3b      	adds	r3, r7, #4
 8006122:	2208      	movs	r2, #8
 8006124:	819a      	strh	r2, [r3, #12]

	// Data is transmitted MSB first
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	2200      	movs	r2, #0
 800612a:	81da      	strh	r2, [r3, #14]

	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	2207      	movs	r2, #7
 8006130:	821a      	strh	r2, [r3, #16]

	SPI_Init(LCD_SPI, &SPI_InitStructure);
 8006132:	1d3b      	adds	r3, r7, #4
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <LCDSPI_Config+0xd8>)
 8006136:	0019      	movs	r1, r3
 8006138:	0010      	movs	r0, r2
 800613a:	f7fd fd31 	bl	8003ba0 <SPI_Init>

	// Enable LCD_SPI
	SPI_Cmd(LCD_SPI, ENABLE);
 800613e:	4b04      	ldr	r3, [pc, #16]	; (8006150 <LCDSPI_Config+0xd8>)
 8006140:	2101      	movs	r1, #1
 8006142:	0018      	movs	r0, r3
 8006144:	f7fd fd9e 	bl	8003c84 <SPI_Cmd>
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b008      	add	sp, #32
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40013000 	.word	0x40013000

08006154 <LCDSPI_WriteByte>:
 * @brief  Write a byte of data using STM32's hardware SPI
 * @param  None
 * @retval None
 */
static uint8_t LCDSPI_WriteByte(SPI_TypeDef* SPIx, uint8_t data)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	000a      	movs	r2, r1
 800615e:	1cfb      	adds	r3, r7, #3
 8006160:	701a      	strb	r2, [r3, #0]
	/* Wait until the transmit buffer is empty */
//	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) != SET)
//	{
//	}
	/* Send the byte */
	SPI_SendData8(LCD_SPI, data);
 8006162:	1cfb      	adds	r3, r7, #3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	4a05      	ldr	r2, [pc, #20]	; (800617c <LCDSPI_WriteByte+0x28>)
 8006168:	0019      	movs	r1, r3
 800616a:	0010      	movs	r0, r2
 800616c:	f7fd fdaa 	bl	8003cc4 <SPI_SendData8>
//
//	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
//	{
//	}

	return 1;
 8006170:	2301      	movs	r3, #1
}
 8006172:	0018      	movs	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	b002      	add	sp, #8
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	40013000 	.word	0x40013000

08006180 <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 8006184:	f000 f918 	bl	80063b8 <LEDGPIO_Config>
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <LedControl_SetColorIndividual>:
void
LedControl_SetColorIndividual(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	0004      	movs	r4, r0
 8006198:	0008      	movs	r0, r1
 800619a:	0011      	movs	r1, r2
 800619c:	1dfb      	adds	r3, r7, #7
 800619e:	1c22      	adds	r2, r4, #0
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	1dbb      	adds	r3, r7, #6
 80061a4:	1c02      	adds	r2, r0, #0
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	1d7b      	adds	r3, r7, #5
 80061aa:	1c0a      	adds	r2, r1, #0
 80061ac:	701a      	strb	r2, [r3, #0]
    if ((led_id >= NUM_OF_LED) || !isTypeLED(led_color) || (led_level > 100))
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d161      	bne.n	800627a <LedControl_SetColorIndividual+0xea>
 80061b6:	1dbb      	adds	r3, r7, #6
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <LedControl_SetColorIndividual+0x3e>
 80061be:	1dbb      	adds	r3, r7, #6
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d003      	beq.n	80061ce <LedControl_SetColorIndividual+0x3e>
 80061c6:	1dbb      	adds	r3, r7, #6
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d155      	bne.n	800627a <LedControl_SetColorIndividual+0xea>
 80061ce:	1d7b      	adds	r3, r7, #5
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b64      	cmp	r3, #100	; 0x64
 80061d4:	d851      	bhi.n	800627a <LedControl_SetColorIndividual+0xea>
        return;
    
    // Get brightness current
    if (led_level == 0)
 80061d6:	1d7b      	adds	r3, r7, #5
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d103      	bne.n	80061e6 <LedControl_SetColorIndividual+0x56>
    {
    	g_brightnessLed = 100;
 80061de:	4b29      	ldr	r3, [pc, #164]	; (8006284 <LedControl_SetColorIndividual+0xf4>)
 80061e0:	2264      	movs	r2, #100	; 0x64
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	e003      	b.n	80061ee <LedControl_SetColorIndividual+0x5e>
    }
    else
    {
    	g_brightnessLed = led_level;
 80061e6:	4b27      	ldr	r3, [pc, #156]	; (8006284 <LedControl_SetColorIndividual+0xf4>)
 80061e8:	1d7a      	adds	r2, r7, #5
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	701a      	strb	r2, [r3, #0]
    }

    if (led_id == LED_KIT_ID)
 80061ee:	1dfb      	adds	r3, r7, #7
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d142      	bne.n	800627c <LedControl_SetColorIndividual+0xec>
	{
    	if (led_color == LED_COLOR_RED)
 80061f6:	1dbb      	adds	r3, r7, #6
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d115      	bne.n	800622a <LedControl_SetColorIndividual+0x9a>
    	{
    		if (led_level != 0)
 80061fe:	1d7b      	adds	r3, r7, #5
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <LedControl_SetColorIndividual+0x88>
			{
				GPIO_SetBits(LED_RED_PORT, LED_RED_PIN);
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	2390      	movs	r3, #144	; 0x90
 800620c:	05db      	lsls	r3, r3, #23
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f7fd f9d4 	bl	80035be <GPIO_SetBits>
 8006216:	e031      	b.n	800627c <LedControl_SetColorIndividual+0xec>
			}
			else
			{
				GPIO_ResetBits(LED_RED_PORT, LED_RED_PIN);
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	2390      	movs	r3, #144	; 0x90
 800621e:	05db      	lsls	r3, r3, #23
 8006220:	0011      	movs	r1, r2
 8006222:	0018      	movs	r0, r3
 8006224:	f7fd f9da 	bl	80035dc <GPIO_ResetBits>
 8006228:	e028      	b.n	800627c <LedControl_SetColorIndividual+0xec>
			}
    	}
    	else if (led_color == LED_COLOR_GREEN)
 800622a:	1dbb      	adds	r3, r7, #6
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d10f      	bne.n	8006252 <LedControl_SetColorIndividual+0xc2>
    	{
    		if (led_level != 0)
 8006232:	1d7b      	adds	r3, r7, #5
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <LedControl_SetColorIndividual+0xb6>
			{
				GPIO_SetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 800623a:	4b13      	ldr	r3, [pc, #76]	; (8006288 <LedControl_SetColorIndividual+0xf8>)
 800623c:	2108      	movs	r1, #8
 800623e:	0018      	movs	r0, r3
 8006240:	f7fd f9bd 	bl	80035be <GPIO_SetBits>
 8006244:	e01a      	b.n	800627c <LedControl_SetColorIndividual+0xec>
			}
			else
			{
				GPIO_ResetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <LedControl_SetColorIndividual+0xf8>)
 8006248:	2108      	movs	r1, #8
 800624a:	0018      	movs	r0, r3
 800624c:	f7fd f9c6 	bl	80035dc <GPIO_ResetBits>
 8006250:	e014      	b.n	800627c <LedControl_SetColorIndividual+0xec>
			}
    	}
    	else /* (led_color == LED_COLOR_BLUE) */
    	{
    		if (led_level != 0)
 8006252:	1d7b      	adds	r3, r7, #5
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <LedControl_SetColorIndividual+0xda>
			{
				GPIO_SetBits(LED_BLUE_PORT, LED_BLUE_PIN);
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	019b      	lsls	r3, r3, #6
 800625e:	4a0b      	ldr	r2, [pc, #44]	; (800628c <LedControl_SetColorIndividual+0xfc>)
 8006260:	0019      	movs	r1, r3
 8006262:	0010      	movs	r0, r2
 8006264:	f7fd f9ab 	bl	80035be <GPIO_SetBits>
 8006268:	e008      	b.n	800627c <LedControl_SetColorIndividual+0xec>
			}
			else
			{
				GPIO_ResetBits(LED_BLUE_PORT, LED_BLUE_PIN);
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	4a07      	ldr	r2, [pc, #28]	; (800628c <LedControl_SetColorIndividual+0xfc>)
 8006270:	0019      	movs	r1, r3
 8006272:	0010      	movs	r0, r2
 8006274:	f7fd f9b2 	bl	80035dc <GPIO_ResetBits>
 8006278:	e000      	b.n	800627c <LedControl_SetColorIndividual+0xec>
        return;
 800627a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 800627c:	46bd      	mov	sp, r7
 800627e:	b003      	add	sp, #12
 8006280:	bd90      	pop	{r4, r7, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	20000134 	.word	0x20000134
 8006288:	48000400 	.word	0x48000400
 800628c:	48000800 	.word	0x48000800

08006290 <LedControl_SetColorGeneral>:
void
LedControl_SetColorGeneral(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	0004      	movs	r4, r0
 8006298:	0008      	movs	r0, r1
 800629a:	0011      	movs	r1, r2
 800629c:	1dfb      	adds	r3, r7, #7
 800629e:	1c22      	adds	r2, r4, #0
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	1dbb      	adds	r3, r7, #6
 80062a4:	1c02      	adds	r2, r0, #0
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	1d7b      	adds	r3, r7, #5
 80062aa:	1c0a      	adds	r2, r1, #0
 80062ac:	701a      	strb	r2, [r3, #0]
    switch (led_color) {
 80062ae:	1dbb      	adds	r3, r7, #6
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d878      	bhi.n	80063a8 <LedControl_SetColorGeneral+0x118>
 80062b6:	009a      	lsls	r2, r3, #2
 80062b8:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <LedControl_SetColorGeneral+0x124>)
 80062ba:	18d3      	adds	r3, r2, r3
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	469f      	mov	pc, r3
        case LED_COLOR_RED:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 80062c0:	1d7b      	adds	r3, r7, #5
 80062c2:	781a      	ldrb	r2, [r3, #0]
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2100      	movs	r1, #0
 80062ca:	0018      	movs	r0, r3
 80062cc:	f7ff ff60 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 80062d0:	1dfb      	adds	r3, r7, #7
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2102      	movs	r1, #2
 80062d8:	0018      	movs	r0, r3
 80062da:	f7ff ff59 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 80062de:	1dfb      	adds	r3, r7, #7
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2101      	movs	r1, #1
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7ff ff52 	bl	8006190 <LedControl_SetColorIndividual>
            break;
 80062ec:	e05d      	b.n	80063aa <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_GREEN:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 80062ee:	1d7b      	adds	r3, r7, #5
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	1dfb      	adds	r3, r7, #7
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2101      	movs	r1, #1
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7ff ff49 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 80062fe:	1dfb      	adds	r3, r7, #7
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	2100      	movs	r1, #0
 8006306:	0018      	movs	r0, r3
 8006308:	f7ff ff42 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 800630c:	1dfb      	adds	r3, r7, #7
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2200      	movs	r2, #0
 8006312:	2102      	movs	r1, #2
 8006314:	0018      	movs	r0, r3
 8006316:	f7ff ff3b 	bl	8006190 <LedControl_SetColorIndividual>
			break;
 800631a:	e046      	b.n	80063aa <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_BLUE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 800631c:	1d7b      	adds	r3, r7, #5
 800631e:	781a      	ldrb	r2, [r3, #0]
 8006320:	1dfb      	adds	r3, r7, #7
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2102      	movs	r1, #2
 8006326:	0018      	movs	r0, r3
 8006328:	f7ff ff32 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 800632c:	1dfb      	adds	r3, r7, #7
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	0018      	movs	r0, r3
 8006336:	f7ff ff2b 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 800633a:	1dfb      	adds	r3, r7, #7
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	2101      	movs	r1, #1
 8006342:	0018      	movs	r0, r3
 8006344:	f7ff ff24 	bl	8006190 <LedControl_SetColorIndividual>
            break;
 8006348:	e02f      	b.n	80063aa <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_WHITE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 800634a:	1d7b      	adds	r3, r7, #5
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	1dfb      	adds	r3, r7, #7
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2102      	movs	r1, #2
 8006354:	0018      	movs	r0, r3
 8006356:	f7ff ff1b 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 800635a:	1d7b      	adds	r3, r7, #5
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	1dfb      	adds	r3, r7, #7
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	0018      	movs	r0, r3
 8006366:	f7ff ff13 	bl	8006190 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 800636a:	1d7b      	adds	r3, r7, #5
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	1dfb      	adds	r3, r7, #7
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2101      	movs	r1, #1
 8006374:	0018      	movs	r0, r3
 8006376:	f7ff ff0b 	bl	8006190 <LedControl_SetColorIndividual>
        	break;
 800637a:	e016      	b.n	80063aa <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_BLACK:
			LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 800637c:	1dfb      	adds	r3, r7, #7
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2200      	movs	r2, #0
 8006382:	2102      	movs	r1, #2
 8006384:	0018      	movs	r0, r3
 8006386:	f7ff ff03 	bl	8006190 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 800638a:	1dfb      	adds	r3, r7, #7
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	2100      	movs	r1, #0
 8006392:	0018      	movs	r0, r3
 8006394:	f7ff fefc 	bl	8006190 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8006398:	1dfb      	adds	r3, r7, #7
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2200      	movs	r2, #0
 800639e:	2101      	movs	r1, #1
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7ff fef5 	bl	8006190 <LedControl_SetColorIndividual>
			break;
 80063a6:	e000      	b.n	80063aa <LedControl_SetColorGeneral+0x11a>

        default:
            break;
 80063a8:	46c0      	nop			; (mov r8, r8)
    }
}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b003      	add	sp, #12
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	0800a770 	.word	0x0800a770

080063b8 <LEDGPIO_Config>:
  * @param  None
  * @retval None
  */
static
void LEDGPIO_Config(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA Clocks enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 80063be:	23e0      	movs	r3, #224	; 0xe0
 80063c0:	031b      	lsls	r3, r3, #12
 80063c2:	2101      	movs	r1, #1
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7fd fb3d 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	/* GPIOA Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_RED_PIN;
 80063ca:	003b      	movs	r3, r7
 80063cc:	2280      	movs	r2, #128	; 0x80
 80063ce:	0152      	lsls	r2, r2, #5
 80063d0:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80063d2:	003b      	movs	r3, r7
 80063d4:	2201      	movs	r2, #1
 80063d6:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80063d8:	003b      	movs	r3, r7
 80063da:	2203      	movs	r2, #3
 80063dc:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80063de:	003b      	movs	r3, r7
 80063e0:	2200      	movs	r2, #0
 80063e2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(LED_RED_PORT, &GPIO_InitStructure);
 80063e4:	003a      	movs	r2, r7
 80063e6:	2390      	movs	r3, #144	; 0x90
 80063e8:	05db      	lsls	r3, r3, #23
 80063ea:	0011      	movs	r1, r2
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fd f82f 	bl	8003450 <GPIO_Init>

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_GREEN_PIN;
 80063f2:	003b      	movs	r3, r7
 80063f4:	2208      	movs	r2, #8
 80063f6:	601a      	str	r2, [r3, #0]
	GPIO_Init(LED_GREEN_PORT, &GPIO_InitStructure);
 80063f8:	003b      	movs	r3, r7
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <LEDGPIO_Config+0x68>)
 80063fc:	0019      	movs	r1, r3
 80063fe:	0010      	movs	r0, r2
 8006400:	f7fd f826 	bl	8003450 <GPIO_Init>

	/* GPIOC Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_BLUE_PIN;
 8006404:	003b      	movs	r3, r7
 8006406:	2280      	movs	r2, #128	; 0x80
 8006408:	0192      	lsls	r2, r2, #6
 800640a:	601a      	str	r2, [r3, #0]
	GPIO_Init(LED_BLUE_PORT, &GPIO_InitStructure);
 800640c:	003b      	movs	r3, r7
 800640e:	4a05      	ldr	r2, [pc, #20]	; (8006424 <LEDGPIO_Config+0x6c>)
 8006410:	0019      	movs	r1, r3
 8006412:	0010      	movs	r0, r2
 8006414:	f7fd f81c 	bl	8003450 <GPIO_Init>
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b002      	add	sp, #8
 800641e:	bd80      	pop	{r7, pc}
 8006420:	48000400 	.word	0x48000400
 8006424:	48000800 	.word	0x48000800

08006428 <Encoder_Init>:
 * @param  None
 * @retval None
 */
void
Encoder_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	EncoderL_GPIO_Config();
 800642c:	f000 f808 	bl	8006440 <EncoderL_GPIO_Config>
	EncoderR_GPIO_Config();
 8006430:	f000 f84e 	bl	80064d0 <EncoderR_GPIO_Config>
	ScanTimer();
 8006434:	f000 fa0c 	bl	8006850 <ScanTimer>
}
 8006438:	46c0      	nop			; (mov r8, r8)
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <EncoderL_GPIO_Config>:
 * @param  None
 * @retval None
 */
static
void EncoderL_GPIO_Config(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	EXTI_InitTypeDef			EXTI_InitStructure;
	NVIC_InitTypeDef			NVIC_InitStructure;

	/* Enable clock GPIOB */
	RCC_AHBPeriphClockCmd(Encoder_RCC_GPIO, ENABLE);
 8006446:	2380      	movs	r3, #128	; 0x80
 8006448:	02db      	lsls	r3, r3, #11
 800644a:	2101      	movs	r1, #1
 800644c:	0018      	movs	r0, r3
 800644e:	f7fd faf9 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Input */
	GPIO_InitStructure.GPIO_Pin = EncoderL1_GPIO_PIN | EncoderL2_GPIO_PIN;
 8006452:	2110      	movs	r1, #16
 8006454:	187b      	adds	r3, r7, r1
 8006456:	22c0      	movs	r2, #192	; 0xc0
 8006458:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800645a:	187b      	adds	r3, r7, r1
 800645c:	2200      	movs	r2, #0
 800645e:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006460:	187b      	adds	r3, r7, r1
 8006462:	2203      	movs	r2, #3
 8006464:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8006466:	187b      	adds	r3, r7, r1
 8006468:	2202      	movs	r2, #2
 800646a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(Encoder_GPIO_PORT, &GPIO_InitStructure);
 800646c:	187b      	adds	r3, r7, r1
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <EncoderL_GPIO_Config+0x8c>)
 8006470:	0019      	movs	r1, r3
 8006472:	0010      	movs	r0, r2
 8006474:	f7fc ffec 	bl	8003450 <GPIO_Init>

	/* Enable Clock Syscfg, Connect EXTI Line6 to PB6 pin */
	RCC_APB2PeriphClockCmd(Encoder_SYSCFG_CLOCK, ENABLE);
 8006478:	2101      	movs	r1, #1
 800647a:	2001      	movs	r0, #1
 800647c:	f7fd fb02 	bl	8003a84 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(Encoder_EXTI_PORT, EncoderL1_EXTI_PinSource);
 8006480:	2107      	movs	r1, #7
 8006482:	2001      	movs	r0, #1
 8006484:	f7fd fc34 	bl	8003cf0 <SYSCFG_EXTILineConfig>

	/* Configure EXTI Line6 */
	EXTI_InitStructure.EXTI_Line =  EncoderL1_EXTI_Line;
 8006488:	2108      	movs	r1, #8
 800648a:	187b      	adds	r3, r7, r1
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	601a      	str	r2, [r3, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8006490:	187b      	adds	r3, r7, r1
 8006492:	2200      	movs	r2, #0
 8006494:	711a      	strb	r2, [r3, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8006496:	187b      	adds	r3, r7, r1
 8006498:	2210      	movs	r2, #16
 800649a:	715a      	strb	r2, [r3, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800649c:	187b      	adds	r3, r7, r1
 800649e:	2201      	movs	r2, #1
 80064a0:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStructure);
 80064a2:	187b      	adds	r3, r7, r1
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7fc ff37 	bl	8003318 <EXTI_Init>

	/* Configure NVIC for Encoder left Interface Update Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	2207      	movs	r2, #7
 80064ae:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 80064b0:	1d3b      	adds	r3, r7, #4
 80064b2:	2200      	movs	r2, #0
 80064b4:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE ;
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	2201      	movs	r2, #1
 80064ba:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	0018      	movs	r0, r3
 80064c0:	f7fd f8ee 	bl	80036a0 <NVIC_Init>
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b006      	add	sp, #24
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	48000400 	.word	0x48000400

080064d0 <EncoderR_GPIO_Config>:
 * @param  None
 * @retval None
 */
static
void EncoderR_GPIO_Config(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	EXTI_InitTypeDef			EXTI_InitStructure;
	NVIC_InitTypeDef			NVIC_InitStructure;

	/* Enable clock GPIOB */
	RCC_AHBPeriphClockCmd(Encoder_RCC_GPIO, ENABLE);
 80064d6:	2380      	movs	r3, #128	; 0x80
 80064d8:	02db      	lsls	r3, r3, #11
 80064da:	2101      	movs	r1, #1
 80064dc:	0018      	movs	r0, r3
 80064de:	f7fd fab1 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Input */
	GPIO_InitStructure.GPIO_Pin = EncoderR1_GPIO_PIN | EncoderR2_GPIO_PIN;
 80064e2:	2110      	movs	r1, #16
 80064e4:	187b      	adds	r3, r7, r1
 80064e6:	2230      	movs	r2, #48	; 0x30
 80064e8:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	2200      	movs	r2, #0
 80064ee:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80064f0:	187b      	adds	r3, r7, r1
 80064f2:	2203      	movs	r2, #3
 80064f4:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80064f6:	187b      	adds	r3, r7, r1
 80064f8:	2202      	movs	r2, #2
 80064fa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(Encoder_GPIO_PORT, &GPIO_InitStructure);
 80064fc:	187b      	adds	r3, r7, r1
 80064fe:	4a17      	ldr	r2, [pc, #92]	; (800655c <EncoderR_GPIO_Config+0x8c>)
 8006500:	0019      	movs	r1, r3
 8006502:	0010      	movs	r0, r2
 8006504:	f7fc ffa4 	bl	8003450 <GPIO_Init>

	/* Enable Clock Syscfg, Connect EXTI Line4 to PB4 pin */
	RCC_APB2PeriphClockCmd(Encoder_SYSCFG_CLOCK, ENABLE);
 8006508:	2101      	movs	r1, #1
 800650a:	2001      	movs	r0, #1
 800650c:	f7fd faba 	bl	8003a84 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(Encoder_EXTI_PORT, EncoderR1_EXTI_PinSource);
 8006510:	2105      	movs	r1, #5
 8006512:	2001      	movs	r0, #1
 8006514:	f7fd fbec 	bl	8003cf0 <SYSCFG_EXTILineConfig>

	/* Configure EXTI Line4 */
	EXTI_InitStructure.EXTI_Line = EncoderR1_EXTI_Line;
 8006518:	2108      	movs	r1, #8
 800651a:	187b      	adds	r3, r7, r1
 800651c:	2220      	movs	r2, #32
 800651e:	601a      	str	r2, [r3, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8006520:	187b      	adds	r3, r7, r1
 8006522:	2200      	movs	r2, #0
 8006524:	711a      	strb	r2, [r3, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8006526:	187b      	adds	r3, r7, r1
 8006528:	2210      	movs	r2, #16
 800652a:	715a      	strb	r2, [r3, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800652c:	187b      	adds	r3, r7, r1
 800652e:	2201      	movs	r2, #1
 8006530:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStructure);
 8006532:	187b      	adds	r3, r7, r1
 8006534:	0018      	movs	r0, r3
 8006536:	f7fc feef 	bl	8003318 <EXTI_Init>

	/* Configure NVIC for Encoder right Interface Update Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	2207      	movs	r2, #7
 800653e:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	2200      	movs	r2, #0
 8006544:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE ;
 8006546:	1d3b      	adds	r3, r7, #4
 8006548:	2201      	movs	r2, #1
 800654a:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	0018      	movs	r0, r3
 8006550:	f7fd f8a6 	bl	80036a0 <NVIC_Init>
}
 8006554:	46c0      	nop			; (mov r8, r8)
 8006556:	46bd      	mov	sp, r7
 8006558:	b006      	add	sp, #24
 800655a:	bd80      	pop	{r7, pc}
 800655c:	48000400 	.word	0x48000400

08006560 <binaryToDecimal>:
 * @brief  Convert Binary To Decimal
 * @param  Binary Number
 * @retval Decimal Number
 */
int16_t binaryToDecimal(int16_t binaryNumber)
{
 8006560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	0002      	movs	r2, r0
 8006568:	1dbb      	adds	r3, r7, #6
 800656a:	801a      	strh	r2, [r3, #0]
    int16_t decimalNumber = 0, i = 0, remainder;
 800656c:	230e      	movs	r3, #14
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	2200      	movs	r2, #0
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	230c      	movs	r3, #12
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	2200      	movs	r2, #0
 800657a:	801a      	strh	r2, [r3, #0]

    while (binaryNumber != 0) {
 800657c:	e051      	b.n	8006622 <binaryToDecimal+0xc2>
        remainder = binaryNumber % 10;
 800657e:	250a      	movs	r5, #10
 8006580:	197c      	adds	r4, r7, r5
 8006582:	1dbb      	adds	r3, r7, #6
 8006584:	2200      	movs	r2, #0
 8006586:	5e9b      	ldrsh	r3, [r3, r2]
 8006588:	210a      	movs	r1, #10
 800658a:	0018      	movs	r0, r3
 800658c:	f7f9 ff34 	bl	80003f8 <__aeabi_idivmod>
 8006590:	000b      	movs	r3, r1
 8006592:	8023      	strh	r3, [r4, #0]
        binaryNumber /= 10;
 8006594:	1dbc      	adds	r4, r7, #6
 8006596:	1dbb      	adds	r3, r7, #6
 8006598:	2200      	movs	r2, #0
 800659a:	5e9b      	ldrsh	r3, [r3, r2]
 800659c:	210a      	movs	r1, #10
 800659e:	0018      	movs	r0, r3
 80065a0:	f7f9 fe44 	bl	800022c <__divsi3>
 80065a4:	0003      	movs	r3, r0
 80065a6:	8023      	strh	r3, [r4, #0]
        decimalNumber += remainder * pow(2, i);
 80065a8:	197b      	adds	r3, r7, r5
 80065aa:	2200      	movs	r2, #0
 80065ac:	5e9b      	ldrsh	r3, [r3, r2]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7fc fa58 	bl	8002a64 <__aeabi_i2d>
 80065b4:	0004      	movs	r4, r0
 80065b6:	000d      	movs	r5, r1
 80065b8:	260c      	movs	r6, #12
 80065ba:	19bb      	adds	r3, r7, r6
 80065bc:	2200      	movs	r2, #0
 80065be:	5e9b      	ldrsh	r3, [r3, r2]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7fc fa4f 	bl	8002a64 <__aeabi_i2d>
 80065c6:	0002      	movs	r2, r0
 80065c8:	000b      	movs	r3, r1
 80065ca:	2000      	movs	r0, #0
 80065cc:	2180      	movs	r1, #128	; 0x80
 80065ce:	05c9      	lsls	r1, r1, #23
 80065d0:	f001 fe0c 	bl	80081ec <pow>
 80065d4:	0002      	movs	r2, r0
 80065d6:	000b      	movs	r3, r1
 80065d8:	0020      	movs	r0, r4
 80065da:	0029      	movs	r1, r5
 80065dc:	f7fb fbaa 	bl	8001d34 <__aeabi_dmul>
 80065e0:	0002      	movs	r2, r0
 80065e2:	000b      	movs	r3, r1
 80065e4:	0014      	movs	r4, r2
 80065e6:	001d      	movs	r5, r3
 80065e8:	230e      	movs	r3, #14
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	2200      	movs	r2, #0
 80065ee:	5e9b      	ldrsh	r3, [r3, r2]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7fc fa37 	bl	8002a64 <__aeabi_i2d>
 80065f6:	0002      	movs	r2, r0
 80065f8:	000b      	movs	r3, r1
 80065fa:	0020      	movs	r0, r4
 80065fc:	0029      	movs	r1, r5
 80065fe:	f7fa fc3f 	bl	8000e80 <__aeabi_dadd>
 8006602:	0002      	movs	r2, r0
 8006604:	000b      	movs	r3, r1
 8006606:	210e      	movs	r1, #14
 8006608:	187c      	adds	r4, r7, r1
 800660a:	0010      	movs	r0, r2
 800660c:	0019      	movs	r1, r3
 800660e:	f7fc f9f3 	bl	80029f8 <__aeabi_d2iz>
 8006612:	0003      	movs	r3, r0
 8006614:	8023      	strh	r3, [r4, #0]
        ++i;
 8006616:	19bb      	adds	r3, r7, r6
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	19bb      	adds	r3, r7, r6
 8006620:	801a      	strh	r2, [r3, #0]
    while (binaryNumber != 0) {
 8006622:	1dbb      	adds	r3, r7, #6
 8006624:	2200      	movs	r2, #0
 8006626:	5e9b      	ldrsh	r3, [r3, r2]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1a8      	bne.n	800657e <binaryToDecimal+0x1e>
    }

    return decimalNumber;
 800662c:	230e      	movs	r3, #14
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2200      	movs	r2, #0
 8006632:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006634:	0018      	movs	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	b005      	add	sp, #20
 800663a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800663c <EXTI4_15_IRQHandler>:
 * @brief  Handler interrupt of encoder for count pulse
 * @param  None
 * @retval None
 */
void EXTI4_15_IRQHandler(void)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	/* Count Pulse Encoder Left */
	char EncoderL_pinA = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderL1_GPIO_PIN);
 8006642:	1dfc      	adds	r4, r7, #7
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <EXTI4_15_IRQHandler+0x108>)
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	0018      	movs	r0, r3
 800664a:	f7fc ff95 	bl	8003578 <GPIO_ReadInputDataBit>
 800664e:	0003      	movs	r3, r0
 8006650:	7023      	strb	r3, [r4, #0]
	char EncoderL_pinB = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderL2_GPIO_PIN);
 8006652:	1dbc      	adds	r4, r7, #6
 8006654:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <EXTI4_15_IRQHandler+0x108>)
 8006656:	2140      	movs	r1, #64	; 0x40
 8006658:	0018      	movs	r0, r3
 800665a:	f7fc ff8d 	bl	8003578 <GPIO_ReadInputDataBit>
 800665e:	0003      	movs	r3, r0
 8006660:	7023      	strb	r3, [r4, #0]

	/* Handler EXTI_Line7 to PB7 */
	if(EXTI_GetFlagStatus(EncoderL1_EXTI_Line) == SET) {
 8006662:	2080      	movs	r0, #128	; 0x80
 8006664:	f7fc fec8 	bl	80033f8 <EXTI_GetFlagStatus>
 8006668:	0003      	movs	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d127      	bne.n	80066be <EXTI4_15_IRQHandler+0x82>
		/* Pulse Noise Filtering */
		EncoderL_Val   = EncoderL_Val << 2;
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <EXTI4_15_IRQHandler+0x10c>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4b34      	ldr	r3, [pc, #208]	; (8006748 <EXTI4_15_IRQHandler+0x10c>)
 8006678:	701a      	strb	r2, [r3, #0]
		EncoderL_Val   = (( EncoderL_pinA | EncoderL_pinB) | EncoderL_Val ) & 0x0f;
 800667a:	1dfa      	adds	r2, r7, #7
 800667c:	1dbb      	adds	r3, r7, #6
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <EXTI4_15_IRQHandler+0x10c>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	4313      	orrs	r3, r2
 800668c:	b2db      	uxtb	r3, r3
 800668e:	220f      	movs	r2, #15
 8006690:	4013      	ands	r3, r2
 8006692:	b2da      	uxtb	r2, r3
 8006694:	4b2c      	ldr	r3, [pc, #176]	; (8006748 <EXTI4_15_IRQHandler+0x10c>)
 8006696:	701a      	strb	r2, [r3, #0]
		encoderL_temp += State[binaryToDecimal(EncoderL_Val)];
 8006698:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <EXTI4_15_IRQHandler+0x10c>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b21b      	sxth	r3, r3
 800669e:	0018      	movs	r0, r3
 80066a0:	f7ff ff5e 	bl	8006560 <binaryToDecimal>
 80066a4:	0003      	movs	r3, r0
 80066a6:	001a      	movs	r2, r3
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <EXTI4_15_IRQHandler+0x110>)
 80066aa:	5c9b      	ldrb	r3, [r3, r2]
 80066ac:	001a      	movs	r2, r3
 80066ae:	4b28      	ldr	r3, [pc, #160]	; (8006750 <EXTI4_15_IRQHandler+0x114>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	18d2      	adds	r2, r2, r3
 80066b4:	4b26      	ldr	r3, [pc, #152]	; (8006750 <EXTI4_15_IRQHandler+0x114>)
 80066b6:	601a      	str	r2, [r3, #0]

		EXTI_ClearITPendingBit(EncoderL1_EXTI_Line);
 80066b8:	2080      	movs	r0, #128	; 0x80
 80066ba:	f7fc febb 	bl	8003434 <EXTI_ClearITPendingBit>
	}

	/* Count Pulse Encoder Right */
	char EncoderR_pinA = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderR1_GPIO_PIN);
 80066be:	1d7c      	adds	r4, r7, #5
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <EXTI4_15_IRQHandler+0x108>)
 80066c2:	2120      	movs	r1, #32
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7fc ff57 	bl	8003578 <GPIO_ReadInputDataBit>
 80066ca:	0003      	movs	r3, r0
 80066cc:	7023      	strb	r3, [r4, #0]
	char EncoderR_pinB = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderR2_GPIO_PIN);
 80066ce:	1d3c      	adds	r4, r7, #4
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <EXTI4_15_IRQHandler+0x108>)
 80066d2:	2110      	movs	r1, #16
 80066d4:	0018      	movs	r0, r3
 80066d6:	f7fc ff4f 	bl	8003578 <GPIO_ReadInputDataBit>
 80066da:	0003      	movs	r3, r0
 80066dc:	7023      	strb	r3, [r4, #0]

	/* Handler EXTI_Line5 to PB5 */
	if(EXTI_GetFlagStatus(EncoderR1_EXTI_Line) == SET) {
 80066de:	2020      	movs	r0, #32
 80066e0:	f7fc fe8a 	bl	80033f8 <EXTI_GetFlagStatus>
 80066e4:	0003      	movs	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d127      	bne.n	800673a <EXTI4_15_IRQHandler+0xfe>
		/* Pulse Noise Filtering */
		EncoderR_Val   = EncoderR_Val << 2;
 80066ea:	4b1a      	ldr	r3, [pc, #104]	; (8006754 <EXTI4_15_IRQHandler+0x118>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	4b18      	ldr	r3, [pc, #96]	; (8006754 <EXTI4_15_IRQHandler+0x118>)
 80066f4:	701a      	strb	r2, [r3, #0]
		EncoderR_Val   = (( EncoderR_pinA | EncoderR_pinB) | EncoderR_Val ) & 0x0f;
 80066f6:	1d7a      	adds	r2, r7, #5
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4313      	orrs	r3, r2
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4b14      	ldr	r3, [pc, #80]	; (8006754 <EXTI4_15_IRQHandler+0x118>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	b2db      	uxtb	r3, r3
 800670a:	220f      	movs	r2, #15
 800670c:	4013      	ands	r3, r2
 800670e:	b2da      	uxtb	r2, r3
 8006710:	4b10      	ldr	r3, [pc, #64]	; (8006754 <EXTI4_15_IRQHandler+0x118>)
 8006712:	701a      	strb	r2, [r3, #0]
		encoderR_temp += State[binaryToDecimal(EncoderR_Val)];
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <EXTI4_15_IRQHandler+0x118>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b21b      	sxth	r3, r3
 800671a:	0018      	movs	r0, r3
 800671c:	f7ff ff20 	bl	8006560 <binaryToDecimal>
 8006720:	0003      	movs	r3, r0
 8006722:	001a      	movs	r2, r3
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <EXTI4_15_IRQHandler+0x110>)
 8006726:	5c9b      	ldrb	r3, [r3, r2]
 8006728:	001a      	movs	r2, r3
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <EXTI4_15_IRQHandler+0x11c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	18d2      	adds	r2, r2, r3
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <EXTI4_15_IRQHandler+0x11c>)
 8006732:	601a      	str	r2, [r3, #0]

		EXTI_ClearITPendingBit(EncoderR1_EXTI_Line);
 8006734:	2020      	movs	r0, #32
 8006736:	f7fc fe7d 	bl	8003434 <EXTI_ClearITPendingBit>
	}
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	46bd      	mov	sp, r7
 800673e:	b003      	add	sp, #12
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	48000400 	.word	0x48000400
 8006748:	20000135 	.word	0x20000135
 800674c:	2000003c 	.word	0x2000003c
 8006750:	20000138 	.word	0x20000138
 8006754:	20000136 	.word	0x20000136
 8006758:	2000013c 	.word	0x2000013c

0800675c <CalculateSpeed>:
 * @param  None
 * @retval None
 */
static
void CalculateSpeed(void *arg)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	/* Calculate speed encoder in 1ms */
	if (stateEncoder == false) {
 8006764:	4b32      	ldr	r3, [pc, #200]	; (8006830 <CalculateSpeed+0xd4>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	4053      	eors	r3, r2
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d059      	beq.n	8006826 <CalculateSpeed+0xca>
		SpeedL_1ms += (uint32_t)((encoderL_temp * 1000) / ENCODER_PULSE_ROUND);	// v/s
 8006772:	4b30      	ldr	r3, [pc, #192]	; (8006834 <CalculateSpeed+0xd8>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	0013      	movs	r3, r2
 8006778:	015b      	lsls	r3, r3, #5
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	189b      	adds	r3, r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	21d2      	movs	r1, #210	; 0xd2
 8006784:	0018      	movs	r0, r3
 8006786:	f7f9 fcc7 	bl	8000118 <__udivsi3>
 800678a:	0003      	movs	r3, r0
 800678c:	001a      	movs	r2, r3
 800678e:	4b2a      	ldr	r3, [pc, #168]	; (8006838 <CalculateSpeed+0xdc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	18d2      	adds	r2, r2, r3
 8006794:	4b28      	ldr	r3, [pc, #160]	; (8006838 <CalculateSpeed+0xdc>)
 8006796:	601a      	str	r2, [r3, #0]
		SpeedR_1ms += (uint32_t)((encoderR_temp * 1000) / ENCODER_PULSE_ROUND);	// v/s
 8006798:	4b28      	ldr	r3, [pc, #160]	; (800683c <CalculateSpeed+0xe0>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	0013      	movs	r3, r2
 800679e:	015b      	lsls	r3, r3, #5
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	21d2      	movs	r1, #210	; 0xd2
 80067aa:	0018      	movs	r0, r3
 80067ac:	f7f9 fcb4 	bl	8000118 <__udivsi3>
 80067b0:	0003      	movs	r3, r0
 80067b2:	001a      	movs	r2, r3
 80067b4:	4b22      	ldr	r3, [pc, #136]	; (8006840 <CalculateSpeed+0xe4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	18d2      	adds	r2, r2, r3
 80067ba:	4b21      	ldr	r3, [pc, #132]	; (8006840 <CalculateSpeed+0xe4>)
 80067bc:	601a      	str	r2, [r3, #0]
		count++;
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <CalculateSpeed+0xe8>)
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <CalculateSpeed+0xe8>)
 80067c8:	801a      	strh	r2, [r3, #0]

		/* Calculate speed encoder in 4ms */
		if(count >= 5) {
 80067ca:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <CalculateSpeed+0xe8>)
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d929      	bls.n	8006826 <CalculateSpeed+0xca>
			stateEncoder = true;
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <CalculateSpeed+0xd4>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
			encoderL_speed = (uint32_t)(SpeedL_1ms / count);	// v/s
 80067d8:	4b17      	ldr	r3, [pc, #92]	; (8006838 <CalculateSpeed+0xdc>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4b19      	ldr	r3, [pc, #100]	; (8006844 <CalculateSpeed+0xe8>)
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	0019      	movs	r1, r3
 80067e2:	0010      	movs	r0, r2
 80067e4:	f7f9 fc98 	bl	8000118 <__udivsi3>
 80067e8:	0003      	movs	r3, r0
 80067ea:	001a      	movs	r2, r3
 80067ec:	4b16      	ldr	r3, [pc, #88]	; (8006848 <CalculateSpeed+0xec>)
 80067ee:	601a      	str	r2, [r3, #0]
			encoderR_speed = (uint32_t)(SpeedR_1ms / count);	// v/s
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <CalculateSpeed+0xe4>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b13      	ldr	r3, [pc, #76]	; (8006844 <CalculateSpeed+0xe8>)
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	0019      	movs	r1, r3
 80067fa:	0010      	movs	r0, r2
 80067fc:	f7f9 fc8c 	bl	8000118 <__udivsi3>
 8006800:	0003      	movs	r3, r0
 8006802:	001a      	movs	r2, r3
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <CalculateSpeed+0xf0>)
 8006806:	601a      	str	r2, [r3, #0]

			/* Reset Count Pulse, Speed, Count */
			encoderL_temp = 0;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <CalculateSpeed+0xd8>)
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
			encoderR_temp = 0;
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <CalculateSpeed+0xe0>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
			SpeedL_1ms = 0;
 8006814:	4b08      	ldr	r3, [pc, #32]	; (8006838 <CalculateSpeed+0xdc>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
			SpeedR_1ms = 0;
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <CalculateSpeed+0xe4>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
			count = 0;
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <CalculateSpeed+0xe8>)
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	46bd      	mov	sp, r7
 800682a:	b002      	add	sp, #8
 800682c:	bd80      	pop	{r7, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	2000014a 	.word	0x2000014a
 8006834:	20000138 	.word	0x20000138
 8006838:	20000140 	.word	0x20000140
 800683c:	2000013c 	.word	0x2000013c
 8006840:	20000144 	.word	0x20000144
 8006844:	20000148 	.word	0x20000148
 8006848:	2000055c 	.word	0x2000055c
 800684c:	20000560 	.word	0x20000560

08006850 <ScanTimer>:
 * @param  None
 * @retval None
 */
static
void ScanTimer(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af02      	add	r7, sp, #8
	if(idTimerScanSpeed != NO_TIMER) {
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <ScanTimer+0x3c>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2bff      	cmp	r3, #255	; 0xff
 800685c:	d007      	beq.n	800686e <ScanTimer+0x1e>
		TimerStop(idTimerScanSpeed);
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <ScanTimer+0x3c>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	0018      	movs	r0, r3
 8006864:	f000 fd5a 	bl	800731c <TimerStop>
		idTimerScanSpeed = NO_TIMER;
 8006868:	4b08      	ldr	r3, [pc, #32]	; (800688c <ScanTimer+0x3c>)
 800686a:	22ff      	movs	r2, #255	; 0xff
 800686c:	701a      	strb	r2, [r3, #0]
	}

	idTimerScanSpeed = TimerStart("CalculateSpeed", 	\
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <ScanTimer+0x40>)
 8006870:	4808      	ldr	r0, [pc, #32]	; (8006894 <ScanTimer+0x44>)
 8006872:	2200      	movs	r2, #0
 8006874:	9200      	str	r2, [sp, #0]
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	2101      	movs	r1, #1
 800687a:	f000 fcdb 	bl	8007234 <TimerStart>
 800687e:	0003      	movs	r3, r0
 8006880:	001a      	movs	r2, r3
 8006882:	4b02      	ldr	r3, [pc, #8]	; (800688c <ScanTimer+0x3c>)
 8006884:	701a      	strb	r2, [r3, #0]
								  SAMPLE_TIME, 			\
								  TIMER_REPEAT_FOREVER, \
							 	  CalculateSpeed,       \
								  NULL);
}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	2000004c 	.word	0x2000004c
 8006890:	0800675d 	.word	0x0800675d
 8006894:	08009024 	.word	0x08009024

08006898 <MotorControl_Init>:
 * @param  None
 * @retval None
 */
void
MotorControl_Init(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
	// Initialize pins GPIO motor
	ML_GPIO_Config();
 800689c:	f000 f8ae 	bl	80069fc <ML_GPIO_Config>
	MR_GPIO_Config();
 80068a0:	f000 f804 	bl	80068ac <MR_GPIO_Config>
}
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <MR_GPIO_Config>:
 * @brief  Configure GPIO for motor right
 * @param  None
 * @retval None
 */
static
void MR_GPIO_Config(void) {
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b08b      	sub	sp, #44	; 0x2c
 80068b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStructure;
	TIM_OCInitTypeDef 			TIM_OCInitStructure;

	/* Enable clock GPIOB, GPIOA */
	RCC_AHBPeriphClockCmd(MotorR1_RCC_GPIO | MotorR2_RCC_GPIO, ENABLE);
 80068b2:	23c0      	movs	r3, #192	; 0xc0
 80068b4:	02db      	lsls	r3, r3, #11
 80068b6:	2101      	movs	r1, #1
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7fd f8c3 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Output Compare */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80068be:	2120      	movs	r1, #32
 80068c0:	187b      	adds	r3, r7, r1
 80068c2:	2202      	movs	r2, #2
 80068c4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80068c6:	187b      	adds	r3, r7, r1
 80068c8:	2200      	movs	r2, #0
 80068ca:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80068cc:	187b      	adds	r3, r7, r1
 80068ce:	2200      	movs	r2, #0
 80068d0:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80068d2:	187b      	adds	r3, r7, r1
 80068d4:	2203      	movs	r2, #3
 80068d6:	715a      	strb	r2, [r3, #5]

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MotorR1_GPIO_PIN;
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	0212      	lsls	r2, r2, #8
 80068de:	601a      	str	r2, [r3, #0]
	GPIO_Init(MotorR1_GPIO_PORT, &GPIO_InitStructure);
 80068e0:	000c      	movs	r4, r1
 80068e2:	187b      	adds	r3, r7, r1
 80068e4:	4a41      	ldr	r2, [pc, #260]	; (80069ec <MR_GPIO_Config+0x140>)
 80068e6:	0019      	movs	r1, r3
 80068e8:	0010      	movs	r0, r2
 80068ea:	f7fc fdb1 	bl	8003450 <GPIO_Init>

	/* GPIOA Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MotorR2_GPIO_PIN;
 80068ee:	0021      	movs	r1, r4
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	0052      	lsls	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
	GPIO_Init(MotorR2_GPIO_PORT, &GPIO_InitStructure);
 80068f8:	187a      	adds	r2, r7, r1
 80068fa:	2390      	movs	r3, #144	; 0x90
 80068fc:	05db      	lsls	r3, r3, #23
 80068fe:	0011      	movs	r1, r2
 8006900:	0018      	movs	r0, r3
 8006902:	f7fc fda5 	bl	8003450 <GPIO_Init>

	GPIO_PinAFConfig(MotorR1_GPIO_PORT, MotorR1_PinSource, MotorR1_GPIO_AF);
 8006906:	4b39      	ldr	r3, [pc, #228]	; (80069ec <MR_GPIO_Config+0x140>)
 8006908:	2201      	movs	r2, #1
 800690a:	210f      	movs	r1, #15
 800690c:	0018      	movs	r0, r3
 800690e:	f7fc fe74 	bl	80035fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(MotorR2_GPIO_PORT, MotorR2_PinSource, MotorR2_GPIO_AF);
 8006912:	2390      	movs	r3, #144	; 0x90
 8006914:	05db      	lsls	r3, r3, #23
 8006916:	2202      	movs	r2, #2
 8006918:	2108      	movs	r1, #8
 800691a:	0018      	movs	r0, r3
 800691c:	f7fc fe6d 	bl	80035fa <GPIO_PinAFConfig>

	/* Enable TIM1, TIM15 clock */
	RCC_APB2PeriphClockCmd(MotorR1_RCC_TIM, ENABLE);
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	025b      	lsls	r3, r3, #9
 8006924:	2101      	movs	r1, #1
 8006926:	0018      	movs	r0, r3
 8006928:	f7fd f8ac 	bl	8003a84 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(MotorR2_RCC_TIM, ENABLE);
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	2101      	movs	r1, #1
 8006932:	0018      	movs	r0, r3
 8006934:	f7fd f8a6 	bl	8003a84 <RCC_APB2PeriphClockCmd>

	/* Initializes Use Timer Base */
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006938:	2114      	movs	r1, #20
 800693a:	187b      	adds	r3, r7, r1
 800693c:	2200      	movs	r2, #0
 800693e:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInitStructure.TIM_Prescaler = MOTOR_TIM_PRESCALE - 1;
 8006940:	187b      	adds	r3, r7, r1
 8006942:	222f      	movs	r2, #47	; 0x2f
 8006944:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInitStructure.TIM_Period = MOTOR_TIM_PERIOD - 1;
 8006946:	187b      	adds	r3, r7, r1
 8006948:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <MR_GPIO_Config+0x144>)
 800694a:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
 800694c:	187b      	adds	r3, r7, r1
 800694e:	2200      	movs	r2, #0
 8006950:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
 8006952:	187b      	adds	r3, r7, r1
 8006954:	2200      	movs	r2, #0
 8006956:	729a      	strb	r2, [r3, #10]

	TIM_TimeBaseInit(MotorR1_TIM, &TIM_TimeBaseInitStructure);
 8006958:	000c      	movs	r4, r1
 800695a:	187b      	adds	r3, r7, r1
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <MR_GPIO_Config+0x148>)
 800695e:	0019      	movs	r1, r3
 8006960:	0010      	movs	r0, r2
 8006962:	f7fd fa0d 	bl	8003d80 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(MotorR2_TIM, &TIM_TimeBaseInitStructure);
 8006966:	193b      	adds	r3, r7, r4
 8006968:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <MR_GPIO_Config+0x14c>)
 800696a:	0019      	movs	r1, r3
 800696c:	0010      	movs	r0, r2
 800696e:	f7fd fa07 	bl	8003d80 <TIM_TimeBaseInit>

	//Timer OC Configure
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8006972:	003b      	movs	r3, r7
 8006974:	2260      	movs	r2, #96	; 0x60
 8006976:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006978:	003b      	movs	r3, r7
 800697a:	2201      	movs	r2, #1
 800697c:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 800697e:	003b      	movs	r3, r7
 8006980:	2204      	movs	r2, #4
 8006982:	809a      	strh	r2, [r3, #4]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8006984:	003b      	movs	r3, r7
 8006986:	2200      	movs	r2, #0
 8006988:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 800698a:	003b      	movs	r3, r7
 800698c:	2208      	movs	r2, #8
 800698e:	81da      	strh	r2, [r3, #14]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8006990:	003b      	movs	r3, r7
 8006992:	2280      	movs	r2, #128	; 0x80
 8006994:	0052      	lsls	r2, r2, #1
 8006996:	821a      	strh	r2, [r3, #16]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8006998:	003b      	movs	r3, r7
 800699a:	2200      	movs	r2, #0
 800699c:	825a      	strh	r2, [r3, #18]
	TIM_OCInitStructure.TIM_Pulse = 0;
 800699e:	003b      	movs	r3, r7
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]

	TIM_OC2Init(MotorR1_TIM, &TIM_OCInitStructure);
 80069a4:	003b      	movs	r3, r7
 80069a6:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <MR_GPIO_Config+0x148>)
 80069a8:	0019      	movs	r1, r3
 80069aa:	0010      	movs	r0, r2
 80069ac:	f7fd fb64 	bl	8004078 <TIM_OC2Init>
	TIM_OC1Init(MotorR2_TIM, &TIM_OCInitStructure);
 80069b0:	003b      	movs	r3, r7
 80069b2:	4a11      	ldr	r2, [pc, #68]	; (80069f8 <MR_GPIO_Config+0x14c>)
 80069b4:	0019      	movs	r1, r3
 80069b6:	0010      	movs	r0, r2
 80069b8:	f7fd faa6 	bl	8003f08 <TIM_OC1Init>

	TIM_Cmd(MotorR1_TIM, ENABLE);
 80069bc:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <MR_GPIO_Config+0x148>)
 80069be:	2101      	movs	r1, #1
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fd fa5b 	bl	8003e7c <TIM_Cmd>
	TIM_Cmd(MotorR2_TIM, ENABLE);
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <MR_GPIO_Config+0x14c>)
 80069c8:	2101      	movs	r1, #1
 80069ca:	0018      	movs	r0, r3
 80069cc:	f7fd fa56 	bl	8003e7c <TIM_Cmd>

	TIM_CtrlPWMOutputs(MotorR1_TIM, ENABLE);
 80069d0:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <MR_GPIO_Config+0x148>)
 80069d2:	2101      	movs	r1, #1
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fd fa71 	bl	8003ebc <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(MotorR2_TIM, ENABLE);
 80069da:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <MR_GPIO_Config+0x14c>)
 80069dc:	2101      	movs	r1, #1
 80069de:	0018      	movs	r0, r3
 80069e0:	f7fd fa6c 	bl	8003ebc <TIM_CtrlPWMOutputs>
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b00b      	add	sp, #44	; 0x2c
 80069ea:	bd90      	pop	{r4, r7, pc}
 80069ec:	48000400 	.word	0x48000400
 80069f0:	000003e7 	.word	0x000003e7
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40012c00 	.word	0x40012c00

080069fc <ML_GPIO_Config>:
 * @func   ML_GPIO_Config
 * @brief  Configure GPIO for motor left
 * @param  None
 * @retval None
 */
static void ML_GPIO_Config(void) {
 80069fc:	b590      	push	{r4, r7, lr}
 80069fe:	b08b      	sub	sp, #44	; 0x2c
 8006a00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStructure;
	TIM_OCInitTypeDef			TIM_OCInitStructure;

	/* Enable clock GPIOB */
	RCC_AHBPeriphClockCmd(MotorL_RCC_GPIO, ENABLE);
 8006a02:	2380      	movs	r3, #128	; 0x80
 8006a04:	02db      	lsls	r3, r3, #11
 8006a06:	2101      	movs	r1, #1
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fd f81b 	bl	8003a44 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Output Compare */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006a0e:	2120      	movs	r1, #32
 8006a10:	187b      	adds	r3, r7, r1
 8006a12:	2202      	movs	r2, #2
 8006a14:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	2200      	movs	r2, #0
 8006a1a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006a1c:	187b      	adds	r3, r7, r1
 8006a1e:	2200      	movs	r2, #0
 8006a20:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	2203      	movs	r2, #3
 8006a26:	715a      	strb	r2, [r3, #5]

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MotorL1_GPIO_PIN | MotorL2_GPIO_PIN;
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	22c0      	movs	r2, #192	; 0xc0
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	601a      	str	r2, [r3, #0]
	GPIO_Init(MotorL_GPIO_PORT, &GPIO_InitStructure);
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	4a3b      	ldr	r2, [pc, #236]	; (8006b20 <ML_GPIO_Config+0x124>)
 8006a34:	0019      	movs	r1, r3
 8006a36:	0010      	movs	r0, r2
 8006a38:	f7fc fd0a 	bl	8003450 <GPIO_Init>

	GPIO_PinAFConfig(MotorL_GPIO_PORT, MotorL1_PinSource, MotorL_GPIO_AF);
 8006a3c:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <ML_GPIO_Config+0x124>)
 8006a3e:	2202      	movs	r2, #2
 8006a40:	2108      	movs	r1, #8
 8006a42:	0018      	movs	r0, r3
 8006a44:	f7fc fdd9 	bl	80035fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(MotorL_GPIO_PORT, MotorL2_PinSource, MotorL_GPIO_AF);
 8006a48:	4b35      	ldr	r3, [pc, #212]	; (8006b20 <ML_GPIO_Config+0x124>)
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	2109      	movs	r1, #9
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f7fc fdd3 	bl	80035fa <GPIO_PinAFConfig>

	/* Enable TIM16, TIM17 clock */
	RCC_APB2PeriphClockCmd(MotorL1_RCC_TIM, ENABLE);
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	2101      	movs	r1, #1
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7fd f812 	bl	8003a84 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(MotorL2_RCC_TIM, ENABLE);
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	02db      	lsls	r3, r3, #11
 8006a64:	2101      	movs	r1, #1
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7fd f80c 	bl	8003a84 <RCC_APB2PeriphClockCmd>

	/* Initializes Use Timer Base */
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006a6c:	2114      	movs	r1, #20
 8006a6e:	187b      	adds	r3, r7, r1
 8006a70:	2200      	movs	r2, #0
 8006a72:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInitStructure.TIM_Prescaler = MOTOR_TIM_PRESCALE - 1;
 8006a74:	187b      	adds	r3, r7, r1
 8006a76:	222f      	movs	r2, #47	; 0x2f
 8006a78:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInitStructure.TIM_Period = MOTOR_TIM_PERIOD - 1;
 8006a7a:	187b      	adds	r3, r7, r1
 8006a7c:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <ML_GPIO_Config+0x128>)
 8006a7e:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
 8006a80:	187b      	adds	r3, r7, r1
 8006a82:	2200      	movs	r2, #0
 8006a84:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
 8006a86:	187b      	adds	r3, r7, r1
 8006a88:	2200      	movs	r2, #0
 8006a8a:	729a      	strb	r2, [r3, #10]

	TIM_TimeBaseInit(MotorL1_TIM, &TIM_TimeBaseInitStructure);
 8006a8c:	000c      	movs	r4, r1
 8006a8e:	187b      	adds	r3, r7, r1
 8006a90:	4a25      	ldr	r2, [pc, #148]	; (8006b28 <ML_GPIO_Config+0x12c>)
 8006a92:	0019      	movs	r1, r3
 8006a94:	0010      	movs	r0, r2
 8006a96:	f7fd f973 	bl	8003d80 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(MotorL2_TIM, &TIM_TimeBaseInitStructure);
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	4a23      	ldr	r2, [pc, #140]	; (8006b2c <ML_GPIO_Config+0x130>)
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	0010      	movs	r0, r2
 8006aa2:	f7fd f96d 	bl	8003d80 <TIM_TimeBaseInit>

	//Timer OC Configure
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8006aa6:	003b      	movs	r3, r7
 8006aa8:	2260      	movs	r2, #96	; 0x60
 8006aaa:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006aac:	003b      	movs	r3, r7
 8006aae:	2201      	movs	r2, #1
 8006ab0:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8006ab2:	003b      	movs	r3, r7
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	809a      	strh	r2, [r3, #4]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8006ab8:	003b      	movs	r3, r7
 8006aba:	2200      	movs	r2, #0
 8006abc:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8006abe:	003b      	movs	r3, r7
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	81da      	strh	r2, [r3, #14]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8006ac4:	003b      	movs	r3, r7
 8006ac6:	2280      	movs	r2, #128	; 0x80
 8006ac8:	0052      	lsls	r2, r2, #1
 8006aca:	821a      	strh	r2, [r3, #16]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8006acc:	003b      	movs	r3, r7
 8006ace:	2200      	movs	r2, #0
 8006ad0:	825a      	strh	r2, [r3, #18]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006ad2:	003b      	movs	r3, r7
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	609a      	str	r2, [r3, #8]

	TIM_OC1Init(MotorL1_TIM, &TIM_OCInitStructure);
 8006ad8:	003b      	movs	r3, r7
 8006ada:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <ML_GPIO_Config+0x12c>)
 8006adc:	0019      	movs	r1, r3
 8006ade:	0010      	movs	r0, r2
 8006ae0:	f7fd fa12 	bl	8003f08 <TIM_OC1Init>
	TIM_OC1Init(MotorL2_TIM, &TIM_OCInitStructure);
 8006ae4:	003b      	movs	r3, r7
 8006ae6:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <ML_GPIO_Config+0x130>)
 8006ae8:	0019      	movs	r1, r3
 8006aea:	0010      	movs	r0, r2
 8006aec:	f7fd fa0c 	bl	8003f08 <TIM_OC1Init>

	TIM_Cmd(MotorL1_TIM, ENABLE);
 8006af0:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <ML_GPIO_Config+0x12c>)
 8006af2:	2101      	movs	r1, #1
 8006af4:	0018      	movs	r0, r3
 8006af6:	f7fd f9c1 	bl	8003e7c <TIM_Cmd>
	TIM_Cmd(MotorL2_TIM, ENABLE);
 8006afa:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <ML_GPIO_Config+0x130>)
 8006afc:	2101      	movs	r1, #1
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7fd f9bc 	bl	8003e7c <TIM_Cmd>

	TIM_CtrlPWMOutputs(MotorL1_TIM, ENABLE);
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <ML_GPIO_Config+0x12c>)
 8006b06:	2101      	movs	r1, #1
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7fd f9d7 	bl	8003ebc <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(MotorL2_TIM, ENABLE);
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <ML_GPIO_Config+0x130>)
 8006b10:	2101      	movs	r1, #1
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7fd f9d2 	bl	8003ebc <TIM_CtrlPWMOutputs>
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b00b      	add	sp, #44	; 0x2c
 8006b1e:	bd90      	pop	{r4, r7, pc}
 8006b20:	48000400 	.word	0x48000400
 8006b24:	000003e7 	.word	0x000003e7
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800

08006b30 <MotorControl_ForwardRotating>:
 * @param  id:
 *         dutycycle:
 * @retval None
 */
void MotorControl_ForwardRotating(motor_id_e id, uint32_t dutycycle)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	0002      	movs	r2, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	1dfb      	adds	r3, r7, #7
 8006b3c:	701a      	strb	r2, [r3, #0]
	uint32_t compare;

	switch (id) {
 8006b3e:	1dfb      	adds	r3, r7, #7
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <MotorControl_ForwardRotating+0x1c>
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d023      	beq.n	8006b92 <MotorControl_ForwardRotating+0x62>
			TIM_SetCompare1(MotorR2_TIM, compare);
			TIM_SetCompare2(MotorR1_TIM, 0);
			break;

		default:
			break;
 8006b4a:	e045      	b.n	8006bd8 <MotorControl_ForwardRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	0013      	movs	r3, r2
 8006b50:	015b      	lsls	r3, r3, #5
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	2164      	movs	r1, #100	; 0x64
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f7f9 fadb 	bl	8000118 <__udivsi3>
 8006b62:	0003      	movs	r3, r0
 8006b64:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorL1_TIM, 0);
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <MotorControl_ForwardRotating+0xb0>)
 8006b68:	2100      	movs	r1, #0
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f7fd f97a 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCounter(MotorL2_TIM, 0);
 8006b70:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <MotorControl_ForwardRotating+0xb4>)
 8006b72:	2100      	movs	r1, #0
 8006b74:	0018      	movs	r0, r3
 8006b76:	f7fd f975 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCompare1(MotorL1_TIM, compare);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <MotorControl_ForwardRotating+0xb0>)
 8006b7e:	0019      	movs	r1, r3
 8006b80:	0010      	movs	r0, r2
 8006b82:	f7fd fbc5 	bl	8004310 <TIM_SetCompare1>
			TIM_SetCompare1(MotorL2_TIM, 0);
 8006b86:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <MotorControl_ForwardRotating+0xb4>)
 8006b88:	2100      	movs	r1, #0
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7fd fbc0 	bl	8004310 <TIM_SetCompare1>
			break;
 8006b90:	e022      	b.n	8006bd8 <MotorControl_ForwardRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	0013      	movs	r3, r2
 8006b96:	015b      	lsls	r3, r3, #5
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	2164      	movs	r1, #100	; 0x64
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7f9 fab8 	bl	8000118 <__udivsi3>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorR1_TIM, 0);
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <MotorControl_ForwardRotating+0xb8>)
 8006bae:	2100      	movs	r1, #0
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7fd f957 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCounter(MotorR2_TIM, 0);
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <MotorControl_ForwardRotating+0xbc>)
 8006bb8:	2100      	movs	r1, #0
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7fd f952 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCompare1(MotorR2_TIM, compare);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <MotorControl_ForwardRotating+0xbc>)
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	0010      	movs	r0, r2
 8006bc8:	f7fd fba2 	bl	8004310 <TIM_SetCompare1>
			TIM_SetCompare2(MotorR1_TIM, 0);
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <MotorControl_ForwardRotating+0xb8>)
 8006bce:	2100      	movs	r1, #0
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f7fd fba9 	bl	8004328 <TIM_SetCompare2>
			break;
 8006bd6:	46c0      	nop			; (mov r8, r8)
	}
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b004      	add	sp, #16
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40012c00 	.word	0x40012c00

08006bf0 <MotorControl_ReverseRotating>:
 * @param  id:
 *         dutycycle:
 * @retval None
 */
void MotorControl_ReverseRotating(motor_id_e id, uint32_t dutycycle)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	1dfb      	adds	r3, r7, #7
 8006bfc:	701a      	strb	r2, [r3, #0]
	uint32_t compare;

	switch (id) {
 8006bfe:	1dfb      	adds	r3, r7, #7
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <MotorControl_ReverseRotating+0x1c>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d023      	beq.n	8006c52 <MotorControl_ReverseRotating+0x62>
			TIM_SetCompare2(MotorR1_TIM, compare);
			TIM_SetCompare1(MotorR2_TIM, 0);
			break;

		default:
			break;
 8006c0a:	e045      	b.n	8006c98 <MotorControl_ReverseRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	0013      	movs	r3, r2
 8006c10:	015b      	lsls	r3, r3, #5
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	189b      	adds	r3, r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	2164      	movs	r1, #100	; 0x64
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f7f9 fa7b 	bl	8000118 <__udivsi3>
 8006c22:	0003      	movs	r3, r0
 8006c24:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorL1_TIM, 0);
 8006c26:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <MotorControl_ReverseRotating+0xb0>)
 8006c28:	2100      	movs	r1, #0
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7fd f91a 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCounter(MotorL2_TIM, 0);
 8006c30:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <MotorControl_ReverseRotating+0xb4>)
 8006c32:	2100      	movs	r1, #0
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7fd f915 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCompare1(MotorL2_TIM, compare);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <MotorControl_ReverseRotating+0xb4>)
 8006c3e:	0019      	movs	r1, r3
 8006c40:	0010      	movs	r0, r2
 8006c42:	f7fd fb65 	bl	8004310 <TIM_SetCompare1>
			TIM_SetCompare1(MotorL1_TIM, 0);
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <MotorControl_ReverseRotating+0xb0>)
 8006c48:	2100      	movs	r1, #0
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7fd fb60 	bl	8004310 <TIM_SetCompare1>
			break;
 8006c50:	e022      	b.n	8006c98 <MotorControl_ReverseRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	0013      	movs	r3, r2
 8006c56:	015b      	lsls	r3, r3, #5
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	2164      	movs	r1, #100	; 0x64
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7f9 fa58 	bl	8000118 <__udivsi3>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorR1_TIM, 0);
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <MotorControl_ReverseRotating+0xb8>)
 8006c6e:	2100      	movs	r1, #0
 8006c70:	0018      	movs	r0, r3
 8006c72:	f7fd f8f7 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCounter(MotorR2_TIM, 0);
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <MotorControl_ReverseRotating+0xbc>)
 8006c78:	2100      	movs	r1, #0
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f7fd f8f2 	bl	8003e64 <TIM_SetCounter>
			TIM_SetCompare2(MotorR1_TIM, compare);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <MotorControl_ReverseRotating+0xb8>)
 8006c84:	0019      	movs	r1, r3
 8006c86:	0010      	movs	r0, r2
 8006c88:	f7fd fb4e 	bl	8004328 <TIM_SetCompare2>
			TIM_SetCompare1(MotorR2_TIM, 0);
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <MotorControl_ReverseRotating+0xbc>)
 8006c8e:	2100      	movs	r1, #0
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7fd fb3d 	bl	8004310 <TIM_SetCompare1>
			break;
 8006c96:	46c0      	nop			; (mov r8, r8)
	}
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b004      	add	sp, #16
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40012c00 	.word	0x40012c00

08006cb0 <Check_InLine>:
 * @brief  Check IR sensor In Line or Out Line
 * @param  None
 * @retval Number IR sensor In Line and Out Line
 */
int Check_InLine(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++){
 8006cb6:	1dfb      	adds	r3, r7, #7
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e01d      	b.n	8006cfa <Check_InLine+0x4a>
		if(OpticalSensor_MeasureUseDMAMode(i) > AdcValuesThreshold[i]) {
 8006cbe:	1dfb      	adds	r3, r7, #7
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f000 fd6e 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	0019      	movs	r1, r3
 8006ccc:	1dfb      	adds	r3, r7, #7
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <Check_InLine+0x84>)
 8006cd2:	0052      	lsls	r2, r2, #1
 8006cd4:	5ad3      	ldrh	r3, [r2, r3]
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	d905      	bls.n	8006ce6 <Check_InLine+0x36>
			count++;
 8006cda:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <Check_InLine+0x88>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <Check_InLine+0x88>)
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e004      	b.n	8006cf0 <Check_InLine+0x40>
		}
		else {
			count--;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <Check_InLine+0x88>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	1e5a      	subs	r2, r3, #1
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <Check_InLine+0x88>)
 8006cee:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++){
 8006cf0:	1dfb      	adds	r3, r7, #7
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	1dfb      	adds	r3, r7, #7
 8006cf6:	3201      	adds	r2, #1
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	1dfb      	adds	r3, r7, #7
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d9dd      	bls.n	8006cbe <Check_InLine+0xe>
		}
	}

	if (count == 5){
 8006d02:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <Check_InLine+0x88>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d104      	bne.n	8006d14 <Check_InLine+0x64>
		count = 0;
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <Check_InLine+0x88>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
		return 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e00a      	b.n	8006d2a <Check_InLine+0x7a>
	}
	else if (count == -5) {
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <Check_InLine+0x88>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3305      	adds	r3, #5
 8006d1a:	d105      	bne.n	8006d28 <Check_InLine+0x78>
		count = 0;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <Check_InLine+0x88>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
		return -1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	425b      	negs	r3, r3
 8006d26:	e000      	b.n	8006d2a <Check_InLine+0x7a>
	}

	else {
		return 0;
 8006d28:	2300      	movs	r3, #0
	}
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	2000014c 	.word	0x2000014c
 8006d38:	20000180 	.word	0x20000180

08006d3c <LineFollow>:
 * @brief
 * @param  None
 * @retval None
 */
void LineFollow(void)
{
 8006d3c:	b5b0      	push	{r4, r5, r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
	/* IR sensor is in the leftmost position */
    if (OpticalSensor_MeasureUseDMAMode(0) > AdcValuesThreshold[0] &&
 8006d40:	2000      	movs	r0, #0
 8006d42:	f000 fd2f 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006d46:	0003      	movs	r3, r0
 8006d48:	001a      	movs	r2, r3
 8006d4a:	4b39      	ldr	r3, [pc, #228]	; (8006e30 <LineFollow+0xf4>)
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d911      	bls.n	8006d76 <LineFollow+0x3a>
    		OpticalSensor_MeasureUseDMAMode(4) < AdcValuesThreshold[4])
 8006d52:	2004      	movs	r0, #4
 8006d54:	f000 fd26 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	4b34      	ldr	r3, [pc, #208]	; (8006e30 <LineFollow+0xf4>)
 8006d5e:	891b      	ldrh	r3, [r3, #8]
    if (OpticalSensor_MeasureUseDMAMode(0) > AdcValuesThreshold[0] &&
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d208      	bcs.n	8006d76 <LineFollow+0x3a>
    {
    	/* Turn left */
		MotorControl_ForwardRotating(MOTOR_ID_L, 25);
 8006d64:	2119      	movs	r1, #25
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7ff fee2 	bl	8006b30 <MotorControl_ForwardRotating>
		MotorControl_ReverseRotating(MOTOR_ID_R, 25);
 8006d6c:	2119      	movs	r1, #25
 8006d6e:	2001      	movs	r0, #1
 8006d70:	f7ff ff3e 	bl	8006bf0 <MotorControl_ReverseRotating>
 8006d74:	e059      	b.n	8006e2a <LineFollow+0xee>

    }

    /* IR sensor is in the rightmost position */
    else if (OpticalSensor_MeasureUseDMAMode(0) < AdcValuesThreshold[0] &&
 8006d76:	2000      	movs	r0, #0
 8006d78:	f000 fd14 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	001a      	movs	r2, r3
 8006d80:	4b2b      	ldr	r3, [pc, #172]	; (8006e30 <LineFollow+0xf4>)
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d211      	bcs.n	8006dac <LineFollow+0x70>
    		OpticalSensor_MeasureUseDMAMode(4) > AdcValuesThreshold[4])
 8006d88:	2004      	movs	r0, #4
 8006d8a:	f000 fd0b 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	001a      	movs	r2, r3
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <LineFollow+0xf4>)
 8006d94:	891b      	ldrh	r3, [r3, #8]
    else if (OpticalSensor_MeasureUseDMAMode(0) < AdcValuesThreshold[0] &&
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d908      	bls.n	8006dac <LineFollow+0x70>
    {
    	/* Turn right */
		MotorControl_ForwardRotating(MOTOR_ID_R, 25);
 8006d9a:	2119      	movs	r1, #25
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	f7ff fec7 	bl	8006b30 <MotorControl_ForwardRotating>
		MotorControl_ReverseRotating(MOTOR_ID_L, 25);
 8006da2:	2119      	movs	r1, #25
 8006da4:	2000      	movs	r0, #0
 8006da6:	f7ff ff23 	bl	8006bf0 <MotorControl_ReverseRotating>
 8006daa:	e03e      	b.n	8006e2a <LineFollow+0xee>
    }

    /* IR sensor is in the center position */
    else if (OpticalSensor_MeasureUseDMAMode(2) > AdcValuesThreshold[2])
 8006dac:	2002      	movs	r0, #2
 8006dae:	f000 fcf9 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006db2:	0003      	movs	r3, r0
 8006db4:	001a      	movs	r2, r3
 8006db6:	4b1e      	ldr	r3, [pc, #120]	; (8006e30 <LineFollow+0xf4>)
 8006db8:	889b      	ldrh	r3, [r3, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d935      	bls.n	8006e2a <LineFollow+0xee>
    {
    	/* Calculate Kp, Ki, Kd used to Follow Line */
		Kp = 0.00001 * (AdcValuesThreshold[2] - OpticalSensor_MeasureUseDMAMode(2));
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <LineFollow+0xf4>)
 8006dc0:	889b      	ldrh	r3, [r3, #4]
 8006dc2:	001c      	movs	r4, r3
 8006dc4:	2002      	movs	r0, #2
 8006dc6:	f000 fced 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	1ae3      	subs	r3, r4, r3
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7fb fe48 	bl	8002a64 <__aeabi_i2d>
 8006dd4:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <LineFollow+0xf8>)
 8006dd6:	4b18      	ldr	r3, [pc, #96]	; (8006e38 <LineFollow+0xfc>)
 8006dd8:	f7fa ffac 	bl	8001d34 <__aeabi_dmul>
 8006ddc:	0002      	movs	r2, r0
 8006dde:	000b      	movs	r3, r1
 8006de0:	0010      	movs	r0, r2
 8006de2:	0019      	movs	r1, r3
 8006de4:	f7fb fe6e 	bl	8002ac4 <__aeabi_d2f>
 8006de8:	1c02      	adds	r2, r0, #0
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <LineFollow+0x100>)
 8006dec:	601a      	str	r2, [r3, #0]
		Kd = 0.005 	 * (AdcValuesThreshold[2] - OpticalSensor_MeasureUseDMAMode(2));
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <LineFollow+0xf4>)
 8006df0:	889b      	ldrh	r3, [r3, #4]
 8006df2:	001c      	movs	r4, r3
 8006df4:	2002      	movs	r0, #2
 8006df6:	f000 fcd5 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	1ae3      	subs	r3, r4, r3
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fb fe30 	bl	8002a64 <__aeabi_i2d>
 8006e04:	4a0e      	ldr	r2, [pc, #56]	; (8006e40 <LineFollow+0x104>)
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <LineFollow+0x108>)
 8006e08:	f7fa ff94 	bl	8001d34 <__aeabi_dmul>
 8006e0c:	0002      	movs	r2, r0
 8006e0e:	000b      	movs	r3, r1
 8006e10:	0010      	movs	r0, r2
 8006e12:	0019      	movs	r1, r3
 8006e14:	f7fb fe56 	bl	8002ac4 <__aeabi_d2f>
 8006e18:	1c02      	adds	r2, r0, #0
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <LineFollow+0x10c>)
 8006e1c:	601a      	str	r2, [r3, #0]
		Ki = 0.000001;
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <LineFollow+0x110>)
 8006e20:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <LineFollow+0x114>)
 8006e22:	601a      	str	r2, [r3, #0]
		PID_Control();
 8006e24:	f000 f816 	bl	8006e54 <PID_Control>
    }
}
 8006e28:	e7ff      	b.n	8006e2a <LineFollow+0xee>
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e30:	2000014c 	.word	0x2000014c
 8006e34:	88e368f1 	.word	0x88e368f1
 8006e38:	3ee4f8b5 	.word	0x3ee4f8b5
 8006e3c:	2000016c 	.word	0x2000016c
 8006e40:	47ae147b 	.word	0x47ae147b
 8006e44:	3f747ae1 	.word	0x3f747ae1
 8006e48:	20000174 	.word	0x20000174
 8006e4c:	20000170 	.word	0x20000170
 8006e50:	358637bd 	.word	0x358637bd

08006e54 <PID_Control>:
 * @brief
 * @param  None
 * @retval None
 */
void PID_Control(void)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
	/* Calculate error */
	int error = (OpticalSensor_MeasureUseDMAMode(1) - OpticalSensor_MeasureUseDMAMode(3));
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f000 fca2 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006e60:	0003      	movs	r3, r0
 8006e62:	001c      	movs	r4, r3
 8006e64:	2003      	movs	r0, #3
 8006e66:	f000 fc9d 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	1ae3      	subs	r3, r4, r3
 8006e6e:	607b      	str	r3, [r7, #4]

	P =  error;
 8006e70:	4b4c      	ldr	r3, [pc, #304]	; (8006fa4 <PID_Control+0x150>)
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
	I += error;
 8006e76:	4b4c      	ldr	r3, [pc, #304]	; (8006fa8 <PID_Control+0x154>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	18d2      	adds	r2, r2, r3
 8006e7e:	4b4a      	ldr	r3, [pc, #296]	; (8006fa8 <PID_Control+0x154>)
 8006e80:	601a      	str	r2, [r3, #0]
	D =  error - previousError;
 8006e82:	4b4a      	ldr	r3, [pc, #296]	; (8006fac <PID_Control+0x158>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	1ad2      	subs	r2, r2, r3
 8006e8a:	4b49      	ldr	r3, [pc, #292]	; (8006fb0 <PID_Control+0x15c>)
 8006e8c:	601a      	str	r2, [r3, #0]

	PIDvalue = ((Kp * P) + (Ki * I) + (Kd * D));
 8006e8e:	4b45      	ldr	r3, [pc, #276]	; (8006fa4 <PID_Control+0x150>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7f9 ffa2 	bl	8000ddc <__aeabi_i2f>
 8006e98:	1c02      	adds	r2, r0, #0
 8006e9a:	4b46      	ldr	r3, [pc, #280]	; (8006fb4 <PID_Control+0x160>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	1c19      	adds	r1, r3, #0
 8006ea0:	1c10      	adds	r0, r2, #0
 8006ea2:	f7f9 fc8d 	bl	80007c0 <__aeabi_fmul>
 8006ea6:	1c03      	adds	r3, r0, #0
 8006ea8:	1c1c      	adds	r4, r3, #0
 8006eaa:	4b3f      	ldr	r3, [pc, #252]	; (8006fa8 <PID_Control+0x154>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f7f9 ff94 	bl	8000ddc <__aeabi_i2f>
 8006eb4:	1c02      	adds	r2, r0, #0
 8006eb6:	4b40      	ldr	r3, [pc, #256]	; (8006fb8 <PID_Control+0x164>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	1c19      	adds	r1, r3, #0
 8006ebc:	1c10      	adds	r0, r2, #0
 8006ebe:	f7f9 fc7f 	bl	80007c0 <__aeabi_fmul>
 8006ec2:	1c03      	adds	r3, r0, #0
 8006ec4:	1c19      	adds	r1, r3, #0
 8006ec6:	1c20      	adds	r0, r4, #0
 8006ec8:	f7f9 fada 	bl	8000480 <__aeabi_fadd>
 8006ecc:	1c03      	adds	r3, r0, #0
 8006ece:	1c1c      	adds	r4, r3, #0
 8006ed0:	4b37      	ldr	r3, [pc, #220]	; (8006fb0 <PID_Control+0x15c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7f9 ff81 	bl	8000ddc <__aeabi_i2f>
 8006eda:	1c02      	adds	r2, r0, #0
 8006edc:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <PID_Control+0x168>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1c19      	adds	r1, r3, #0
 8006ee2:	1c10      	adds	r0, r2, #0
 8006ee4:	f7f9 fc6c 	bl	80007c0 <__aeabi_fmul>
 8006ee8:	1c03      	adds	r3, r0, #0
 8006eea:	1c19      	adds	r1, r3, #0
 8006eec:	1c20      	adds	r0, r4, #0
 8006eee:	f7f9 fac7 	bl	8000480 <__aeabi_fadd>
 8006ef2:	1c03      	adds	r3, r0, #0
 8006ef4:	1c1a      	adds	r2, r3, #0
 8006ef6:	4b32      	ldr	r3, [pc, #200]	; (8006fc0 <PID_Control+0x16c>)
 8006ef8:	601a      	str	r2, [r3, #0]
	previousError = error;
 8006efa:	4b2c      	ldr	r3, [pc, #176]	; (8006fac <PID_Control+0x158>)
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]

	lsp = lfspeed - PIDvalue;
 8006f00:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <PID_Control+0x170>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7f9 ff69 	bl	8000ddc <__aeabi_i2f>
 8006f0a:	1c02      	adds	r2, r0, #0
 8006f0c:	4b2c      	ldr	r3, [pc, #176]	; (8006fc0 <PID_Control+0x16c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1c19      	adds	r1, r3, #0
 8006f12:	1c10      	adds	r0, r2, #0
 8006f14:	f7f9 fda2 	bl	8000a5c <__aeabi_fsub>
 8006f18:	1c03      	adds	r3, r0, #0
 8006f1a:	1c18      	adds	r0, r3, #0
 8006f1c:	f7f9 ff3e 	bl	8000d9c <__aeabi_f2iz>
 8006f20:	0002      	movs	r2, r0
 8006f22:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <PID_Control+0x174>)
 8006f24:	601a      	str	r2, [r3, #0]
	rsp = lfspeed + PIDvalue;
 8006f26:	4b27      	ldr	r3, [pc, #156]	; (8006fc4 <PID_Control+0x170>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f7f9 ff56 	bl	8000ddc <__aeabi_i2f>
 8006f30:	1c02      	adds	r2, r0, #0
 8006f32:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <PID_Control+0x16c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	1c19      	adds	r1, r3, #0
 8006f38:	1c10      	adds	r0, r2, #0
 8006f3a:	f7f9 faa1 	bl	8000480 <__aeabi_fadd>
 8006f3e:	1c03      	adds	r3, r0, #0
 8006f40:	1c18      	adds	r0, r3, #0
 8006f42:	f7f9 ff2b 	bl	8000d9c <__aeabi_f2iz>
 8006f46:	0002      	movs	r2, r0
 8006f48:	4b20      	ldr	r3, [pc, #128]	; (8006fcc <PID_Control+0x178>)
 8006f4a:	601a      	str	r2, [r3, #0]

	if (lsp > MAX_SPEED) 	lsp = MAX_SPEED;
 8006f4c:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <PID_Control+0x174>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b1e      	cmp	r3, #30
 8006f52:	dd02      	ble.n	8006f5a <PID_Control+0x106>
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <PID_Control+0x174>)
 8006f56:	221e      	movs	r2, #30
 8006f58:	601a      	str	r2, [r3, #0]

	if (lsp < MIN_SPPED) 	lsp = MIN_SPPED;
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <PID_Control+0x174>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da02      	bge.n	8006f68 <PID_Control+0x114>
 8006f62:	4b19      	ldr	r3, [pc, #100]	; (8006fc8 <PID_Control+0x174>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]

	if (rsp > MAX_SPEED) 	rsp = MAX_SPEED;
 8006f68:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <PID_Control+0x178>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b1e      	cmp	r3, #30
 8006f6e:	dd02      	ble.n	8006f76 <PID_Control+0x122>
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <PID_Control+0x178>)
 8006f72:	221e      	movs	r2, #30
 8006f74:	601a      	str	r2, [r3, #0]

	if (rsp < MIN_SPPED) 	rsp = MIN_SPPED;
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <PID_Control+0x178>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da02      	bge.n	8006f84 <PID_Control+0x130>
 8006f7e:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <PID_Control+0x178>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

	MotorControl_ForwardRotating(MOTOR_ID_R, rsp);
 8006f84:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <PID_Control+0x178>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	0019      	movs	r1, r3
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	f7ff fdd0 	bl	8006b30 <MotorControl_ForwardRotating>
	MotorControl_ForwardRotating(MOTOR_ID_L, lsp);
 8006f90:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <PID_Control+0x174>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	0019      	movs	r1, r3
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7ff fdca 	bl	8006b30 <MotorControl_ForwardRotating>
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b003      	add	sp, #12
 8006fa2:	bd90      	pop	{r4, r7, pc}
 8006fa4:	20000158 	.word	0x20000158
 8006fa8:	2000015c 	.word	0x2000015c
 8006fac:	20000164 	.word	0x20000164
 8006fb0:	20000160 	.word	0x20000160
 8006fb4:	2000016c 	.word	0x2000016c
 8006fb8:	20000170 	.word	0x20000170
 8006fbc:	20000174 	.word	0x20000174
 8006fc0:	20000168 	.word	0x20000168
 8006fc4:	20000050 	.word	0x20000050
 8006fc8:	20000178 	.word	0x20000178
 8006fcc:	2000017c 	.word	0x2000017c

08006fd0 <MotorControl_PID>:
 * @brief
 * @param  None
 * @retval None
 */
void MotorControl_PID(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
	int k = Check_InLine();
 8006fd6:	f7ff fe6b 	bl	8006cb0 <Check_InLine>
 8006fda:	0003      	movs	r3, r0
 8006fdc:	607b      	str	r3, [r7, #4]
	if (k == 1){
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d108      	bne.n	8006ff6 <MotorControl_PID+0x26>
		MotorControl_ReverseRotating(MOTOR_ID_L, 20);
 8006fe4:	2114      	movs	r1, #20
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f7ff fe02 	bl	8006bf0 <MotorControl_ReverseRotating>
		MotorControl_ReverseRotating(MOTOR_ID_R, 20);
 8006fec:	2114      	movs	r1, #20
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f7ff fdfe 	bl	8006bf0 <MotorControl_ReverseRotating>
		MotorControl_ReverseRotating(MOTOR_ID_L, 0);
		MotorControl_ReverseRotating(MOTOR_ID_R, 0);
	}else if (k == 0) {
		LineFollow();
	}
}
 8006ff4:	e010      	b.n	8007018 <MotorControl_PID+0x48>
	}else if (k == -1){
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	d108      	bne.n	800700e <MotorControl_PID+0x3e>
		MotorControl_ReverseRotating(MOTOR_ID_L, 0);
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	2000      	movs	r0, #0
 8007000:	f7ff fdf6 	bl	8006bf0 <MotorControl_ReverseRotating>
		MotorControl_ReverseRotating(MOTOR_ID_R, 0);
 8007004:	2100      	movs	r1, #0
 8007006:	2001      	movs	r0, #1
 8007008:	f7ff fdf2 	bl	8006bf0 <MotorControl_ReverseRotating>
}
 800700c:	e004      	b.n	8007018 <MotorControl_PID+0x48>
	}else if (k == 0) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <MotorControl_PID+0x48>
		LineFollow();
 8007014:	f7ff fe92 	bl	8006d3c <LineFollow>
}
 8007018:	46c0      	nop			; (mov r8, r8)
 800701a:	46bd      	mov	sp, r7
 800701c:	b002      	add	sp, #8
 800701e:	bd80      	pop	{r7, pc}

08007020 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <EventSchedulerInit+0x2c>)
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4905      	ldr	r1, [pc, #20]	; (8007050 <EventSchedulerInit+0x30>)
 800703a:	4806      	ldr	r0, [pc, #24]	; (8007054 <EventSchedulerInit+0x34>)
 800703c:	2201      	movs	r2, #1
 800703e:	f000 fd9d 	bl	8007b7c <bufInit>
    }
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b002      	add	sp, #8
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	20000184 	.word	0x20000184
 8007050:	20000288 	.word	0x20000288
 8007054:	20000188 	.word	0x20000188

08007058 <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	0002      	movs	r2, r0
 8007060:	1dfb      	adds	r3, r7, #7
 8007062:	701a      	strb	r2, [r3, #0]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 8007064:	1dfa      	adds	r2, r7, #7
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <EventSchedulerAdd+0x2c>)
 8007068:	0011      	movs	r1, r2
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fddd 	bl	8007c2a <bufEnDat>
 8007070:	1e03      	subs	r3, r0, #0
 8007072:	d101      	bne.n	8007078 <EventSchedulerAdd+0x20>
        return EVT_SUCCESS;
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <EventSchedulerAdd+0x22>
    }
    
    return EVT_FAIL;
 8007078:	2300      	movs	r3, #0
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b002      	add	sp, #8
 8007080:	bd80      	pop	{r7, pc}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	20000288 	.word	0x20000288

08007088 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <processEventScheduler+0x34>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00d      	beq.n	80070b2 <processEventScheduler+0x2a>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 8007096:	1dfa      	adds	r2, r7, #7
 8007098:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <processEventScheduler+0x38>)
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f000 fe1c 	bl	8007cda <bufDeDat>
 80070a2:	1e03      	subs	r3, r0, #0
 80070a4:	d105      	bne.n	80070b2 <processEventScheduler+0x2a>
            pAppStateFunc(event);
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <processEventScheduler+0x34>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	1dfa      	adds	r2, r7, #7
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	0010      	movs	r0, r2
 80070b0:	4798      	blx	r3
        }
    }
}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b002      	add	sp, #8
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	20000184 	.word	0x20000184
 80070c0:	20000288 	.word	0x20000288

080070c4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	0002      	movs	r2, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	1dfb      	adds	r3, r7, #7
 80070d0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80070d2:	1dfb      	adds	r3, r7, #7
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b7f      	cmp	r3, #127	; 0x7f
 80070d8:	d932      	bls.n	8007140 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80070da:	4a2f      	ldr	r2, [pc, #188]	; (8007198 <NVIC_SetPriority+0xd4>)
 80070dc:	1dfb      	adds	r3, r7, #7
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	0019      	movs	r1, r3
 80070e2:	230f      	movs	r3, #15
 80070e4:	400b      	ands	r3, r1
 80070e6:	3b08      	subs	r3, #8
 80070e8:	089b      	lsrs	r3, r3, #2
 80070ea:	3306      	adds	r3, #6
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	18d3      	adds	r3, r2, r3
 80070f0:	3304      	adds	r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	1dfa      	adds	r2, r7, #7
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	0011      	movs	r1, r2
 80070fa:	2203      	movs	r2, #3
 80070fc:	400a      	ands	r2, r1
 80070fe:	00d2      	lsls	r2, r2, #3
 8007100:	21ff      	movs	r1, #255	; 0xff
 8007102:	4091      	lsls	r1, r2
 8007104:	000a      	movs	r2, r1
 8007106:	43d2      	mvns	r2, r2
 8007108:	401a      	ands	r2, r3
 800710a:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	019b      	lsls	r3, r3, #6
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	401a      	ands	r2, r3
 8007114:	1dfb      	adds	r3, r7, #7
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	0018      	movs	r0, r3
 800711a:	2303      	movs	r3, #3
 800711c:	4003      	ands	r3, r0
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8007122:	481d      	ldr	r0, [pc, #116]	; (8007198 <NVIC_SetPriority+0xd4>)
 8007124:	1dfb      	adds	r3, r7, #7
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	001c      	movs	r4, r3
 800712a:	230f      	movs	r3, #15
 800712c:	4023      	ands	r3, r4
 800712e:	3b08      	subs	r3, #8
 8007130:	089b      	lsrs	r3, r3, #2
 8007132:	430a      	orrs	r2, r1
 8007134:	3306      	adds	r3, #6
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	18c3      	adds	r3, r0, r3
 800713a:	3304      	adds	r3, #4
 800713c:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800713e:	e027      	b.n	8007190 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <NVIC_SetPriority+0xd8>)
 8007142:	1dfb      	adds	r3, r7, #7
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	089b      	lsrs	r3, r3, #2
 800714a:	33c0      	adds	r3, #192	; 0xc0
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	589b      	ldr	r3, [r3, r2]
 8007150:	1dfa      	adds	r2, r7, #7
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	0011      	movs	r1, r2
 8007156:	2203      	movs	r2, #3
 8007158:	400a      	ands	r2, r1
 800715a:	00d2      	lsls	r2, r2, #3
 800715c:	21ff      	movs	r1, #255	; 0xff
 800715e:	4091      	lsls	r1, r2
 8007160:	000a      	movs	r2, r1
 8007162:	43d2      	mvns	r2, r2
 8007164:	401a      	ands	r2, r3
 8007166:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	019b      	lsls	r3, r3, #6
 800716c:	22ff      	movs	r2, #255	; 0xff
 800716e:	401a      	ands	r2, r3
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	0018      	movs	r0, r3
 8007176:	2303      	movs	r3, #3
 8007178:	4003      	ands	r3, r0
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800717e:	4807      	ldr	r0, [pc, #28]	; (800719c <NVIC_SetPriority+0xd8>)
 8007180:	1dfb      	adds	r3, r7, #7
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b25b      	sxtb	r3, r3
 8007186:	089b      	lsrs	r3, r3, #2
 8007188:	430a      	orrs	r2, r1
 800718a:	33c0      	adds	r3, #192	; 0xc0
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	501a      	str	r2, [r3, r0]
}
 8007190:	46c0      	nop			; (mov r8, r8)
 8007192:	46bd      	mov	sp, r7
 8007194:	b003      	add	sp, #12
 8007196:	bd90      	pop	{r4, r7, pc}
 8007198:	e000ed00 	.word	0xe000ed00
 800719c:	e000e100 	.word	0xe000e100

080071a0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	045b      	lsls	r3, r3, #17
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d301      	bcc.n	80071b8 <SysTick_Config+0x18>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e010      	b.n	80071da <SysTick_Config+0x3a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <SysTick_Config+0x44>)
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	3a01      	subs	r2, #1
 80071be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80071c0:	2301      	movs	r3, #1
 80071c2:	425b      	negs	r3, r3
 80071c4:	2103      	movs	r1, #3
 80071c6:	0018      	movs	r0, r3
 80071c8:	f7ff ff7c 	bl	80070c4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <SysTick_Config+0x44>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <SysTick_Config+0x44>)
 80071d4:	2207      	movs	r2, #7
 80071d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80071d8:	2300      	movs	r3, #0
}
 80071da:	0018      	movs	r0, r3
 80071dc:	46bd      	mov	sp, r7
 80071de:	b002      	add	sp, #8
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	e000e010 	.word	0xe000e010

080071e8 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 80071ee:	003b      	movs	r3, r7
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7fc faab 	bl	800374c <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80071f6:	003b      	movs	r3, r7
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	22fa      	movs	r2, #250	; 0xfa
 80071fc:	0091      	lsls	r1, r2, #2
 80071fe:	0018      	movs	r0, r3
 8007200:	f7f8 ff8a 	bl	8000118 <__udivsi3>
 8007204:	0003      	movs	r3, r0
 8007206:	0018      	movs	r0, r3
 8007208:	f7ff ffca 	bl	80071a0 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 800720c:	2301      	movs	r3, #1
 800720e:	425b      	negs	r3, r3
 8007210:	2101      	movs	r1, #1
 8007212:	0018      	movs	r0, r3
 8007214:	f7ff ff56 	bl	80070c4 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8007218:	23c0      	movs	r3, #192	; 0xc0
 800721a:	005a      	lsls	r2, r3, #1
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <TimerInit+0x48>)
 800721e:	2100      	movs	r1, #0
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fda7 	bl	8007d74 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b00a      	add	sp, #40	; 0x28
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	20000298 	.word	0x20000298

08007234 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 8007234:	b5b0      	push	{r4, r5, r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	1dfb      	adds	r3, r7, #7
 8007242:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8007244:	2317      	movs	r3, #23
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e05a      	b.n	8007304 <TimerStart+0xd0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 800724e:	2017      	movs	r0, #23
 8007250:	183b      	adds	r3, r7, r0
 8007252:	781a      	ldrb	r2, [r3, #0]
 8007254:	4930      	ldr	r1, [pc, #192]	; (8007318 <TimerStart+0xe4>)
 8007256:	0013      	movs	r3, r2
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	189b      	adds	r3, r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	18cb      	adds	r3, r1, r3
 8007260:	3310      	adds	r3, #16
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d147      	bne.n	80072f8 <TimerStart+0xc4>
        {
            g_pTimerHandle[i].name = name;
 8007268:	183b      	adds	r3, r7, r0
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	492a      	ldr	r1, [pc, #168]	; (8007318 <TimerStart+0xe4>)
 800726e:	0013      	movs	r3, r2
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	189b      	adds	r3, r3, r2
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	505a      	str	r2, [r3, r1]
            g_pTimerHandle[i].callbackFunc = callback;
 800727a:	183b      	adds	r3, r7, r0
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	4926      	ldr	r1, [pc, #152]	; (8007318 <TimerStart+0xe4>)
 8007280:	0013      	movs	r3, r2
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	189b      	adds	r3, r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	18cb      	adds	r3, r1, r3
 800728a:	3310      	adds	r3, #16
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8007290:	183b      	adds	r3, r7, r0
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	4920      	ldr	r1, [pc, #128]	; (8007318 <TimerStart+0xe4>)
 8007296:	0013      	movs	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	189b      	adds	r3, r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	18cb      	adds	r3, r1, r3
 80072a0:	330c      	adds	r3, #12
 80072a2:	1dfa      	adds	r2, r7, #7
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 80072a8:	183b      	adds	r3, r7, r0
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	491a      	ldr	r1, [pc, #104]	; (8007318 <TimerStart+0xe4>)
 80072ae:	0013      	movs	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	18cb      	adds	r3, r1, r3
 80072b8:	3314      	adds	r3, #20
 80072ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072bc:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 80072be:	0005      	movs	r5, r0
 80072c0:	183b      	adds	r3, r7, r0
 80072c2:	781c      	ldrb	r4, [r3, #0]
 80072c4:	f000 f87e 	bl	80073c4 <GetMilSecTick>
 80072c8:	0001      	movs	r1, r0
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <TimerStart+0xe4>)
 80072cc:	0023      	movs	r3, r4
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	191b      	adds	r3, r3, r4
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	18d3      	adds	r3, r2, r3
 80072d6:	3304      	adds	r3, #4
 80072d8:	6019      	str	r1, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 80072da:	0028      	movs	r0, r5
 80072dc:	183b      	adds	r3, r7, r0
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	490d      	ldr	r1, [pc, #52]	; (8007318 <TimerStart+0xe4>)
 80072e2:	0013      	movs	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	18cb      	adds	r3, r1, r3
 80072ec:	3308      	adds	r3, #8
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 80072f2:	183b      	adds	r3, r7, r0
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	e00b      	b.n	8007310 <TimerStart+0xdc>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80072f8:	2117      	movs	r1, #23
 80072fa:	187b      	adds	r3, r7, r1
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	187b      	adds	r3, r7, r1
 8007300:	3201      	adds	r2, #1
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	2317      	movs	r3, #23
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b0f      	cmp	r3, #15
 800730c:	d99f      	bls.n	800724e <TimerStart+0x1a>
        }
    }
    
    return NO_TIMER;
 800730e:	23ff      	movs	r3, #255	; 0xff
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b006      	add	sp, #24
 8007316:	bdb0      	pop	{r4, r5, r7, pc}
 8007318:	20000298 	.word	0x20000298

0800731c <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	0002      	movs	r2, r0
 8007324:	1dfb      	adds	r3, r7, #7
 8007326:	701a      	strb	r2, [r3, #0]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8007328:	1dfb      	adds	r3, r7, #7
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b0f      	cmp	r3, #15
 800732e:	d80b      	bhi.n	8007348 <TimerStop+0x2c>
 8007330:	1dfb      	adds	r3, r7, #7
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	4922      	ldr	r1, [pc, #136]	; (80073c0 <TimerStop+0xa4>)
 8007336:	0013      	movs	r3, r2
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	189b      	adds	r3, r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	18cb      	adds	r3, r1, r3
 8007340:	3310      	adds	r3, #16
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <TimerStop+0x30>
        return 0;
 8007348:	2300      	movs	r3, #0
 800734a:	e035      	b.n	80073b8 <TimerStop+0x9c>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 800734c:	1dfb      	adds	r3, r7, #7
 800734e:	781a      	ldrb	r2, [r3, #0]
 8007350:	491b      	ldr	r1, [pc, #108]	; (80073c0 <TimerStop+0xa4>)
 8007352:	0013      	movs	r3, r2
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	189b      	adds	r3, r3, r2
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	2200      	movs	r2, #0
 800735c:	505a      	str	r2, [r3, r1]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 800735e:	1dfb      	adds	r3, r7, #7
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	4917      	ldr	r1, [pc, #92]	; (80073c0 <TimerStop+0xa4>)
 8007364:	0013      	movs	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	189b      	adds	r3, r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	18cb      	adds	r3, r1, r3
 800736e:	3310      	adds	r3, #16
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8007374:	1dfb      	adds	r3, r7, #7
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	4911      	ldr	r1, [pc, #68]	; (80073c0 <TimerStop+0xa4>)
 800737a:	0013      	movs	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	189b      	adds	r3, r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	18cb      	adds	r3, r1, r3
 8007384:	330c      	adds	r3, #12
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 800738a:	1dfb      	adds	r3, r7, #7
 800738c:	781a      	ldrb	r2, [r3, #0]
 800738e:	490c      	ldr	r1, [pc, #48]	; (80073c0 <TimerStop+0xa4>)
 8007390:	0013      	movs	r3, r2
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	189b      	adds	r3, r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	18cb      	adds	r3, r1, r3
 800739a:	3308      	adds	r3, #8
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 80073a0:	1dfb      	adds	r3, r7, #7
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	4906      	ldr	r1, [pc, #24]	; (80073c0 <TimerStop+0xa4>)
 80073a6:	0013      	movs	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	18cb      	adds	r3, r1, r3
 80073b0:	3304      	adds	r3, #4
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
    
    return 1;
 80073b6:	2301      	movs	r3, #1
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b002      	add	sp, #8
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000298 	.word	0x20000298

080073c4 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 80073c8:	4b02      	ldr	r3, [pc, #8]	; (80073d4 <GetMilSecTick+0x10>)
 80073ca:	681b      	ldr	r3, [r3, #0]
}
 80073cc:	0018      	movs	r0, r3
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	20000418 	.word	0x20000418

080073d8 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80073de:	230f      	movs	r3, #15
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	e078      	b.n	80074da <processTimerScheduler+0x102>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 80073e8:	200f      	movs	r0, #15
 80073ea:	183b      	adds	r3, r7, r0
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	4940      	ldr	r1, [pc, #256]	; (80074f0 <processTimerScheduler+0x118>)
 80073f0:	0013      	movs	r3, r2
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	189b      	adds	r3, r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	18cb      	adds	r3, r1, r3
 80073fa:	3310      	adds	r3, #16
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d065      	beq.n	80074ce <processTimerScheduler+0xf6>
 8007402:	0004      	movs	r4, r0
 8007404:	183b      	adds	r3, r7, r0
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	0018      	movs	r0, r3
 800740a:	f000 f873 	bl	80074f4 <TimeExpired>
 800740e:	1e03      	subs	r3, r0, #0
 8007410:	d05d      	beq.n	80074ce <processTimerScheduler+0xf6>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8007412:	0020      	movs	r0, r4
 8007414:	183b      	adds	r3, r7, r0
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	4935      	ldr	r1, [pc, #212]	; (80074f0 <processTimerScheduler+0x118>)
 800741a:	0013      	movs	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	189b      	adds	r3, r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	18cb      	adds	r3, r1, r3
 8007424:	3310      	adds	r3, #16
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 800742a:	183b      	adds	r3, r7, r0
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	4930      	ldr	r1, [pc, #192]	; (80074f0 <processTimerScheduler+0x118>)
 8007430:	0013      	movs	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	189b      	adds	r3, r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	18cb      	adds	r3, r1, r3
 800743a:	3314      	adds	r3, #20
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8007440:	183b      	adds	r3, r7, r0
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	492a      	ldr	r1, [pc, #168]	; (80074f0 <processTimerScheduler+0x118>)
 8007446:	0013      	movs	r3, r2
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	189b      	adds	r3, r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	18cb      	adds	r3, r1, r3
 8007450:	330c      	adds	r3, #12
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2bff      	cmp	r3, #255	; 0xff
 8007458:	d022      	beq.n	80074a0 <processTimerScheduler+0xc8>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 800745a:	183b      	adds	r3, r7, r0
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	4924      	ldr	r1, [pc, #144]	; (80074f0 <processTimerScheduler+0x118>)
 8007460:	0013      	movs	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	189b      	adds	r3, r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	18cb      	adds	r3, r1, r3
 800746a:	330c      	adds	r3, #12
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <processTimerScheduler+0xc8>
                 g_pTimerHandle[i].repeats--;
 8007474:	183b      	adds	r3, r7, r0
 8007476:	781a      	ldrb	r2, [r3, #0]
 8007478:	491d      	ldr	r1, [pc, #116]	; (80074f0 <processTimerScheduler+0x118>)
 800747a:	0013      	movs	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	189b      	adds	r3, r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	18cb      	adds	r3, r1, r3
 8007484:	330c      	adds	r3, #12
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b2d8      	uxtb	r0, r3
 800748e:	4918      	ldr	r1, [pc, #96]	; (80074f0 <processTimerScheduler+0x118>)
 8007490:	0013      	movs	r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	189b      	adds	r3, r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	18cb      	adds	r3, r1, r3
 800749a:	330c      	adds	r3, #12
 800749c:	1c02      	adds	r2, r0, #0
 800749e:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 80074a0:	200f      	movs	r0, #15
 80074a2:	183b      	adds	r3, r7, r0
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	4912      	ldr	r1, [pc, #72]	; (80074f0 <processTimerScheduler+0x118>)
 80074a8:	0013      	movs	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	189b      	adds	r3, r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	18cb      	adds	r3, r1, r3
 80074b2:	330c      	adds	r3, #12
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <processTimerScheduler+0xee>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 80074bc:	183b      	adds	r3, r7, r0
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7ff ff2b 	bl	800731c <TimerStop>
            }
            
            callbackfunc(pPrameter);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	0010      	movs	r0, r2
 80074cc:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80074ce:	210f      	movs	r1, #15
 80074d0:	187b      	adds	r3, r7, r1
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	187b      	adds	r3, r7, r1
 80074d6:	3201      	adds	r2, #1
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	230f      	movs	r3, #15
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b0f      	cmp	r3, #15
 80074e2:	d981      	bls.n	80073e8 <processTimerScheduler+0x10>
        }
    }
}
 80074e4:	46c0      	nop			; (mov r8, r8)
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b005      	add	sp, #20
 80074ec:	bd90      	pop	{r4, r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	20000298 	.word	0x20000298

080074f4 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	0002      	movs	r2, r0
 80074fc:	1dfb      	adds	r3, r7, #7
 80074fe:	701a      	strb	r2, [r3, #0]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007504:	b672      	cpsid	i
}
 8007506:	46c0      	nop			; (mov r8, r8)
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8007508:	f7ff ff5c 	bl	80073c4 <GetMilSecTick>
 800750c:	0003      	movs	r3, r0
 800750e:	60bb      	str	r3, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8007510:	1dfb      	adds	r3, r7, #7
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b0f      	cmp	r3, #15
 8007516:	d80b      	bhi.n	8007530 <TimeExpired+0x3c>
 8007518:	1dfb      	adds	r3, r7, #7
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	492d      	ldr	r1, [pc, #180]	; (80075d4 <TimeExpired+0xe0>)
 800751e:	0013      	movs	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	189b      	adds	r3, r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	18cb      	adds	r3, r1, r3
 8007528:	3310      	adds	r3, #16
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <TimeExpired+0x44>
  __ASM volatile ("cpsie i" : : : "memory");
 8007530:	b662      	cpsie	i
}
 8007532:	46c0      	nop			; (mov r8, r8)
    {
    	__enable_irq();
        return 0;
 8007534:	2300      	movs	r3, #0
 8007536:	e049      	b.n	80075cc <TimeExpired+0xd8>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8007538:	1dfb      	adds	r3, r7, #7
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	4925      	ldr	r1, [pc, #148]	; (80075d4 <TimeExpired+0xe0>)
 800753e:	0013      	movs	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	189b      	adds	r3, r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	18cb      	adds	r3, r1, r3
 8007548:	3304      	adds	r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	d30d      	bcc.n	800756e <TimeExpired+0x7a>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8007552:	1dfb      	adds	r3, r7, #7
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	491f      	ldr	r1, [pc, #124]	; (80075d4 <TimeExpired+0xe0>)
 8007558:	0013      	movs	r3, r2
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	189b      	adds	r3, r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	18cb      	adds	r3, r1, r3
 8007562:	3304      	adds	r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e00f      	b.n	800758e <TimeExpired+0x9a>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 800756e:	1dfb      	adds	r3, r7, #7
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	4918      	ldr	r1, [pc, #96]	; (80075d4 <TimeExpired+0xe0>)
 8007574:	0013      	movs	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	189b      	adds	r3, r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	18cb      	adds	r3, r1, r3
 800757e:	3304      	adds	r3, #4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	43db      	mvns	r3, r3
 800758c:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	4910      	ldr	r1, [pc, #64]	; (80075d4 <TimeExpired+0xe0>)
 8007594:	0013      	movs	r3, r2
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	189b      	adds	r3, r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	18cb      	adds	r3, r1, r3
 800759e:	3308      	adds	r3, #8
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d203      	bcs.n	80075b0 <TimeExpired+0xbc>
  __ASM volatile ("cpsie i" : : : "memory");
 80075a8:	b662      	cpsie	i
}
 80075aa:	46c0      	nop			; (mov r8, r8)
    {
    	__enable_irq();
        return 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e00d      	b.n	80075cc <TimeExpired+0xd8>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 80075b0:	1dfb      	adds	r3, r7, #7
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	4907      	ldr	r1, [pc, #28]	; (80075d4 <TimeExpired+0xe0>)
 80075b6:	0013      	movs	r3, r2
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	18cb      	adds	r3, r1, r3
 80075c0:	3304      	adds	r3, #4
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80075c6:	b662      	cpsie	i
}
 80075c8:	46c0      	nop			; (mov r8, r8)
    
    __enable_irq();
    
    return 1;
 80075ca:	2301      	movs	r3, #1
}
 80075cc:	0018      	movs	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b004      	add	sp, #16
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000298 	.word	0x20000298

080075d8 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80075dc:	4b03      	ldr	r3, [pc, #12]	; (80075ec <SysTick_Handler+0x14>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	4b02      	ldr	r3, [pc, #8]	; (80075ec <SysTick_Handler+0x14>)
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000418 	.word	0x20000418

080075f0 <OpticalSensor_Init>:
 * @retval None
 */
void
OpticalSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b097      	sub	sp, #92	; 0x5c
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	0002      	movs	r2, r0
 80075f8:	1dfb      	adds	r3, r7, #7
 80075fa:	701a      	strb	r2, [r3, #0]
	ADC_InitTypeDef 	ADC_InitStructure;
	GPIO_InitTypeDef 	GPIO_InitStructure;
	DMA_InitTypeDef 	DMA_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	2101      	movs	r1, #1
 8007602:	0018      	movs	r0, r3
 8007604:	f7fc fa3e 	bl	8003a84 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	2101      	movs	r1, #1
 800760e:	0018      	movs	r0, r3
 8007610:	f7fc fa18 	bl	8003a44 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	02db      	lsls	r3, r3, #11
 8007618:	2101      	movs	r1, #1
 800761a:	0018      	movs	r0, r3
 800761c:	f7fc fa12 	bl	8003a44 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8007620:	2101      	movs	r1, #1
 8007622:	2001      	movs	r0, #1
 8007624:	f7fc fa0e 	bl	8003a44 <RCC_AHBPeriphClockCmd>

//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 |
//								  GPIO_Pin_2 | GPIO_Pin_3 |
//								  GPIO_Pin_4;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3;
 8007628:	2438      	movs	r4, #56	; 0x38
 800762a:	193b      	adds	r3, r7, r4
 800762c:	220b      	movs	r2, #11
 800762e:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8007630:	193b      	adds	r3, r7, r4
 8007632:	2203      	movs	r2, #3
 8007634:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007636:	193b      	adds	r3, r7, r4
 8007638:	2200      	movs	r2, #0
 800763a:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800763c:	193a      	adds	r2, r7, r4
 800763e:	2390      	movs	r3, #144	; 0x90
 8007640:	05db      	lsls	r3, r3, #23
 8007642:	0011      	movs	r1, r2
 8007644:	0018      	movs	r0, r3
 8007646:	f7fb ff03 	bl	8003450 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800764a:	193b      	adds	r3, r7, r4
 800764c:	2203      	movs	r2, #3
 800764e:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007650:	193b      	adds	r3, r7, r4
 8007652:	4a4f      	ldr	r2, [pc, #316]	; (8007790 <OpticalSensor_Init+0x1a0>)
 8007654:	0019      	movs	r1, r3
 8007656:	0010      	movs	r0, r2
 8007658:	f7fb fefa 	bl	8003450 <GPIO_Init>

	/* ADC De-initialization ***************************************************/
	ADC_DeInit(ADC1);
 800765c:	4b4d      	ldr	r3, [pc, #308]	; (8007794 <OpticalSensor_Init+0x1a4>)
 800765e:	0018      	movs	r0, r3
 8007660:	f7fb fc00 	bl	8002e64 <ADC_DeInit>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8007664:	2440      	movs	r4, #64	; 0x40
 8007666:	193b      	adds	r3, r7, r4
 8007668:	0018      	movs	r0, r3
 800766a:	f7fb fc41 	bl	8002ef0 <ADC_StructInit>

	/* Configure the ADC1 in continuous mode with a resolution equal to 12 bits  */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800766e:	0021      	movs	r1, r4
 8007670:	187b      	adds	r3, r7, r1
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8007676:	187b      	adds	r3, r7, r1
 8007678:	2201      	movs	r2, #1
 800767a:	711a      	strb	r2, [r3, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800767c:	187b      	adds	r3, r7, r1
 800767e:	2200      	movs	r2, #0
 8007680:	609a      	str	r2, [r3, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8007682:	187b      	adds	r3, r7, r1
 8007684:	2200      	movs	r2, #0
 8007686:	611a      	str	r2, [r3, #16]
	ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
 8007688:	187b      	adds	r3, r7, r1
 800768a:	2200      	movs	r2, #0
 800768c:	615a      	str	r2, [r3, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 800768e:	187b      	adds	r3, r7, r1
 8007690:	4a40      	ldr	r2, [pc, #256]	; (8007794 <OpticalSensor_Init+0x1a4>)
 8007692:	0019      	movs	r1, r3
 8007694:	0010      	movs	r0, r2
 8007696:	f7fb fbff 	bl	8002e98 <ADC_Init>

	/* Convert the ADC1 5 Channel with 239.5 Cycles as sampling time */
	ADC_ChannelConfig(ADC1, ADC_Channel_0, ADC_SampleTime_239_5Cycles);
 800769a:	4b3e      	ldr	r3, [pc, #248]	; (8007794 <OpticalSensor_Init+0x1a4>)
 800769c:	2207      	movs	r2, #7
 800769e:	2101      	movs	r1, #1
 80076a0:	0018      	movs	r0, r3
 80076a2:	f7fb fc5b 	bl	8002f5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_1, ADC_SampleTime_239_5Cycles);
 80076a6:	4b3b      	ldr	r3, [pc, #236]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076a8:	2207      	movs	r2, #7
 80076aa:	2102      	movs	r1, #2
 80076ac:	0018      	movs	r0, r3
 80076ae:	f7fb fc55 	bl	8002f5c <ADC_ChannelConfig>
//	ADC_ChannelConfig(ADC1, ADC_Channel_2, ADC_SampleTime_239_5Cycles);
	ADC_ChannelConfig(ADC1, ADC_Channel_3, ADC_SampleTime_239_5Cycles);
 80076b2:	4b38      	ldr	r3, [pc, #224]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076b4:	2207      	movs	r2, #7
 80076b6:	2108      	movs	r1, #8
 80076b8:	0018      	movs	r0, r3
 80076ba:	f7fb fc4f 	bl	8002f5c <ADC_ChannelConfig>
//	ADC_ChannelConfig(ADC1, ADC_Channel_4, ADC_SampleTime_239_5Cycles);
	ADC_ChannelConfig(ADC1, ADC_Channel_8, ADC_SampleTime_239_5Cycles);
 80076be:	2380      	movs	r3, #128	; 0x80
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4834      	ldr	r0, [pc, #208]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076c4:	2207      	movs	r2, #7
 80076c6:	0019      	movs	r1, r3
 80076c8:	f7fb fc48 	bl	8002f5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_9, ADC_SampleTime_239_5Cycles);
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4830      	ldr	r0, [pc, #192]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076d2:	2207      	movs	r2, #7
 80076d4:	0019      	movs	r1, r3
 80076d6:	f7fb fc41 	bl	8002f5c <ADC_ChannelConfig>

	/* ADC Calibration */
	ADC_GetCalibrationFactor(ADC1);
 80076da:	4b2e      	ldr	r3, [pc, #184]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076dc:	0018      	movs	r0, r3
 80076de:	f7fb fc5a 	bl	8002f96 <ADC_GetCalibrationFactor>

	/* Enable the ADC peripheral */
	ADC_Cmd(ADC1, ENABLE);
 80076e2:	4b2c      	ldr	r3, [pc, #176]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076e4:	2101      	movs	r1, #1
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7fb fc1c 	bl	8002f24 <ADC_Cmd>

	/* Wait the ADRDY flag */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADRDY));
 80076ec:	46c0      	nop			; (mov r8, r8)
 80076ee:	4b29      	ldr	r3, [pc, #164]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076f0:	2101      	movs	r1, #1
 80076f2:	0018      	movs	r0, r3
 80076f4:	f7fb fcc0 	bl	8003078 <ADC_GetFlagStatus>
 80076f8:	1e03      	subs	r3, r0, #0
 80076fa:	d0f8      	beq.n	80076ee <OpticalSensor_Init+0xfe>

	/* ADC1 regular Software Start Conv */
	ADC_StartOfConversion(ADC1);
 80076fc:	4b25      	ldr	r3, [pc, #148]	; (8007794 <OpticalSensor_Init+0x1a4>)
 80076fe:	0018      	movs	r0, r3
 8007700:	f7fb fc79 	bl	8002ff6 <ADC_StartOfConversion>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 8007704:	1dfb      	adds	r3, r7, #7
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d13d      	bne.n	8007788 <OpticalSensor_Init+0x198>
	{
		/* ADC DMA request in circular mode */
		ADC_DMARequestModeConfig(ADC1, ADC_DMAMode_Circular);
 800770c:	4b21      	ldr	r3, [pc, #132]	; (8007794 <OpticalSensor_Init+0x1a4>)
 800770e:	2102      	movs	r1, #2
 8007710:	0018      	movs	r0, r3
 8007712:	f7fb fc9b 	bl	800304c <ADC_DMARequestModeConfig>

		/* Enable ADC_DMA */
		ADC_DMACmd(ADC1, ENABLE);
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <OpticalSensor_Init+0x1a4>)
 8007718:	2101      	movs	r1, #1
 800771a:	0018      	movs	r0, r3
 800771c:	f7fb fc79 	bl	8003012 <ADC_DMACmd>

		/* DMA2_Stream0 channel0 configuration ********************************/
		DMA_DeInit(DMA1_Channel1);
 8007720:	4b1d      	ldr	r3, [pc, #116]	; (8007798 <OpticalSensor_Init+0x1a8>)
 8007722:	0018      	movs	r0, r3
 8007724:	f7fb fcd8 	bl	80030d8 <DMA_DeInit>
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR_Address;
 8007728:	210c      	movs	r1, #12
 800772a:	187b      	adds	r3, r7, r1
 800772c:	4a1b      	ldr	r2, [pc, #108]	; (800779c <OpticalSensor_Init+0x1ac>)
 800772e:	601a      	str	r2, [r3, #0]
		DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)RegularConvData_Tab;
 8007730:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <OpticalSensor_Init+0x1b0>)
 8007732:	187b      	adds	r3, r7, r1
 8007734:	605a      	str	r2, [r3, #4]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8007736:	187b      	adds	r3, r7, r1
 8007738:	2200      	movs	r2, #0
 800773a:	609a      	str	r2, [r3, #8]
		DMA_InitStructure.DMA_BufferSize = 5;
 800773c:	187b      	adds	r3, r7, r1
 800773e:	2205      	movs	r2, #5
 8007740:	60da      	str	r2, [r3, #12]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8007742:	187b      	adds	r3, r7, r1
 8007744:	2200      	movs	r2, #0
 8007746:	611a      	str	r2, [r3, #16]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8007748:	187b      	adds	r3, r7, r1
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	615a      	str	r2, [r3, #20]
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800774e:	187b      	adds	r3, r7, r1
 8007750:	2280      	movs	r2, #128	; 0x80
 8007752:	0052      	lsls	r2, r2, #1
 8007754:	619a      	str	r2, [r3, #24]
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8007756:	187b      	adds	r3, r7, r1
 8007758:	2280      	movs	r2, #128	; 0x80
 800775a:	00d2      	lsls	r2, r2, #3
 800775c:	61da      	str	r2, [r3, #28]
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800775e:	187b      	adds	r3, r7, r1
 8007760:	2220      	movs	r2, #32
 8007762:	621a      	str	r2, [r3, #32]
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8007764:	187b      	adds	r3, r7, r1
 8007766:	2280      	movs	r2, #128	; 0x80
 8007768:	0192      	lsls	r2, r2, #6
 800776a:	625a      	str	r2, [r3, #36]	; 0x24
		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800776c:	187b      	adds	r3, r7, r1
 800776e:	2200      	movs	r2, #0
 8007770:	629a      	str	r2, [r3, #40]	; 0x28
		DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8007772:	187b      	adds	r3, r7, r1
 8007774:	4a08      	ldr	r2, [pc, #32]	; (8007798 <OpticalSensor_Init+0x1a8>)
 8007776:	0019      	movs	r1, r3
 8007778:	0010      	movs	r0, r2
 800777a:	f7fb fd71 	bl	8003260 <DMA_Init>

		/* DMA1 Channel1 enable */
		DMA_Cmd(DMA1_Channel1, ENABLE);
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <OpticalSensor_Init+0x1a8>)
 8007780:	2101      	movs	r1, #1
 8007782:	0018      	movs	r0, r3
 8007784:	f7fb fdaa 	bl	80032dc <DMA_Cmd>
	}
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b017      	add	sp, #92	; 0x5c
 800778e:	bd90      	pop	{r4, r7, pc}
 8007790:	48000400 	.word	0x48000400
 8007794:	40012400 	.word	0x40012400
 8007798:	40020008 	.word	0x40020008
 800779c:	40012440 	.word	0x40012440
 80077a0:	2000041c 	.word	0x2000041c

080077a4 <OpticalSensor_MeasureUseDMAMode>:
 * @param  None
 * @retval Value of ADC
 */
uint16_t
OpticalSensor_MeasureUseDMAMode(uint8_t irSensID)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	0002      	movs	r2, r0
 80077ac:	1dfb      	adds	r3, r7, #7
 80077ae:	701a      	strb	r2, [r3, #0]
	if (irSensID >= (sizeof(RegularConvData_Tab) / sizeof(RegularConvData_Tab[0])))
 80077b0:	1dfb      	adds	r3, r7, #7
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d901      	bls.n	80077bc <OpticalSensor_MeasureUseDMAMode+0x18>
		return 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e005      	b.n	80077c8 <OpticalSensor_MeasureUseDMAMode+0x24>

	return RegularConvData_Tab[irSensID];
 80077bc:	1dfb      	adds	r3, r7, #7
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <OpticalSensor_MeasureUseDMAMode+0x2c>)
 80077c2:	0052      	lsls	r2, r2, #1
 80077c4:	5ad3      	ldrh	r3, [r2, r3]
 80077c6:	b29b      	uxth	r3, r3
}
 80077c8:	0018      	movs	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b002      	add	sp, #8
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	2000041c 	.word	0x2000041c

080077d4 <SamplingWhite>:
 * @brief  Sampling White line
 * @param  None
 * @retval None
 */
void SamplingWhite(void)
{
 80077d4:	b590      	push	{r4, r7, lr}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
	uint32_t sample[IR_SENSOR_MAX] = {0};
 80077da:	003b      	movs	r3, r7
 80077dc:	0018      	movs	r0, r3
 80077de:	2314      	movs	r3, #20
 80077e0:	001a      	movs	r2, r3
 80077e2:	2100      	movs	r1, #0
 80077e4:	f000 fccf 	bl	8008186 <memset>

	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 80077e8:	2317      	movs	r3, #23
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	e03a      	b.n	8007868 <SamplingWhite+0x94>
	{
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 80077f2:	2316      	movs	r3, #22
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	e019      	b.n	8007830 <SamplingWhite+0x5c>
		{
			sample[i] += OpticalSensor_MeasureUseDMAMode(i);
 80077fc:	2417      	movs	r4, #23
 80077fe:	193b      	adds	r3, r7, r4
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	0018      	movs	r0, r3
 8007804:	f7ff ffce 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 8007808:	0003      	movs	r3, r0
 800780a:	0019      	movs	r1, r3
 800780c:	0020      	movs	r0, r4
 800780e:	183b      	adds	r3, r7, r0
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	003b      	movs	r3, r7
 8007814:	0092      	lsls	r2, r2, #2
 8007816:	58d3      	ldr	r3, [r2, r3]
 8007818:	183a      	adds	r2, r7, r0
 800781a:	7812      	ldrb	r2, [r2, #0]
 800781c:	1859      	adds	r1, r3, r1
 800781e:	003b      	movs	r3, r7
 8007820:	0092      	lsls	r2, r2, #2
 8007822:	50d1      	str	r1, [r2, r3]
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 8007824:	2116      	movs	r1, #22
 8007826:	187b      	adds	r3, r7, r1
 8007828:	781a      	ldrb	r2, [r3, #0]
 800782a:	187b      	adds	r3, r7, r1
 800782c:	3201      	adds	r2, #1
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	2316      	movs	r3, #22
 8007832:	18fb      	adds	r3, r7, r3
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2bc7      	cmp	r3, #199	; 0xc7
 8007838:	d9e0      	bls.n	80077fc <SamplingWhite+0x28>

		}

		AdcValues_White[i] = sample[i] / IRSENSOR_NUM_SAMPLING;
 800783a:	2417      	movs	r4, #23
 800783c:	193b      	adds	r3, r7, r4
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	003b      	movs	r3, r7
 8007842:	0092      	lsls	r2, r2, #2
 8007844:	58d3      	ldr	r3, [r2, r3]
 8007846:	21c8      	movs	r1, #200	; 0xc8
 8007848:	0018      	movs	r0, r3
 800784a:	f7f8 fc65 	bl	8000118 <__udivsi3>
 800784e:	0003      	movs	r3, r0
 8007850:	0019      	movs	r1, r3
 8007852:	193b      	adds	r3, r7, r4
 8007854:	781a      	ldrb	r2, [r3, #0]
 8007856:	b289      	uxth	r1, r1
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <SamplingWhite+0xa8>)
 800785a:	0052      	lsls	r2, r2, #1
 800785c:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 800785e:	193b      	adds	r3, r7, r4
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	193b      	adds	r3, r7, r4
 8007864:	3201      	adds	r2, #1
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	2317      	movs	r3, #23
 800786a:	18fb      	adds	r3, r7, r3
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b04      	cmp	r3, #4
 8007870:	d9bf      	bls.n	80077f2 <SamplingWhite+0x1e>
	}
}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b007      	add	sp, #28
 800787a:	bd90      	pop	{r4, r7, pc}
 800787c:	20000428 	.word	0x20000428

08007880 <SamplingBlack>:
 * @brief  Sampling Black Line
 * @param  None
 * @retval None
 */
void SamplingBlack(void)
{
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
	uint32_t sample[IR_SENSOR_MAX] = {0};
 8007886:	003b      	movs	r3, r7
 8007888:	0018      	movs	r0, r3
 800788a:	2314      	movs	r3, #20
 800788c:	001a      	movs	r2, r3
 800788e:	2100      	movs	r1, #0
 8007890:	f000 fc79 	bl	8008186 <memset>

	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 8007894:	2317      	movs	r3, #23
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e03a      	b.n	8007914 <SamplingBlack+0x94>
	{
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 800789e:	2316      	movs	r3, #22
 80078a0:	18fb      	adds	r3, r7, r3
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e019      	b.n	80078dc <SamplingBlack+0x5c>
		{
			sample[i] += OpticalSensor_MeasureUseDMAMode(i);
 80078a8:	2417      	movs	r4, #23
 80078aa:	193b      	adds	r3, r7, r4
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7ff ff78 	bl	80077a4 <OpticalSensor_MeasureUseDMAMode>
 80078b4:	0003      	movs	r3, r0
 80078b6:	0019      	movs	r1, r3
 80078b8:	0020      	movs	r0, r4
 80078ba:	183b      	adds	r3, r7, r0
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	003b      	movs	r3, r7
 80078c0:	0092      	lsls	r2, r2, #2
 80078c2:	58d3      	ldr	r3, [r2, r3]
 80078c4:	183a      	adds	r2, r7, r0
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	1859      	adds	r1, r3, r1
 80078ca:	003b      	movs	r3, r7
 80078cc:	0092      	lsls	r2, r2, #2
 80078ce:	50d1      	str	r1, [r2, r3]
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 80078d0:	2116      	movs	r1, #22
 80078d2:	187b      	adds	r3, r7, r1
 80078d4:	781a      	ldrb	r2, [r3, #0]
 80078d6:	187b      	adds	r3, r7, r1
 80078d8:	3201      	adds	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	2316      	movs	r3, #22
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2bc7      	cmp	r3, #199	; 0xc7
 80078e4:	d9e0      	bls.n	80078a8 <SamplingBlack+0x28>

		}

		AdcValues_Black[i] = sample[i] / IRSENSOR_NUM_SAMPLING;
 80078e6:	2417      	movs	r4, #23
 80078e8:	193b      	adds	r3, r7, r4
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	003b      	movs	r3, r7
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	58d3      	ldr	r3, [r2, r3]
 80078f2:	21c8      	movs	r1, #200	; 0xc8
 80078f4:	0018      	movs	r0, r3
 80078f6:	f7f8 fc0f 	bl	8000118 <__udivsi3>
 80078fa:	0003      	movs	r3, r0
 80078fc:	0019      	movs	r1, r3
 80078fe:	193b      	adds	r3, r7, r4
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	b289      	uxth	r1, r1
 8007904:	4b08      	ldr	r3, [pc, #32]	; (8007928 <SamplingBlack+0xa8>)
 8007906:	0052      	lsls	r2, r2, #1
 8007908:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 800790a:	193b      	adds	r3, r7, r4
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	193b      	adds	r3, r7, r4
 8007910:	3201      	adds	r2, #1
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	2317      	movs	r3, #23
 8007916:	18fb      	adds	r3, r7, r3
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b04      	cmp	r3, #4
 800791c:	d9bf      	bls.n	800789e <SamplingBlack+0x1e>
	}
}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	46c0      	nop			; (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	b007      	add	sp, #28
 8007926:	bd90      	pop	{r4, r7, pc}
 8007928:	20000434 	.word	0x20000434

0800792c <Calculate_AdcThreshold>:
 * @brief
 * @param  None
 * @retval Threshold of per Adc Values
 */
void Calculate_AdcThreshold(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++) {
 8007932:	1dfb      	adds	r3, r7, #7
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]
 8007938:	e01b      	b.n	8007972 <Calculate_AdcThreshold+0x46>
		AdcValuesThreshold[i] = ((AdcValues_White[i] + AdcValues_Black[i]) / 2);
 800793a:	1dfb      	adds	r3, r7, #7
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <Calculate_AdcThreshold+0x58>)
 8007940:	0052      	lsls	r2, r2, #1
 8007942:	5ad3      	ldrh	r3, [r2, r3]
 8007944:	0019      	movs	r1, r3
 8007946:	1dfb      	adds	r3, r7, #7
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <Calculate_AdcThreshold+0x5c>)
 800794c:	0052      	lsls	r2, r2, #1
 800794e:	5ad3      	ldrh	r3, [r2, r3]
 8007950:	18cb      	adds	r3, r1, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	da00      	bge.n	8007958 <Calculate_AdcThreshold+0x2c>
 8007956:	3301      	adds	r3, #1
 8007958:	105b      	asrs	r3, r3, #1
 800795a:	0019      	movs	r1, r3
 800795c:	1dfb      	adds	r3, r7, #7
 800795e:	781a      	ldrb	r2, [r3, #0]
 8007960:	b289      	uxth	r1, r1
 8007962:	4b0a      	ldr	r3, [pc, #40]	; (800798c <Calculate_AdcThreshold+0x60>)
 8007964:	0052      	lsls	r2, r2, #1
 8007966:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++) {
 8007968:	1dfb      	adds	r3, r7, #7
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	1dfb      	adds	r3, r7, #7
 800796e:	3201      	adds	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	1dfb      	adds	r3, r7, #7
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b04      	cmp	r3, #4
 8007978:	d9df      	bls.n	800793a <Calculate_AdcThreshold+0xe>
	}
}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}
 8007984:	20000428 	.word	0x20000428
 8007988:	20000434 	.word	0x20000434
 800798c:	2000014c 	.word	0x2000014c

08007990 <Serial_Init>:
 * @brief  Initialize UART and receive buffer register
 * @param  None
 * @retval None
 */
void
Serial_Init(void) {
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
    /* Initializes receive register buffer  */
    bufInit(pBuffDataRx, &serialQueueRx, sizeof(pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	490b      	ldr	r1, [pc, #44]	; (80079c8 <Serial_Init+0x38>)
 800799a:	480c      	ldr	r0, [pc, #48]	; (80079cc <Serial_Init+0x3c>)
 800799c:	2201      	movs	r2, #1
 800799e:	f000 f8ed 	bl	8007b7c <bufInit>
	UART_RegBufferRx(USART1_IDX, &serialQueueRx);
 80079a2:	4b09      	ldr	r3, [pc, #36]	; (80079c8 <Serial_Init+0x38>)
 80079a4:	0019      	movs	r1, r3
 80079a6:	2001      	movs	r0, #1
 80079a8:	f000 f814 	bl	80079d4 <UART_RegBufferRx>

    /* Initializes UART */
    UART_Init(USART1_IDX, BAUD57600, NO_PARITY, ONE_STOP_BIT);
 80079ac:	23e1      	movs	r3, #225	; 0xe1
 80079ae:	0219      	lsls	r1, r3, #8
 80079b0:	2300      	movs	r3, #0
 80079b2:	2200      	movs	r2, #0
 80079b4:	2001      	movs	r0, #1
 80079b6:	f000 f821 	bl	80079fc <UART_Init>
	byRxBufState = (uint8_t)RX_STATE_START_BYTE;
 80079ba:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <Serial_Init+0x40>)
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
}
 80079c0:	46c0      	nop			; (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	20000440 	.word	0x20000440
 80079cc:	20000450 	.word	0x20000450
 80079d0:	2000043e 	.word	0x2000043e

080079d4 <UART_RegBufferRx>:
 */
void
UART_RegBufferRx(
    uint8_t byUartNumber,
    buffqueue_p pQueueRx
) {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	0002      	movs	r2, r0
 80079dc:	6039      	str	r1, [r7, #0]
 80079de:	1dfb      	adds	r3, r7, #7
 80079e0:	701a      	strb	r2, [r3, #0]
    g_pUartQueueRx[byUartNumber] = pQueueRx;
 80079e2:	1dfb      	adds	r3, r7, #7
 80079e4:	781a      	ldrb	r2, [r3, #0]
 80079e6:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <UART_RegBufferRx+0x24>)
 80079e8:	0092      	lsls	r2, r2, #2
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	50d1      	str	r1, [r2, r3]
}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	46bd      	mov	sp, r7
 80079f2:	b002      	add	sp, #8
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	20000550 	.word	0x20000550

080079fc <UART_Init>:
UART_Init(
    uint8_t byUartNumber,
	uint32_t dwBaudRate,
	uint8_t byParity,
	uint8_t byStopBit
) {
 80079fc:	b590      	push	{r4, r7, lr}
 80079fe:	b08d      	sub	sp, #52	; 0x34
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	0004      	movs	r4, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	0010      	movs	r0, r2
 8007a08:	0019      	movs	r1, r3
 8007a0a:	1dfb      	adds	r3, r7, #7
 8007a0c:	1c22      	adds	r2, r4, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	1dbb      	adds	r3, r7, #6
 8007a12:	1c02      	adds	r2, r0, #0
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	1d7b      	adds	r3, r7, #5
 8007a18:	1c0a      	adds	r2, r1, #0
 8007a1a:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable GPIO clock */
    RCC_AHBPeriphClockCmd(USARTx_TX_GPIO_CLK | USARTx_RX_GPIO_CLK, ENABLE);
 8007a1c:	2380      	movs	r3, #128	; 0x80
 8007a1e:	029b      	lsls	r3, r3, #10
 8007a20:	2101      	movs	r1, #1
 8007a22:	0018      	movs	r0, r3
 8007a24:	f7fc f80e 	bl	8003a44 <RCC_AHBPeriphClockCmd>

    /* Configure USART Tx, Rx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007a28:	2428      	movs	r4, #40	; 0x28
 8007a2a:	193b      	adds	r3, r7, r4
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007a30:	193b      	adds	r3, r7, r4
 8007a32:	2203      	movs	r2, #3
 8007a34:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007a36:	193b      	adds	r3, r7, r4
 8007a38:	2200      	movs	r2, #0
 8007a3a:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8007a3c:	193b      	adds	r3, r7, r4
 8007a3e:	2201      	movs	r2, #1
 8007a40:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Pin = USARTx_TX_PIN;
 8007a42:	193b      	adds	r3, r7, r4
 8007a44:	2280      	movs	r2, #128	; 0x80
 8007a46:	0092      	lsls	r2, r2, #2
 8007a48:	601a      	str	r2, [r3, #0]
    GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8007a4a:	193a      	adds	r2, r7, r4
 8007a4c:	2390      	movs	r3, #144	; 0x90
 8007a4e:	05db      	lsls	r3, r3, #23
 8007a50:	0011      	movs	r1, r2
 8007a52:	0018      	movs	r0, r3
 8007a54:	f7fb fcfc 	bl	8003450 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = USARTx_RX_PIN;
 8007a58:	0021      	movs	r1, r4
 8007a5a:	187b      	adds	r3, r7, r1
 8007a5c:	2280      	movs	r2, #128	; 0x80
 8007a5e:	00d2      	lsls	r2, r2, #3
 8007a60:	601a      	str	r2, [r3, #0]
    GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8007a62:	187a      	adds	r2, r7, r1
 8007a64:	2390      	movs	r3, #144	; 0x90
 8007a66:	05db      	lsls	r3, r3, #23
 8007a68:	0011      	movs	r1, r2
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f7fb fcf0 	bl	8003450 <GPIO_Init>

    /* Connect USART pins to AF9 and AF10 */
	GPIO_PinAFConfig(USARTx_TX_GPIO_PORT, USARTx_TX_SOURCE, USARTx_TX_AF);
 8007a70:	2390      	movs	r3, #144	; 0x90
 8007a72:	05db      	lsls	r3, r3, #23
 8007a74:	2201      	movs	r2, #1
 8007a76:	2109      	movs	r1, #9
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7fb fdbe 	bl	80035fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(USARTx_RX_GPIO_PORT, USARTx_RX_SOURCE, USARTx_RX_AF);
 8007a7e:	2390      	movs	r3, #144	; 0x90
 8007a80:	05db      	lsls	r3, r3, #23
 8007a82:	2201      	movs	r2, #1
 8007a84:	210a      	movs	r1, #10
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7fb fdb7 	bl	80035fa <GPIO_PinAFConfig>

	/* Enable USART clock */
	USARTx_CLK_INIT(USARTx_CLK, ENABLE);
 8007a8c:	2380      	movs	r3, #128	; 0x80
 8007a8e:	01db      	lsls	r3, r3, #7
 8007a90:	2101      	movs	r1, #1
 8007a92:	0018      	movs	r0, r3
 8007a94:	f7fb fff6 	bl	8003a84 <RCC_APB2PeriphClockCmd>

    USART_InitStructure.USART_BaudRate = dwBaudRate;
 8007a98:	2110      	movs	r1, #16
 8007a9a:	187b      	adds	r3, r7, r1
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	601a      	str	r2, [r3, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8007aa0:	187b      	adds	r3, r7, r1
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	605a      	str	r2, [r3, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8007aa6:	187b      	adds	r3, r7, r1
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	609a      	str	r2, [r3, #8]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	2200      	movs	r2, #0
 8007ab0:	60da      	str	r2, [r3, #12]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8007ab2:	187b      	adds	r3, r7, r1
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	615a      	str	r2, [r3, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8007ab8:	187b      	adds	r3, r7, r1
 8007aba:	220c      	movs	r2, #12
 8007abc:	611a      	str	r2, [r3, #16]
    USART_Init(USART1, &USART_InitStructure);
 8007abe:	187b      	adds	r3, r7, r1
 8007ac0:	4a12      	ldr	r2, [pc, #72]	; (8007b0c <UART_Init+0x110>)
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	0010      	movs	r0, r2
 8007ac6:	f7fc fc3b 	bl	8004340 <USART_Init>

    /* Enable USARTx Receive and Transmit interrupts */
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8007aca:	4911      	ldr	r1, [pc, #68]	; (8007b10 <UART_Init+0x114>)
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <UART_Init+0x110>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f7fc fd24 	bl	800451e <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8007ad6:	490f      	ldr	r1, [pc, #60]	; (8007b14 <UART_Init+0x118>)
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <UART_Init+0x110>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7fc fd1e 	bl	800451e <USART_ITConfig>
	/* Configure the Priority Group to 2 bits */
//	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	/* Enable the USARTx Interrupt */
//	NVIC_InitStructure.NVIC_IRQChannel = USARTx_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8007ae2:	210c      	movs	r1, #12
 8007ae4:	187b      	adds	r3, r7, r1
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8007aea:	187b      	adds	r3, r7, r1
 8007aec:	2201      	movs	r2, #1
 8007aee:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	0018      	movs	r0, r3
 8007af4:	f7fb fdd4 	bl	80036a0 <NVIC_Init>

	/* Enable USART */
	USART_Cmd(USART1, ENABLE);
 8007af8:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <UART_Init+0x110>)
 8007afa:	2101      	movs	r1, #1
 8007afc:	0018      	movs	r0, r3
 8007afe:	f7fc fce3 	bl	80044c8 <USART_Cmd>
}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b00d      	add	sp, #52	; 0x34
 8007b08:	bd90      	pop	{r4, r7, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	40013800 	.word	0x40013800
 8007b10:	00050105 	.word	0x00050105
 8007b14:	00070107 	.word	0x00070107

08007b18 <USART1_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART1_IRQHandler(void) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b1e:	b672      	cpsid	i
}
 8007b20:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) {
 8007b22:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <USART1_IRQHandler+0x58>)
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <USART1_IRQHandler+0x5c>)
 8007b26:	0011      	movs	r1, r2
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f7fc fd3a 	bl	80045a2 <USART_GetITStatus>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d116      	bne.n	8007b62 <USART1_IRQHandler+0x4a>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8007b34:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <USART1_IRQHandler+0x60>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART1);
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <USART1_IRQHandler+0x5c>)
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f7fc fce0 	bl	8004502 <USART_ReceiveData>
 8007b42:	0003      	movs	r3, r0
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	1cfb      	adds	r3, r7, #3
 8007b48:	701a      	strb	r2, [r3, #0]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8007b4a:	1cfa      	adds	r2, r7, #3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	0011      	movs	r1, r2
 8007b50:	0018      	movs	r0, r3
 8007b52:	f000 f86a 	bl	8007c2a <bufEnDat>
        USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8007b56:	4a06      	ldr	r2, [pc, #24]	; (8007b70 <USART1_IRQHandler+0x58>)
 8007b58:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <USART1_IRQHandler+0x5c>)
 8007b5a:	0011      	movs	r1, r2
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f7fc fd77 	bl	8004650 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8007b62:	b662      	cpsie	i
}
 8007b64:	46c0      	nop			; (mov r8, r8)
    }
    __enable_irq();
}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b002      	add	sp, #8
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	00050105 	.word	0x00050105
 8007b74:	40013800 	.word	0x40013800
 8007b78:	20000550 	.word	0x20000550

08007b7c <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	0019      	movs	r1, r3
 8007b88:	1dfb      	adds	r3, r7, #7
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	1d3b      	adds	r3, r7, #4
 8007b8e:	1c0a      	adds	r2, r1, #0
 8007b90:	801a      	strh	r2, [r3, #0]
    pQueue->wSize = numberOfElement;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	1d3a      	adds	r2, r7, #4
 8007b96:	8812      	ldrh	r2, [r2, #0]
 8007b98:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	1dfa      	adds	r2, r7, #7
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	0018      	movs	r0, r3
 8007bac:	f000 f824 	bl	8007bf8 <bufFlush>
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b004      	add	sp, #16
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8859      	ldrh	r1, [r3, #2]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	881a      	ldrh	r2, [r3, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	415b      	adcs	r3, r3
 8007bce:	b2db      	uxtb	r3, r3
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b002      	add	sp, #8
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	88da      	ldrh	r2, [r3, #6]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	891b      	ldrh	r3, [r3, #8]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	425a      	negs	r2, r3
 8007bec:	4153      	adcs	r3, r2
 8007bee:	b2db      	uxtb	r3, r3
}
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	b002      	add	sp, #8
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68d8      	ldr	r0, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	001a      	movs	r2, r3
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f000 f8a9 	bl	8007d74 <memsetl>
}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	46bd      	mov	sp, r7
 8007c26:	b002      	add	sp, #8
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c34:	b672      	cpsid	i
}
 8007c36:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007c38:	230f      	movs	r3, #15
 8007c3a:	18fb      	adds	r3, r7, r3
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	e025      	b.n	8007c8e <bufEnDat+0x64>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8007c42:	200f      	movs	r0, #15
 8007c44:	183b      	adds	r3, r7, r0
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	18d2      	adds	r2, r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	88c9      	ldrh	r1, [r1, #6]
 8007c54:	185b      	adds	r3, r3, r1
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	88db      	ldrh	r3, [r3, #6]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	8812      	ldrh	r2, [r2, #0]
 8007c68:	3a01      	subs	r2, #1
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	b212      	sxth	r2, r2
 8007c6e:	4013      	ands	r3, r2
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	885b      	ldrh	r3, [r3, #2]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007c84:	183b      	adds	r3, r7, r0
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	183b      	adds	r3, r7, r0
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	791b      	ldrb	r3, [r3, #4]
 8007c92:	220f      	movs	r2, #15
 8007c94:	18ba      	adds	r2, r7, r2
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d3d2      	bcc.n	8007c42 <bufEnDat+0x18>
    }
    
    if (bufIsFull(pQueue)) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f7ff ff8a 	bl	8007bb8 <bufIsFull>
 8007ca4:	1e03      	subs	r3, r0, #0
 8007ca6:	d011      	beq.n	8007ccc <bufEnDat+0xa2>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	891a      	ldrh	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	791b      	ldrb	r3, [r3, #4]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	18d3      	adds	r3, r2, r3
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	b21b      	sxth	r3, r3
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	8812      	ldrh	r2, [r2, #0]
 8007cbc:	3a01      	subs	r2, #1
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	b212      	sxth	r2, r2
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	b21b      	sxth	r3, r3
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8007ccc:	b662      	cpsie	i
}
 8007cce:	46c0      	nop			; (mov r8, r8)
    }
    
    __enable_irq();
    return ERR_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b004      	add	sp, #16
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ce4:	b672      	cpsid	i
}
 8007ce6:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	0018      	movs	r0, r3
 8007cec:	f7ff ff74 	bl	8007bd8 <bufIsEmpty>
 8007cf0:	1e03      	subs	r3, r0, #0
 8007cf2:	d006      	beq.n	8007d02 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8007cfa:	b662      	cpsie	i
}
 8007cfc:	46c0      	nop			; (mov r8, r8)
        __enable_irq();
        return ERR_BUF_EMPTY;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e034      	b.n	8007d6c <bufDeDat+0x92>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007d02:	230f      	movs	r3, #15
 8007d04:	18fb      	adds	r3, r7, r3
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e025      	b.n	8007d58 <bufDeDat+0x7e>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	8912      	ldrh	r2, [r2, #8]
 8007d14:	189a      	adds	r2, r3, r2
 8007d16:	200f      	movs	r0, #15
 8007d18:	183b      	adds	r3, r7, r0
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	18cb      	adds	r3, r1, r3
 8007d20:	7812      	ldrb	r2, [r2, #0]
 8007d22:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	891b      	ldrh	r3, [r3, #8]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	8812      	ldrh	r2, [r2, #0]
 8007d32:	3a01      	subs	r2, #1
 8007d34:	b292      	uxth	r2, r2
 8007d36:	b212      	sxth	r2, r2
 8007d38:	4013      	ands	r3, r2
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	885b      	ldrh	r3, [r3, #2]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007d4e:	183b      	adds	r3, r7, r0
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	183b      	adds	r3, r7, r0
 8007d54:	3201      	adds	r2, #1
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	791b      	ldrb	r3, [r3, #4]
 8007d5c:	220f      	movs	r2, #15
 8007d5e:	18ba      	adds	r2, r7, r2
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d3d2      	bcc.n	8007d0c <bufDeDat+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 8007d66:	b662      	cpsie	i
}
 8007d68:	46c0      	nop			; (mov r8, r8)
    }
    
    __enable_irq();
    return ERR_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b004      	add	sp, #16
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	0008      	movs	r0, r1
 8007d7e:	0011      	movs	r1, r2
 8007d80:	1cfb      	adds	r3, r7, #3
 8007d82:	1c02      	adds	r2, r0, #0
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	003b      	movs	r3, r7
 8007d88:	1c0a      	adds	r2, r1, #0
 8007d8a:	801a      	strh	r2, [r3, #0]
    while (size--) {
 8007d8c:	e005      	b.n	8007d9a <memsetl+0x26>
        *dst++ = value;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	1cfa      	adds	r2, r7, #3
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8007d9a:	003b      	movs	r3, r7
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	003a      	movs	r2, r7
 8007da0:	1e59      	subs	r1, r3, #1
 8007da2:	8011      	strh	r1, [r2, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f2      	bne.n	8007d8e <memsetl+0x1a>
    }    
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b002      	add	sp, #8
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <dwCalculatorTime>:
) {
    return ((val >= rmin) && (val <= rmax));
}

uint32_t dwCalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d303      	bcc.n	8007dcc <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	e003      	b.n	8007dd4 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	3b01      	subs	r3, #1
	}
}
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	b002      	add	sp, #8
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <delay_ms>:
void delay_ms(uint32_t ms)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	uint32_t dwTimeInit = GetMilSecTick();
 8007de4:	f7ff faee 	bl	80073c4 <GetMilSecTick>
 8007de8:	0003      	movs	r3, r0
 8007dea:	60fb      	str	r3, [r7, #12]
	uint32_t dwTimeCurrent = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60bb      	str	r3, [r7, #8]

	do{
		dwTimeCurrent = GetMilSecTick();
 8007df0:	f7ff fae8 	bl	80073c4 <GetMilSecTick>
 8007df4:	0003      	movs	r3, r0
 8007df6:	60bb      	str	r3, [r7, #8]
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent) < ms);
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	0011      	movs	r1, r2
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f7ff ffd7 	bl	8007db2 <dwCalculatorTime>
 8007e04:	0002      	movs	r2, r0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d8f1      	bhi.n	8007df0 <delay_ms+0x14>
}
 8007e0c:	46c0      	nop			; (mov r8, r8)
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b004      	add	sp, #16
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <main>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

int main(void)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	af00      	add	r7, sp, #0
    // Initialize modules
    AppInitCommon();
 8007e1a:	f000 f80d 	bl	8007e38 <AppInitCommon>
    SetStateApp(STATE_APP_STARTUP);
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f000 f880 	bl	8007f24 <SetStateApp>
    EventSchedulerAdd(EVENT_APP_INIT);
 8007e24:	2001      	movs	r0, #1
 8007e26:	f7ff f917 	bl	8007058 <EventSchedulerAdd>

    while (1)
    {
        /* Process tasks */
        processTimerScheduler();
 8007e2a:	f7ff fad5 	bl	80073d8 <processTimerScheduler>
        processEventScheduler();
 8007e2e:	f7ff f92b 	bl	8007088 <processEventScheduler>
        LineFollow_Process();
 8007e32:	f000 f95f 	bl	80080f4 <LineFollow_Process>
        processTimerScheduler();
 8007e36:	e7f8      	b.n	8007e2a <main+0x14>

08007e38 <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af04      	add	r7, sp, #16
    // Initializes system clock 48 MHz
	SystemInit();
 8007e3e:	f7fa fee5 	bl	8002c0c <SystemInit>
    SystemCoreClockUpdate();
 8007e42:	f7fa ff29 	bl	8002c98 <SystemCoreClockUpdate>

    // Initializes system tick
    TimerInit();
 8007e46:	f7ff f9cf 	bl	80071e8 <TimerInit>

    // Initializes scheduler event
    EventSchedulerInit(AppStateManager);
 8007e4a:	4b1b      	ldr	r3, [pc, #108]	; (8007eb8 <AppInitCommon+0x80>)
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7ff f8e7 	bl	8007020 <EventSchedulerInit>

    // Initializes buttons
    EventButton_Init();
 8007e52:	f7fc fe19 	bl	8004a88 <EventButton_Init>

    // Initializes buzzer
    BuzzerControl_Init();
 8007e56:	f7fc ff33 	bl	8004cc0 <BuzzerControl_Init>

    // Initializes led
    LedControl_Init();
 8007e5a:	f7fe f991 	bl	8006180 <LedControl_Init>

    // Initializes IR sensor
    OpticalSensor_Init(ADC_READ_MODE_DMA);
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f7ff fbc6 	bl	80075f0 <OpticalSensor_Init>

    // Initializes lcd
    LCD_Init();
 8007e64:	f7fd fee8 	bl	8005c38 <LCD_Init>
    LCD_direction(1);
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7fe f885 	bl	8005f78 <LCD_direction>

    // Initializes motor
    MotorControl_Init();
 8007e6e:	f7fe fd13 	bl	8006898 <MotorControl_Init>

    // Initializes encoder
    Encoder_Init();
 8007e72:	f7fe fad9 	bl	8006428 <Encoder_Init>

    // Initializes UART peripheral
	Serial_Init();
 8007e76:	f7ff fd8b 	bl	8007990 <Serial_Init>

	BlinkLed();
 8007e7a:	f000 f8bf 	bl	8007ffc <BlinkLed>

	LCD_Init();
 8007e7e:	f7fd fedb 	bl	8005c38 <LCD_Init>
	LCD_direction(1);
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7fe f878 	bl	8005f78 <LCD_direction>

	LCD_ClearCursor(50, 210, 200, 240, WHITE);
 8007e88:	4b0c      	ldr	r3, [pc, #48]	; (8007ebc <AppInitCommon+0x84>)
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	23f0      	movs	r3, #240	; 0xf0
 8007e8e:	22c8      	movs	r2, #200	; 0xc8
 8007e90:	21d2      	movs	r1, #210	; 0xd2
 8007e92:	2032      	movs	r0, #50	; 0x32
 8007e94:	f7fd fe3a 	bl	8005b0c <LCD_ClearCursor>
	Gui_StrCenter(100, 100, BLACK, WHITE, (uint8_t*)"I Love Embedded Programming", 16, 1);
 8007e98:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <AppInitCommon+0x84>)
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9302      	str	r3, [sp, #8]
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <AppInitCommon+0x88>)
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	0013      	movs	r3, r2
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2164      	movs	r1, #100	; 0x64
 8007eac:	2064      	movs	r0, #100	; 0x64
 8007eae:	f7fd fccb 	bl	8005848 <Gui_StrCenter>
}
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	08007ecf 	.word	0x08007ecf
 8007ebc:	0000ffff 	.word	0x0000ffff
 8007ec0:	08009034 	.word	0x08009034

08007ec4 <LoadConfiguration>:
 * @param  None
 * @retval None
 */
void
LoadConfiguration(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0

}
 8007ec8:	46c0      	nop			; (mov r8, r8)
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <AppStateManager>:
 * @retval None
 */
static
void AppStateManager(
    uint8_t event)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	0002      	movs	r2, r0
 8007ed6:	1dfb      	adds	r3, r7, #7
 8007ed8:	701a      	strb	r2, [r3, #0]
    switch (GetStateApp())
 8007eda:	f000 f833 	bl	8007f44 <GetStateApp>
 8007ede:	0003      	movs	r3, r0
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d015      	beq.n	8007f10 <AppStateManager+0x42>
 8007ee4:	dc16      	bgt.n	8007f14 <AppStateManager+0x46>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <AppStateManager+0x22>
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d00a      	beq.n	8007f04 <AppStateManager+0x36>

        case STATE_APP_RESET:
            break;

        default:
            break;
 8007eee:	e011      	b.n	8007f14 <AppStateManager+0x46>
            if (event == EVENT_APP_INIT)
 8007ef0:	1dfb      	adds	r3, r7, #7
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d10f      	bne.n	8007f18 <AppStateManager+0x4a>
                LoadConfiguration();
 8007ef8:	f7ff ffe4 	bl	8007ec4 <LoadConfiguration>
                SetStateApp(STATE_APP_IDLE);
 8007efc:	2001      	movs	r0, #1
 8007efe:	f000 f811 	bl	8007f24 <SetStateApp>
            break;
 8007f02:	e009      	b.n	8007f18 <AppStateManager+0x4a>
            DeviceStateMachine(event);
 8007f04:	1dfb      	adds	r3, r7, #7
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f000 f825 	bl	8007f58 <DeviceStateMachine>
            break;
 8007f0e:	e004      	b.n	8007f1a <AppStateManager+0x4c>
            break;
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	e002      	b.n	8007f1a <AppStateManager+0x4c>
            break;
 8007f14:	46c0      	nop			; (mov r8, r8)
 8007f16:	e000      	b.n	8007f1a <AppStateManager+0x4c>
            break;
 8007f18:	46c0      	nop			; (mov r8, r8)
    }
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b002      	add	sp, #8
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <SetStateApp>:
 * @retval None
 */
static
void SetStateApp(
    state_app_t state
) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	0002      	movs	r2, r0
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
    /* Set state of application */
    eCurrentState = state;
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <SetStateApp+0x1c>)
 8007f32:	1dfa      	adds	r2, r7, #7
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	701a      	strb	r2, [r3, #0]
}
 8007f38:	46c0      	nop			; (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b002      	add	sp, #8
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000558 	.word	0x20000558

08007f44 <GetStateApp>:
 * @brief  Get state of application
 * @param  None
 * @retval State of application
 */
static
state_app_t GetStateApp(void) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
    /* Return state of application */
    return eCurrentState;
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <GetStateApp+0x10>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
}
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	20000558 	.word	0x20000558

08007f58 <DeviceStateMachine>:
 * @retval None
 */
void
DeviceStateMachine(
    uint8_t event
) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	0002      	movs	r2, r0
 8007f60:	1dfb      	adds	r3, r7, #7
 8007f62:	701a      	strb	r2, [r3, #0]
    switch (event)
 8007f64:	1dfb      	adds	r3, r7, #7
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	3b06      	subs	r3, #6
 8007f6a:	2b0a      	cmp	r3, #10
 8007f6c:	d815      	bhi.n	8007f9a <DeviceStateMachine+0x42>
 8007f6e:	009a      	lsls	r2, r3, #2
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <DeviceStateMachine+0x4c>)
 8007f72:	18d3      	adds	r3, r2, r3
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	469f      	mov	pc, r3
    {
		case EVENT_OF_BUTTON_BACK_PRESS_LOGIC:
			SamplingBlack();
 8007f78:	f7ff fc82 	bl	8007880 <SamplingBlack>
			break;
 8007f7c:	e00e      	b.n	8007f9c <DeviceStateMachine+0x44>

        case EVENT_OF_BUTTON_NEXT_PRESS_LOGIC:
        	SamplingWhite();
 8007f7e:	f7ff fc29 	bl	80077d4 <SamplingWhite>
            break;
 8007f82:	e00b      	b.n	8007f9c <DeviceStateMachine+0x44>

        case EVENT_OF_BUTTON_ENTER_PRESS_LOGIC:
        	Calculate_AdcThreshold();
 8007f84:	f7ff fcd2 	bl	800792c <Calculate_AdcThreshold>
            break;
 8007f88:	e008      	b.n	8007f9c <DeviceStateMachine+0x44>

        case EVENT_OF_BUTTON_ENTER_PRESS_2_TIMES:
        	statePID = true;
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <DeviceStateMachine+0x50>)
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
			break;
 8007f90:	e004      	b.n	8007f9c <DeviceStateMachine+0x44>

        case EVENT_OF_BUTTON_ENTER_PRESS_3_TIMES:
        	statePID = false;
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <DeviceStateMachine+0x50>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	701a      	strb	r2, [r3, #0]
			break;
 8007f98:	e000      	b.n	8007f9c <DeviceStateMachine+0x44>

        case EVENT_OF_BUTTON_NEXT_PRESS_2_TIMES:
			break;

        default:
            break;
 8007f9a:	46c0      	nop			; (mov r8, r8)
    }
}
 8007f9c:	46c0      	nop			; (mov r8, r8)
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b002      	add	sp, #8
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	0800a784 	.word	0x0800a784
 8007fa8:	20000564 	.word	0x20000564

08007fac <SetLed_Red>:
 * @brief  Set Red Led Color
 * @param  None
 * @retval None
 */
void SetLed_Red(void *arg)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	LedControl_SetColorGeneral(LED_KIT_ID, LED_COLOR_RED, 100);
 8007fb4:	2264      	movs	r2, #100	; 0x64
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f7fe f969 	bl	8006290 <LedControl_SetColorGeneral>
}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b002      	add	sp, #8
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <SetLed_Green>:
 * @brief  Set Green Led Color
 * @param  None
 * @retval None
 */
void SetLed_Green(void *arg)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
	LedControl_SetColorGeneral(LED_KIT_ID, LED_COLOR_GREEN, 100);
 8007fce:	2264      	movs	r2, #100	; 0x64
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	f7fe f95c 	bl	8006290 <LedControl_SetColorGeneral>
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <SetLed_Blue>:
 * @brief  Set Blue Led Color
 * @param  None
 * @retval None
 */
void SetLed_Blue(void *arg)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	LedControl_SetColorGeneral(LED_KIT_ID, LED_COLOR_BLUE, 100);
 8007fe8:	2264      	movs	r2, #100	; 0x64
 8007fea:	2102      	movs	r1, #2
 8007fec:	2000      	movs	r0, #0
 8007fee:	f7fe f94f 	bl	8006290 <LedControl_SetColorGeneral>
}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b002      	add	sp, #8
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <BlinkLed>:
 * @brief  Blink led R-G-B color
 * @param  None
 * @retval None
 */
void BlinkLed(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af02      	add	r7, sp, #8
	if (idTimerLedRed != NO_TIMER) {
 8008002:	4b26      	ldr	r3, [pc, #152]	; (800809c <BlinkLed+0xa0>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2bff      	cmp	r3, #255	; 0xff
 8008008:	d007      	beq.n	800801a <BlinkLed+0x1e>
		TimerStop(idTimerLedRed);
 800800a:	4b24      	ldr	r3, [pc, #144]	; (800809c <BlinkLed+0xa0>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	0018      	movs	r0, r3
 8008010:	f7ff f984 	bl	800731c <TimerStop>
		idTimerLedRed = NO_TIMER;
 8008014:	4b21      	ldr	r3, [pc, #132]	; (800809c <BlinkLed+0xa0>)
 8008016:	22ff      	movs	r2, #255	; 0xff
 8008018:	701a      	strb	r2, [r3, #0]
	}

	idTimerLedRed = TimerStart("BlinkLed_Red",
 800801a:	4b21      	ldr	r3, [pc, #132]	; (80080a0 <BlinkLed+0xa4>)
 800801c:	22fa      	movs	r2, #250	; 0xfa
 800801e:	0051      	lsls	r1, r2, #1
 8008020:	4820      	ldr	r0, [pc, #128]	; (80080a4 <BlinkLed+0xa8>)
 8008022:	2200      	movs	r2, #0
 8008024:	9200      	str	r2, [sp, #0]
 8008026:	22ff      	movs	r2, #255	; 0xff
 8008028:	f7ff f904 	bl	8007234 <TimerStart>
 800802c:	0003      	movs	r3, r0
 800802e:	001a      	movs	r2, r3
 8008030:	4b1a      	ldr	r3, [pc, #104]	; (800809c <BlinkLed+0xa0>)
 8008032:	701a      	strb	r2, [r3, #0]
							   500,
							   TIMER_REPEAT_FOREVER,
							   SetLed_Red,
							   NULL);

	if (idTimerLedGreen != NO_TIMER) {
 8008034:	4b1c      	ldr	r3, [pc, #112]	; (80080a8 <BlinkLed+0xac>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2bff      	cmp	r3, #255	; 0xff
 800803a:	d007      	beq.n	800804c <BlinkLed+0x50>
		TimerStop(idTimerLedGreen);
 800803c:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <BlinkLed+0xac>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	0018      	movs	r0, r3
 8008042:	f7ff f96b 	bl	800731c <TimerStop>
		idTimerLedGreen = NO_TIMER;
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <BlinkLed+0xac>)
 8008048:	22ff      	movs	r2, #255	; 0xff
 800804a:	701a      	strb	r2, [r3, #0]
	}

	idTimerLedGreen = TimerStart("idTimerLedGreen",
 800804c:	4b17      	ldr	r3, [pc, #92]	; (80080ac <BlinkLed+0xb0>)
 800804e:	22fa      	movs	r2, #250	; 0xfa
 8008050:	0091      	lsls	r1, r2, #2
 8008052:	4817      	ldr	r0, [pc, #92]	; (80080b0 <BlinkLed+0xb4>)
 8008054:	2200      	movs	r2, #0
 8008056:	9200      	str	r2, [sp, #0]
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	f7ff f8eb 	bl	8007234 <TimerStart>
 800805e:	0003      	movs	r3, r0
 8008060:	001a      	movs	r2, r3
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <BlinkLed+0xac>)
 8008064:	701a      	strb	r2, [r3, #0]
							     1000,
							     TIMER_REPEAT_FOREVER,
								 SetLed_Green,
							     NULL);

	if (idTimerLedBlue != NO_TIMER) {
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <BlinkLed+0xb8>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2bff      	cmp	r3, #255	; 0xff
 800806c:	d007      	beq.n	800807e <BlinkLed+0x82>
		TimerStop(idTimerLedBlue);
 800806e:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <BlinkLed+0xb8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	0018      	movs	r0, r3
 8008074:	f7ff f952 	bl	800731c <TimerStop>
		idTimerLedBlue = NO_TIMER;
 8008078:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <BlinkLed+0xb8>)
 800807a:	22ff      	movs	r2, #255	; 0xff
 800807c:	701a      	strb	r2, [r3, #0]
	}

	idTimerLedBlue = TimerStart("idTimerLedBLue",
 800807e:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <BlinkLed+0xbc>)
 8008080:	490e      	ldr	r1, [pc, #56]	; (80080bc <BlinkLed+0xc0>)
 8008082:	480f      	ldr	r0, [pc, #60]	; (80080c0 <BlinkLed+0xc4>)
 8008084:	2200      	movs	r2, #0
 8008086:	9200      	str	r2, [sp, #0]
 8008088:	22ff      	movs	r2, #255	; 0xff
 800808a:	f7ff f8d3 	bl	8007234 <TimerStart>
 800808e:	0003      	movs	r3, r0
 8008090:	001a      	movs	r2, r3
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <BlinkLed+0xb8>)
 8008094:	701a      	strb	r2, [r3, #0]
								1500,
								TIMER_REPEAT_FOREVER,
								SetLed_Blue,
								NULL);
}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000054 	.word	0x20000054
 80080a0:	08007fad 	.word	0x08007fad
 80080a4:	08009050 	.word	0x08009050
 80080a8:	20000055 	.word	0x20000055
 80080ac:	08007fc7 	.word	0x08007fc7
 80080b0:	08009060 	.word	0x08009060
 80080b4:	20000056 	.word	0x20000056
 80080b8:	08007fe1 	.word	0x08007fe1
 80080bc:	000005dc 	.word	0x000005dc
 80080c0:	08009070 	.word	0x08009070

080080c4 <CalculatorTime>:
 *@brief	Calculator time button
 *@param	None
 *@retval	None
 */
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	uint32_t dwTimeTotal;

	if(dwTimeCurrent >= dwTimeInit){
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d304      	bcc.n	80080e0 <CalculatorTime+0x1c>
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	e004      	b.n	80080ea <CalculatorTime+0x26>
	}
	else{
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
	}

	return dwTimeTotal;
 80080ea:	68fb      	ldr	r3, [r7, #12]
}
 80080ec:	0018      	movs	r0, r3
 80080ee:	46bd      	mov	sp, r7
 80080f0:	b004      	add	sp, #16
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <LineFollow_Process>:

static
void LineFollow_Process(void)
{
 80080f4:	b5b0      	push	{r4, r5, r7, lr}
 80080f6:	af00      	add	r7, sp, #0
	if (CalculatorTime(TimeStart, GetMilSecTick()) > 10) {
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <LineFollow_Process+0x38>)
 80080fa:	681c      	ldr	r4, [r3, #0]
 80080fc:	f7ff f962 	bl	80073c4 <GetMilSecTick>
 8008100:	0003      	movs	r3, r0
 8008102:	0019      	movs	r1, r3
 8008104:	0020      	movs	r0, r4
 8008106:	f7ff ffdd 	bl	80080c4 <CalculatorTime>
 800810a:	0003      	movs	r3, r0
 800810c:	2b0a      	cmp	r3, #10
 800810e:	d90a      	bls.n	8008126 <LineFollow_Process+0x32>
		if(statePID == true) {
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <LineFollow_Process+0x3c>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <LineFollow_Process+0x28>
			MotorControl_PID();
 8008118:	f7fe ff5a 	bl	8006fd0 <MotorControl_PID>
		}

		TimeStart = GetMilSecTick();
 800811c:	f7ff f952 	bl	80073c4 <GetMilSecTick>
 8008120:	0002      	movs	r2, r0
 8008122:	4b02      	ldr	r3, [pc, #8]	; (800812c <LineFollow_Process+0x38>)
 8008124:	601a      	str	r2, [r3, #0]
	}
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	bdb0      	pop	{r4, r5, r7, pc}
 800812c:	20000568 	.word	0x20000568
 8008130:	20000564 	.word	0x20000564

08008134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008134:	480d      	ldr	r0, [pc, #52]	; (800816c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008136:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008138:	f7fa fd68 	bl	8002c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800813c:	480c      	ldr	r0, [pc, #48]	; (8008170 <LoopForever+0x6>)
  ldr r1, =_edata
 800813e:	490d      	ldr	r1, [pc, #52]	; (8008174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008140:	4a0d      	ldr	r2, [pc, #52]	; (8008178 <LoopForever+0xe>)
  movs r3, #0
 8008142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008144:	e002      	b.n	800814c <LoopCopyDataInit>

08008146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800814a:	3304      	adds	r3, #4

0800814c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800814c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800814e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008150:	d3f9      	bcc.n	8008146 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008152:	4a0a      	ldr	r2, [pc, #40]	; (800817c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008154:	4c0a      	ldr	r4, [pc, #40]	; (8008180 <LoopForever+0x16>)
  movs r3, #0
 8008156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008158:	e001      	b.n	800815e <LoopFillZerobss>

0800815a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800815a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800815c:	3204      	adds	r2, #4

0800815e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800815e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008160:	d3fb      	bcc.n	800815a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008162:	f000 f81f 	bl	80081a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008166:	f7ff fe56 	bl	8007e16 <main>

0800816a <LoopForever>:

LoopForever:
  b LoopForever
 800816a:	e7fe      	b.n	800816a <LoopForever>
  ldr   r0, =_estack
 800816c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8008170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008174:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8008178:	0800a7e8 	.word	0x0800a7e8
  ldr r2, =_sbss
 800817c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8008180:	200006a4 	.word	0x200006a4

08008184 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008184:	e7fe      	b.n	8008184 <ADC_IRQHandler>

08008186 <memset>:
 8008186:	0003      	movs	r3, r0
 8008188:	1882      	adds	r2, r0, r2
 800818a:	4293      	cmp	r3, r2
 800818c:	d100      	bne.n	8008190 <memset+0xa>
 800818e:	4770      	bx	lr
 8008190:	7019      	strb	r1, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	e7f9      	b.n	800818a <memset+0x4>
	...

08008198 <__errno>:
 8008198:	4b01      	ldr	r3, [pc, #4]	; (80081a0 <__errno+0x8>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	4770      	bx	lr
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	200000a4 	.word	0x200000a4

080081a4 <__libc_init_array>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	2600      	movs	r6, #0
 80081a8:	4c0c      	ldr	r4, [pc, #48]	; (80081dc <__libc_init_array+0x38>)
 80081aa:	4d0d      	ldr	r5, [pc, #52]	; (80081e0 <__libc_init_array+0x3c>)
 80081ac:	1b64      	subs	r4, r4, r5
 80081ae:	10a4      	asrs	r4, r4, #2
 80081b0:	42a6      	cmp	r6, r4
 80081b2:	d109      	bne.n	80081c8 <__libc_init_array+0x24>
 80081b4:	2600      	movs	r6, #0
 80081b6:	f000 ff25 	bl	8009004 <_init>
 80081ba:	4c0a      	ldr	r4, [pc, #40]	; (80081e4 <__libc_init_array+0x40>)
 80081bc:	4d0a      	ldr	r5, [pc, #40]	; (80081e8 <__libc_init_array+0x44>)
 80081be:	1b64      	subs	r4, r4, r5
 80081c0:	10a4      	asrs	r4, r4, #2
 80081c2:	42a6      	cmp	r6, r4
 80081c4:	d105      	bne.n	80081d2 <__libc_init_array+0x2e>
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	00b3      	lsls	r3, r6, #2
 80081ca:	58eb      	ldr	r3, [r5, r3]
 80081cc:	4798      	blx	r3
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7ee      	b.n	80081b0 <__libc_init_array+0xc>
 80081d2:	00b3      	lsls	r3, r6, #2
 80081d4:	58eb      	ldr	r3, [r5, r3]
 80081d6:	4798      	blx	r3
 80081d8:	3601      	adds	r6, #1
 80081da:	e7f2      	b.n	80081c2 <__libc_init_array+0x1e>
 80081dc:	0800a7e0 	.word	0x0800a7e0
 80081e0:	0800a7e0 	.word	0x0800a7e0
 80081e4:	0800a7e4 	.word	0x0800a7e4
 80081e8:	0800a7e0 	.word	0x0800a7e0

080081ec <pow>:
 80081ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ee:	0014      	movs	r4, r2
 80081f0:	001d      	movs	r5, r3
 80081f2:	9000      	str	r0, [sp, #0]
 80081f4:	9101      	str	r1, [sp, #4]
 80081f6:	f000 f86f 	bl	80082d8 <__ieee754_pow>
 80081fa:	0022      	movs	r2, r4
 80081fc:	0006      	movs	r6, r0
 80081fe:	000f      	movs	r7, r1
 8008200:	002b      	movs	r3, r5
 8008202:	0020      	movs	r0, r4
 8008204:	0029      	movs	r1, r5
 8008206:	f7fa fbd9 	bl	80029bc <__aeabi_dcmpun>
 800820a:	2800      	cmp	r0, #0
 800820c:	d13f      	bne.n	800828e <pow+0xa2>
 800820e:	9800      	ldr	r0, [sp, #0]
 8008210:	9901      	ldr	r1, [sp, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	2300      	movs	r3, #0
 8008216:	f7f8 f905 	bl	8000424 <__aeabi_dcmpeq>
 800821a:	2800      	cmp	r0, #0
 800821c:	d019      	beq.n	8008252 <pow+0x66>
 800821e:	2200      	movs	r2, #0
 8008220:	2300      	movs	r3, #0
 8008222:	0020      	movs	r0, r4
 8008224:	0029      	movs	r1, r5
 8008226:	f7f8 f8fd 	bl	8000424 <__aeabi_dcmpeq>
 800822a:	2800      	cmp	r0, #0
 800822c:	d146      	bne.n	80082bc <pow+0xd0>
 800822e:	0020      	movs	r0, r4
 8008230:	0029      	movs	r1, r5
 8008232:	f000 f849 	bl	80082c8 <finite>
 8008236:	2800      	cmp	r0, #0
 8008238:	d029      	beq.n	800828e <pow+0xa2>
 800823a:	2200      	movs	r2, #0
 800823c:	2300      	movs	r3, #0
 800823e:	0020      	movs	r0, r4
 8008240:	0029      	movs	r1, r5
 8008242:	f7f8 f8f5 	bl	8000430 <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	d021      	beq.n	800828e <pow+0xa2>
 800824a:	f7ff ffa5 	bl	8008198 <__errno>
 800824e:	2322      	movs	r3, #34	; 0x22
 8008250:	e01c      	b.n	800828c <pow+0xa0>
 8008252:	0030      	movs	r0, r6
 8008254:	0039      	movs	r1, r7
 8008256:	f000 f837 	bl	80082c8 <finite>
 800825a:	2800      	cmp	r0, #0
 800825c:	d11b      	bne.n	8008296 <pow+0xaa>
 800825e:	9800      	ldr	r0, [sp, #0]
 8008260:	9901      	ldr	r1, [sp, #4]
 8008262:	f000 f831 	bl	80082c8 <finite>
 8008266:	2800      	cmp	r0, #0
 8008268:	d015      	beq.n	8008296 <pow+0xaa>
 800826a:	0020      	movs	r0, r4
 800826c:	0029      	movs	r1, r5
 800826e:	f000 f82b 	bl	80082c8 <finite>
 8008272:	2800      	cmp	r0, #0
 8008274:	d00f      	beq.n	8008296 <pow+0xaa>
 8008276:	0032      	movs	r2, r6
 8008278:	003b      	movs	r3, r7
 800827a:	0030      	movs	r0, r6
 800827c:	0039      	movs	r1, r7
 800827e:	f7fa fb9d 	bl	80029bc <__aeabi_dcmpun>
 8008282:	2800      	cmp	r0, #0
 8008284:	d0e1      	beq.n	800824a <pow+0x5e>
 8008286:	f7ff ff87 	bl	8008198 <__errno>
 800828a:	2321      	movs	r3, #33	; 0x21
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	0030      	movs	r0, r6
 8008290:	0039      	movs	r1, r7
 8008292:	b003      	add	sp, #12
 8008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008296:	2200      	movs	r2, #0
 8008298:	2300      	movs	r3, #0
 800829a:	0030      	movs	r0, r6
 800829c:	0039      	movs	r1, r7
 800829e:	f7f8 f8c1 	bl	8000424 <__aeabi_dcmpeq>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0f3      	beq.n	800828e <pow+0xa2>
 80082a6:	9800      	ldr	r0, [sp, #0]
 80082a8:	9901      	ldr	r1, [sp, #4]
 80082aa:	f000 f80d 	bl	80082c8 <finite>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d0ed      	beq.n	800828e <pow+0xa2>
 80082b2:	0020      	movs	r0, r4
 80082b4:	0029      	movs	r1, r5
 80082b6:	f000 f807 	bl	80082c8 <finite>
 80082ba:	e7c4      	b.n	8008246 <pow+0x5a>
 80082bc:	2600      	movs	r6, #0
 80082be:	4f01      	ldr	r7, [pc, #4]	; (80082c4 <pow+0xd8>)
 80082c0:	e7e5      	b.n	800828e <pow+0xa2>
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	3ff00000 	.word	0x3ff00000

080082c8 <finite>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <finite+0xc>)
 80082ca:	0048      	lsls	r0, r1, #1
 80082cc:	0840      	lsrs	r0, r0, #1
 80082ce:	18c0      	adds	r0, r0, r3
 80082d0:	0fc0      	lsrs	r0, r0, #31
 80082d2:	4770      	bx	lr
 80082d4:	80100000 	.word	0x80100000

080082d8 <__ieee754_pow>:
 80082d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082da:	b095      	sub	sp, #84	; 0x54
 80082dc:	9202      	str	r2, [sp, #8]
 80082de:	9303      	str	r3, [sp, #12]
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	9a03      	ldr	r2, [sp, #12]
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	9b02      	ldr	r3, [sp, #8]
 80082e8:	0056      	lsls	r6, r2, #1
 80082ea:	001a      	movs	r2, r3
 80082ec:	0876      	lsrs	r6, r6, #1
 80082ee:	0007      	movs	r7, r0
 80082f0:	000d      	movs	r5, r1
 80082f2:	4332      	orrs	r2, r6
 80082f4:	d119      	bne.n	800832a <__ieee754_pow+0x52>
 80082f6:	2180      	movs	r1, #128	; 0x80
 80082f8:	0309      	lsls	r1, r1, #12
 80082fa:	4069      	eors	r1, r5
 80082fc:	0002      	movs	r2, r0
 80082fe:	000b      	movs	r3, r1
 8008300:	1892      	adds	r2, r2, r2
 8008302:	415b      	adcs	r3, r3
 8008304:	4989      	ldr	r1, [pc, #548]	; (800852c <__ieee754_pow+0x254>)
 8008306:	428b      	cmp	r3, r1
 8008308:	d806      	bhi.n	8008318 <__ieee754_pow+0x40>
 800830a:	d001      	beq.n	8008310 <__ieee754_pow+0x38>
 800830c:	f000 fcb6 	bl	8008c7c <__ieee754_pow+0x9a4>
 8008310:	2a00      	cmp	r2, #0
 8008312:	d101      	bne.n	8008318 <__ieee754_pow+0x40>
 8008314:	f000 fcb2 	bl	8008c7c <__ieee754_pow+0x9a4>
 8008318:	9a02      	ldr	r2, [sp, #8]
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	0038      	movs	r0, r7
 800831e:	0029      	movs	r1, r5
 8008320:	f7f8 fdae 	bl	8000e80 <__aeabi_dadd>
 8008324:	9000      	str	r0, [sp, #0]
 8008326:	9101      	str	r1, [sp, #4]
 8008328:	e0ad      	b.n	8008486 <__ieee754_pow+0x1ae>
 800832a:	4a81      	ldr	r2, [pc, #516]	; (8008530 <__ieee754_pow+0x258>)
 800832c:	004c      	lsls	r4, r1, #1
 800832e:	9108      	str	r1, [sp, #32]
 8008330:	9000      	str	r0, [sp, #0]
 8008332:	0864      	lsrs	r4, r4, #1
 8008334:	4294      	cmp	r4, r2
 8008336:	dc08      	bgt.n	800834a <__ieee754_pow+0x72>
 8008338:	d101      	bne.n	800833e <__ieee754_pow+0x66>
 800833a:	2800      	cmp	r0, #0
 800833c:	d1ec      	bne.n	8008318 <__ieee754_pow+0x40>
 800833e:	4a7c      	ldr	r2, [pc, #496]	; (8008530 <__ieee754_pow+0x258>)
 8008340:	4296      	cmp	r6, r2
 8008342:	dc02      	bgt.n	800834a <__ieee754_pow+0x72>
 8008344:	d10c      	bne.n	8008360 <__ieee754_pow+0x88>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <__ieee754_pow+0x88>
 800834a:	4b7a      	ldr	r3, [pc, #488]	; (8008534 <__ieee754_pow+0x25c>)
 800834c:	18eb      	adds	r3, r5, r3
 800834e:	433b      	orrs	r3, r7
 8008350:	d1e2      	bne.n	8008318 <__ieee754_pow+0x40>
 8008352:	2180      	movs	r1, #128	; 0x80
 8008354:	9803      	ldr	r0, [sp, #12]
 8008356:	0309      	lsls	r1, r1, #12
 8008358:	4048      	eors	r0, r1
 800835a:	0003      	movs	r3, r0
 800835c:	9a02      	ldr	r2, [sp, #8]
 800835e:	e7cf      	b.n	8008300 <__ieee754_pow+0x28>
 8008360:	2200      	movs	r2, #0
 8008362:	9206      	str	r2, [sp, #24]
 8008364:	2d00      	cmp	r5, #0
 8008366:	da69      	bge.n	800843c <__ieee754_pow+0x164>
 8008368:	4a73      	ldr	r2, [pc, #460]	; (8008538 <__ieee754_pow+0x260>)
 800836a:	4296      	cmp	r6, r2
 800836c:	dc64      	bgt.n	8008438 <__ieee754_pow+0x160>
 800836e:	4a73      	ldr	r2, [pc, #460]	; (800853c <__ieee754_pow+0x264>)
 8008370:	4296      	cmp	r6, r2
 8008372:	dd11      	ble.n	8008398 <__ieee754_pow+0xc0>
 8008374:	4972      	ldr	r1, [pc, #456]	; (8008540 <__ieee754_pow+0x268>)
 8008376:	1532      	asrs	r2, r6, #20
 8008378:	1852      	adds	r2, r2, r1
 800837a:	2a14      	cmp	r2, #20
 800837c:	dd3c      	ble.n	80083f8 <__ieee754_pow+0x120>
 800837e:	2134      	movs	r1, #52	; 0x34
 8008380:	1a89      	subs	r1, r1, r2
 8008382:	9a02      	ldr	r2, [sp, #8]
 8008384:	40ca      	lsrs	r2, r1
 8008386:	0010      	movs	r0, r2
 8008388:	4088      	lsls	r0, r1
 800838a:	4298      	cmp	r0, r3
 800838c:	d104      	bne.n	8008398 <__ieee754_pow+0xc0>
 800838e:	2101      	movs	r1, #1
 8008390:	400a      	ands	r2, r1
 8008392:	1849      	adds	r1, r1, r1
 8008394:	1a8a      	subs	r2, r1, r2
 8008396:	9206      	str	r2, [sp, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d03c      	beq.n	8008416 <__ieee754_pow+0x13e>
 800839c:	0038      	movs	r0, r7
 800839e:	0029      	movs	r1, r5
 80083a0:	f000 fca4 	bl	8008cec <fabs>
 80083a4:	9000      	str	r0, [sp, #0]
 80083a6:	9101      	str	r1, [sp, #4]
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	d000      	beq.n	80083ae <__ieee754_pow+0xd6>
 80083ac:	e094      	b.n	80084d8 <__ieee754_pow+0x200>
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d005      	beq.n	80083be <__ieee754_pow+0xe6>
 80083b2:	4a64      	ldr	r2, [pc, #400]	; (8008544 <__ieee754_pow+0x26c>)
 80083b4:	00ab      	lsls	r3, r5, #2
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d000      	beq.n	80083be <__ieee754_pow+0xe6>
 80083bc:	e08c      	b.n	80084d8 <__ieee754_pow+0x200>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da07      	bge.n	80083d4 <__ieee754_pow+0xfc>
 80083c4:	9a00      	ldr	r2, [sp, #0]
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	2000      	movs	r0, #0
 80083ca:	495e      	ldr	r1, [pc, #376]	; (8008544 <__ieee754_pow+0x26c>)
 80083cc:	f7f9 f8b8 	bl	8001540 <__aeabi_ddiv>
 80083d0:	9000      	str	r0, [sp, #0]
 80083d2:	9101      	str	r1, [sp, #4]
 80083d4:	9b08      	ldr	r3, [sp, #32]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da55      	bge.n	8008486 <__ieee754_pow+0x1ae>
 80083da:	4b56      	ldr	r3, [pc, #344]	; (8008534 <__ieee754_pow+0x25c>)
 80083dc:	18e4      	adds	r4, r4, r3
 80083de:	9b06      	ldr	r3, [sp, #24]
 80083e0:	431c      	orrs	r4, r3
 80083e2:	d000      	beq.n	80083e6 <__ieee754_pow+0x10e>
 80083e4:	e06c      	b.n	80084c0 <__ieee754_pow+0x1e8>
 80083e6:	9a00      	ldr	r2, [sp, #0]
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	0010      	movs	r0, r2
 80083ec:	0019      	movs	r1, r3
 80083ee:	f7f9 ff63 	bl	80022b8 <__aeabi_dsub>
 80083f2:	0002      	movs	r2, r0
 80083f4:	000b      	movs	r3, r1
 80083f6:	e01c      	b.n	8008432 <__ieee754_pow+0x15a>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1cf      	bne.n	800839c <__ieee754_pow+0xc4>
 80083fc:	3314      	adds	r3, #20
 80083fe:	1a9a      	subs	r2, r3, r2
 8008400:	0033      	movs	r3, r6
 8008402:	4113      	asrs	r3, r2
 8008404:	0019      	movs	r1, r3
 8008406:	4091      	lsls	r1, r2
 8008408:	42b1      	cmp	r1, r6
 800840a:	d104      	bne.n	8008416 <__ieee754_pow+0x13e>
 800840c:	2201      	movs	r2, #1
 800840e:	4013      	ands	r3, r2
 8008410:	1892      	adds	r2, r2, r2
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	9306      	str	r3, [sp, #24]
 8008416:	4b4b      	ldr	r3, [pc, #300]	; (8008544 <__ieee754_pow+0x26c>)
 8008418:	429e      	cmp	r6, r3
 800841a:	d138      	bne.n	800848e <__ieee754_pow+0x1b6>
 800841c:	0038      	movs	r0, r7
 800841e:	0029      	movs	r1, r5
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	9000      	str	r0, [sp, #0]
 8008424:	9101      	str	r1, [sp, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	da2d      	bge.n	8008486 <__ieee754_pow+0x1ae>
 800842a:	003a      	movs	r2, r7
 800842c:	002b      	movs	r3, r5
 800842e:	2000      	movs	r0, #0
 8008430:	4944      	ldr	r1, [pc, #272]	; (8008544 <__ieee754_pow+0x26c>)
 8008432:	f7f9 f885 	bl	8001540 <__aeabi_ddiv>
 8008436:	e775      	b.n	8008324 <__ieee754_pow+0x4c>
 8008438:	2202      	movs	r2, #2
 800843a:	9206      	str	r2, [sp, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1ad      	bne.n	800839c <__ieee754_pow+0xc4>
 8008440:	4b3b      	ldr	r3, [pc, #236]	; (8008530 <__ieee754_pow+0x258>)
 8008442:	429e      	cmp	r6, r3
 8008444:	d1e7      	bne.n	8008416 <__ieee754_pow+0x13e>
 8008446:	4b3b      	ldr	r3, [pc, #236]	; (8008534 <__ieee754_pow+0x25c>)
 8008448:	18e3      	adds	r3, r4, r3
 800844a:	433b      	orrs	r3, r7
 800844c:	d101      	bne.n	8008452 <__ieee754_pow+0x17a>
 800844e:	f000 fc15 	bl	8008c7c <__ieee754_pow+0x9a4>
 8008452:	4b3a      	ldr	r3, [pc, #232]	; (800853c <__ieee754_pow+0x264>)
 8008454:	429c      	cmp	r4, r3
 8008456:	dd09      	ble.n	800846c <__ieee754_pow+0x194>
 8008458:	9b04      	ldr	r3, [sp, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da01      	bge.n	8008462 <__ieee754_pow+0x18a>
 800845e:	f000 fc11 	bl	8008c84 <__ieee754_pow+0x9ac>
 8008462:	9b02      	ldr	r3, [sp, #8]
 8008464:	9c03      	ldr	r4, [sp, #12]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	9401      	str	r4, [sp, #4]
 800846a:	e00c      	b.n	8008486 <__ieee754_pow+0x1ae>
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	db01      	blt.n	8008476 <__ieee754_pow+0x19e>
 8008472:	f000 fc07 	bl	8008c84 <__ieee754_pow+0x9ac>
 8008476:	2280      	movs	r2, #128	; 0x80
 8008478:	0612      	lsls	r2, r2, #24
 800847a:	4694      	mov	ip, r2
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	4463      	add	r3, ip
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	9800      	ldr	r0, [sp, #0]
 8008488:	9901      	ldr	r1, [sp, #4]
 800848a:	b015      	add	sp, #84	; 0x54
 800848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800848e:	2380      	movs	r3, #128	; 0x80
 8008490:	9a04      	ldr	r2, [sp, #16]
 8008492:	05db      	lsls	r3, r3, #23
 8008494:	429a      	cmp	r2, r3
 8008496:	d106      	bne.n	80084a6 <__ieee754_pow+0x1ce>
 8008498:	003a      	movs	r2, r7
 800849a:	002b      	movs	r3, r5
 800849c:	0038      	movs	r0, r7
 800849e:	0029      	movs	r1, r5
 80084a0:	f7f9 fc48 	bl	8001d34 <__aeabi_dmul>
 80084a4:	e73e      	b.n	8008324 <__ieee754_pow+0x4c>
 80084a6:	4b28      	ldr	r3, [pc, #160]	; (8008548 <__ieee754_pow+0x270>)
 80084a8:	9a04      	ldr	r2, [sp, #16]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d000      	beq.n	80084b0 <__ieee754_pow+0x1d8>
 80084ae:	e775      	b.n	800839c <__ieee754_pow+0xc4>
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	da00      	bge.n	80084b6 <__ieee754_pow+0x1de>
 80084b4:	e772      	b.n	800839c <__ieee754_pow+0xc4>
 80084b6:	0038      	movs	r0, r7
 80084b8:	0029      	movs	r1, r5
 80084ba:	f000 fcb7 	bl	8008e2c <__ieee754_sqrt>
 80084be:	e731      	b.n	8008324 <__ieee754_pow+0x4c>
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d1df      	bne.n	8008486 <__ieee754_pow+0x1ae>
 80084c6:	9800      	ldr	r0, [sp, #0]
 80084c8:	2180      	movs	r1, #128	; 0x80
 80084ca:	0002      	movs	r2, r0
 80084cc:	9801      	ldr	r0, [sp, #4]
 80084ce:	0609      	lsls	r1, r1, #24
 80084d0:	1843      	adds	r3, r0, r1
 80084d2:	9200      	str	r2, [sp, #0]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	e7d6      	b.n	8008486 <__ieee754_pow+0x1ae>
 80084d8:	0feb      	lsrs	r3, r5, #31
 80084da:	3b01      	subs	r3, #1
 80084dc:	930e      	str	r3, [sp, #56]	; 0x38
 80084de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e0:	9b06      	ldr	r3, [sp, #24]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	d104      	bne.n	80084f0 <__ieee754_pow+0x218>
 80084e6:	003a      	movs	r2, r7
 80084e8:	002b      	movs	r3, r5
 80084ea:	0038      	movs	r0, r7
 80084ec:	0029      	movs	r1, r5
 80084ee:	e77e      	b.n	80083ee <__ieee754_pow+0x116>
 80084f0:	4b16      	ldr	r3, [pc, #88]	; (800854c <__ieee754_pow+0x274>)
 80084f2:	429e      	cmp	r6, r3
 80084f4:	dc00      	bgt.n	80084f8 <__ieee754_pow+0x220>
 80084f6:	e0f1      	b.n	80086dc <__ieee754_pow+0x404>
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <__ieee754_pow+0x278>)
 80084fa:	429e      	cmp	r6, r3
 80084fc:	dd09      	ble.n	8008512 <__ieee754_pow+0x23a>
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <__ieee754_pow+0x264>)
 8008500:	429c      	cmp	r4, r3
 8008502:	dc0c      	bgt.n	800851e <__ieee754_pow+0x246>
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	da0c      	bge.n	8008524 <__ieee754_pow+0x24c>
 800850a:	2000      	movs	r0, #0
 800850c:	f000 fc86 	bl	8008e1c <__math_oflow>
 8008510:	e708      	b.n	8008324 <__ieee754_pow+0x4c>
 8008512:	4b10      	ldr	r3, [pc, #64]	; (8008554 <__ieee754_pow+0x27c>)
 8008514:	429c      	cmp	r4, r3
 8008516:	ddf5      	ble.n	8008504 <__ieee754_pow+0x22c>
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <__ieee754_pow+0x26c>)
 800851a:	429c      	cmp	r4, r3
 800851c:	dd1c      	ble.n	8008558 <__ieee754_pow+0x280>
 800851e:	9b04      	ldr	r3, [sp, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	dcf2      	bgt.n	800850a <__ieee754_pow+0x232>
 8008524:	2000      	movs	r0, #0
 8008526:	f000 fc72 	bl	8008e0e <__math_uflow>
 800852a:	e6fb      	b.n	8008324 <__ieee754_pow+0x4c>
 800852c:	fff00000 	.word	0xfff00000
 8008530:	7ff00000 	.word	0x7ff00000
 8008534:	c0100000 	.word	0xc0100000
 8008538:	433fffff 	.word	0x433fffff
 800853c:	3fefffff 	.word	0x3fefffff
 8008540:	fffffc01 	.word	0xfffffc01
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	41e00000 	.word	0x41e00000
 8008550:	43f00000 	.word	0x43f00000
 8008554:	3feffffe 	.word	0x3feffffe
 8008558:	2200      	movs	r2, #0
 800855a:	9800      	ldr	r0, [sp, #0]
 800855c:	9901      	ldr	r1, [sp, #4]
 800855e:	4b53      	ldr	r3, [pc, #332]	; (80086ac <__ieee754_pow+0x3d4>)
 8008560:	f7f9 feaa 	bl	80022b8 <__aeabi_dsub>
 8008564:	22c0      	movs	r2, #192	; 0xc0
 8008566:	4b52      	ldr	r3, [pc, #328]	; (80086b0 <__ieee754_pow+0x3d8>)
 8008568:	05d2      	lsls	r2, r2, #23
 800856a:	0004      	movs	r4, r0
 800856c:	000d      	movs	r5, r1
 800856e:	f7f9 fbe1 	bl	8001d34 <__aeabi_dmul>
 8008572:	4a50      	ldr	r2, [pc, #320]	; (80086b4 <__ieee754_pow+0x3dc>)
 8008574:	0006      	movs	r6, r0
 8008576:	000f      	movs	r7, r1
 8008578:	0020      	movs	r0, r4
 800857a:	0029      	movs	r1, r5
 800857c:	4b4e      	ldr	r3, [pc, #312]	; (80086b8 <__ieee754_pow+0x3e0>)
 800857e:	f7f9 fbd9 	bl	8001d34 <__aeabi_dmul>
 8008582:	2200      	movs	r2, #0
 8008584:	9000      	str	r0, [sp, #0]
 8008586:	9101      	str	r1, [sp, #4]
 8008588:	4b4c      	ldr	r3, [pc, #304]	; (80086bc <__ieee754_pow+0x3e4>)
 800858a:	0020      	movs	r0, r4
 800858c:	0029      	movs	r1, r5
 800858e:	f7f9 fbd1 	bl	8001d34 <__aeabi_dmul>
 8008592:	0002      	movs	r2, r0
 8008594:	000b      	movs	r3, r1
 8008596:	484a      	ldr	r0, [pc, #296]	; (80086c0 <__ieee754_pow+0x3e8>)
 8008598:	494a      	ldr	r1, [pc, #296]	; (80086c4 <__ieee754_pow+0x3ec>)
 800859a:	f7f9 fe8d 	bl	80022b8 <__aeabi_dsub>
 800859e:	0022      	movs	r2, r4
 80085a0:	002b      	movs	r3, r5
 80085a2:	f7f9 fbc7 	bl	8001d34 <__aeabi_dmul>
 80085a6:	0002      	movs	r2, r0
 80085a8:	000b      	movs	r3, r1
 80085aa:	2000      	movs	r0, #0
 80085ac:	4946      	ldr	r1, [pc, #280]	; (80086c8 <__ieee754_pow+0x3f0>)
 80085ae:	f7f9 fe83 	bl	80022b8 <__aeabi_dsub>
 80085b2:	0022      	movs	r2, r4
 80085b4:	002b      	movs	r3, r5
 80085b6:	9004      	str	r0, [sp, #16]
 80085b8:	9105      	str	r1, [sp, #20]
 80085ba:	0020      	movs	r0, r4
 80085bc:	0029      	movs	r1, r5
 80085be:	f7f9 fbb9 	bl	8001d34 <__aeabi_dmul>
 80085c2:	0002      	movs	r2, r0
 80085c4:	000b      	movs	r3, r1
 80085c6:	9804      	ldr	r0, [sp, #16]
 80085c8:	9905      	ldr	r1, [sp, #20]
 80085ca:	f7f9 fbb3 	bl	8001d34 <__aeabi_dmul>
 80085ce:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <__ieee754_pow+0x3f4>)
 80085d0:	4b37      	ldr	r3, [pc, #220]	; (80086b0 <__ieee754_pow+0x3d8>)
 80085d2:	f7f9 fbaf 	bl	8001d34 <__aeabi_dmul>
 80085d6:	0002      	movs	r2, r0
 80085d8:	000b      	movs	r3, r1
 80085da:	9800      	ldr	r0, [sp, #0]
 80085dc:	9901      	ldr	r1, [sp, #4]
 80085de:	f7f9 fe6b 	bl	80022b8 <__aeabi_dsub>
 80085e2:	0002      	movs	r2, r0
 80085e4:	000b      	movs	r3, r1
 80085e6:	0004      	movs	r4, r0
 80085e8:	000d      	movs	r5, r1
 80085ea:	0030      	movs	r0, r6
 80085ec:	0039      	movs	r1, r7
 80085ee:	f7f8 fc47 	bl	8000e80 <__aeabi_dadd>
 80085f2:	2000      	movs	r0, #0
 80085f4:	0032      	movs	r2, r6
 80085f6:	003b      	movs	r3, r7
 80085f8:	9004      	str	r0, [sp, #16]
 80085fa:	9105      	str	r1, [sp, #20]
 80085fc:	f7f9 fe5c 	bl	80022b8 <__aeabi_dsub>
 8008600:	0002      	movs	r2, r0
 8008602:	000b      	movs	r3, r1
 8008604:	0020      	movs	r0, r4
 8008606:	0029      	movs	r1, r5
 8008608:	f7f9 fe56 	bl	80022b8 <__aeabi_dsub>
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008610:	3b01      	subs	r3, #1
 8008612:	0006      	movs	r6, r0
 8008614:	000f      	movs	r7, r1
 8008616:	4313      	orrs	r3, r2
 8008618:	d000      	beq.n	800861c <__ieee754_pow+0x344>
 800861a:	e1dc      	b.n	80089d6 <__ieee754_pow+0x6fe>
 800861c:	2300      	movs	r3, #0
 800861e:	4c2c      	ldr	r4, [pc, #176]	; (80086d0 <__ieee754_pow+0x3f8>)
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	9401      	str	r4, [sp, #4]
 8008624:	9c02      	ldr	r4, [sp, #8]
 8008626:	9d03      	ldr	r5, [sp, #12]
 8008628:	9802      	ldr	r0, [sp, #8]
 800862a:	9903      	ldr	r1, [sp, #12]
 800862c:	2400      	movs	r4, #0
 800862e:	002b      	movs	r3, r5
 8008630:	0022      	movs	r2, r4
 8008632:	f7f9 fe41 	bl	80022b8 <__aeabi_dsub>
 8008636:	9a04      	ldr	r2, [sp, #16]
 8008638:	9b05      	ldr	r3, [sp, #20]
 800863a:	f7f9 fb7b 	bl	8001d34 <__aeabi_dmul>
 800863e:	9a02      	ldr	r2, [sp, #8]
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	9006      	str	r0, [sp, #24]
 8008644:	9107      	str	r1, [sp, #28]
 8008646:	0030      	movs	r0, r6
 8008648:	0039      	movs	r1, r7
 800864a:	f7f9 fb73 	bl	8001d34 <__aeabi_dmul>
 800864e:	0002      	movs	r2, r0
 8008650:	000b      	movs	r3, r1
 8008652:	9806      	ldr	r0, [sp, #24]
 8008654:	9907      	ldr	r1, [sp, #28]
 8008656:	f7f8 fc13 	bl	8000e80 <__aeabi_dadd>
 800865a:	0022      	movs	r2, r4
 800865c:	002b      	movs	r3, r5
 800865e:	0006      	movs	r6, r0
 8008660:	000f      	movs	r7, r1
 8008662:	9804      	ldr	r0, [sp, #16]
 8008664:	9905      	ldr	r1, [sp, #20]
 8008666:	f7f9 fb65 	bl	8001d34 <__aeabi_dmul>
 800866a:	0003      	movs	r3, r0
 800866c:	000c      	movs	r4, r1
 800866e:	9004      	str	r0, [sp, #16]
 8008670:	9105      	str	r1, [sp, #20]
 8008672:	9306      	str	r3, [sp, #24]
 8008674:	9407      	str	r4, [sp, #28]
 8008676:	0002      	movs	r2, r0
 8008678:	000b      	movs	r3, r1
 800867a:	0030      	movs	r0, r6
 800867c:	0039      	movs	r1, r7
 800867e:	f7f8 fbff 	bl	8000e80 <__aeabi_dadd>
 8008682:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <__ieee754_pow+0x3fc>)
 8008684:	0005      	movs	r5, r0
 8008686:	000c      	movs	r4, r1
 8008688:	9108      	str	r1, [sp, #32]
 800868a:	4299      	cmp	r1, r3
 800868c:	dc00      	bgt.n	8008690 <__ieee754_pow+0x3b8>
 800868e:	e2d4      	b.n	8008c3a <__ieee754_pow+0x962>
 8008690:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <__ieee754_pow+0x400>)
 8008692:	18cb      	adds	r3, r1, r3
 8008694:	4303      	orrs	r3, r0
 8008696:	d100      	bne.n	800869a <__ieee754_pow+0x3c2>
 8008698:	e1d6      	b.n	8008a48 <__ieee754_pow+0x770>
 800869a:	9800      	ldr	r0, [sp, #0]
 800869c:	9901      	ldr	r1, [sp, #4]
 800869e:	2300      	movs	r3, #0
 80086a0:	2200      	movs	r2, #0
 80086a2:	f7f7 fec5 	bl	8000430 <__aeabi_dcmplt>
 80086a6:	1e43      	subs	r3, r0, #1
 80086a8:	4198      	sbcs	r0, r3
 80086aa:	e72f      	b.n	800850c <__ieee754_pow+0x234>
 80086ac:	3ff00000 	.word	0x3ff00000
 80086b0:	3ff71547 	.word	0x3ff71547
 80086b4:	f85ddf44 	.word	0xf85ddf44
 80086b8:	3e54ae0b 	.word	0x3e54ae0b
 80086bc:	3fd00000 	.word	0x3fd00000
 80086c0:	55555555 	.word	0x55555555
 80086c4:	3fd55555 	.word	0x3fd55555
 80086c8:	3fe00000 	.word	0x3fe00000
 80086cc:	652b82fe 	.word	0x652b82fe
 80086d0:	bff00000 	.word	0xbff00000
 80086d4:	408fffff 	.word	0x408fffff
 80086d8:	bf700000 	.word	0xbf700000
 80086dc:	4bbf      	ldr	r3, [pc, #764]	; (80089dc <__ieee754_pow+0x704>)
 80086de:	2200      	movs	r2, #0
 80086e0:	422b      	tst	r3, r5
 80086e2:	d10a      	bne.n	80086fa <__ieee754_pow+0x422>
 80086e4:	9800      	ldr	r0, [sp, #0]
 80086e6:	9901      	ldr	r1, [sp, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	4bbd      	ldr	r3, [pc, #756]	; (80089e0 <__ieee754_pow+0x708>)
 80086ec:	f7f9 fb22 	bl	8001d34 <__aeabi_dmul>
 80086f0:	2235      	movs	r2, #53	; 0x35
 80086f2:	9000      	str	r0, [sp, #0]
 80086f4:	9101      	str	r1, [sp, #4]
 80086f6:	9c01      	ldr	r4, [sp, #4]
 80086f8:	4252      	negs	r2, r2
 80086fa:	49ba      	ldr	r1, [pc, #744]	; (80089e4 <__ieee754_pow+0x70c>)
 80086fc:	1523      	asrs	r3, r4, #20
 80086fe:	185b      	adds	r3, r3, r1
 8008700:	189b      	adds	r3, r3, r2
 8008702:	0324      	lsls	r4, r4, #12
 8008704:	4db8      	ldr	r5, [pc, #736]	; (80089e8 <__ieee754_pow+0x710>)
 8008706:	930d      	str	r3, [sp, #52]	; 0x34
 8008708:	4bb8      	ldr	r3, [pc, #736]	; (80089ec <__ieee754_pow+0x714>)
 800870a:	0b22      	lsrs	r2, r4, #12
 800870c:	4315      	orrs	r5, r2
 800870e:	2400      	movs	r4, #0
 8008710:	429a      	cmp	r2, r3
 8008712:	dd09      	ble.n	8008728 <__ieee754_pow+0x450>
 8008714:	4bb6      	ldr	r3, [pc, #728]	; (80089f0 <__ieee754_pow+0x718>)
 8008716:	3401      	adds	r4, #1
 8008718:	429a      	cmp	r2, r3
 800871a:	dd05      	ble.n	8008728 <__ieee754_pow+0x450>
 800871c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871e:	191b      	adds	r3, r3, r4
 8008720:	2400      	movs	r4, #0
 8008722:	930d      	str	r3, [sp, #52]	; 0x34
 8008724:	4bb3      	ldr	r3, [pc, #716]	; (80089f4 <__ieee754_pow+0x71c>)
 8008726:	18ed      	adds	r5, r5, r3
 8008728:	4bb3      	ldr	r3, [pc, #716]	; (80089f8 <__ieee754_pow+0x720>)
 800872a:	00e2      	lsls	r2, r4, #3
 800872c:	189b      	adds	r3, r3, r2
 800872e:	9800      	ldr	r0, [sp, #0]
 8008730:	9901      	ldr	r1, [sp, #4]
 8008732:	920f      	str	r2, [sp, #60]	; 0x3c
 8008734:	0029      	movs	r1, r5
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	0006      	movs	r6, r0
 800873c:	920a      	str	r2, [sp, #40]	; 0x28
 800873e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008740:	f7f9 fdba 	bl	80022b8 <__aeabi_dsub>
 8008744:	0032      	movs	r2, r6
 8008746:	002b      	movs	r3, r5
 8008748:	9010      	str	r0, [sp, #64]	; 0x40
 800874a:	9111      	str	r1, [sp, #68]	; 0x44
 800874c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800874e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008750:	f7f8 fb96 	bl	8000e80 <__aeabi_dadd>
 8008754:	0002      	movs	r2, r0
 8008756:	000b      	movs	r3, r1
 8008758:	2000      	movs	r0, #0
 800875a:	49a3      	ldr	r1, [pc, #652]	; (80089e8 <__ieee754_pow+0x710>)
 800875c:	f7f8 fef0 	bl	8001540 <__aeabi_ddiv>
 8008760:	0002      	movs	r2, r0
 8008762:	000b      	movs	r3, r1
 8008764:	9012      	str	r0, [sp, #72]	; 0x48
 8008766:	9113      	str	r1, [sp, #76]	; 0x4c
 8008768:	9810      	ldr	r0, [sp, #64]	; 0x40
 800876a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800876c:	f7f9 fae2 	bl	8001d34 <__aeabi_dmul>
 8008770:	9008      	str	r0, [sp, #32]
 8008772:	9109      	str	r1, [sp, #36]	; 0x24
 8008774:	9a08      	ldr	r2, [sp, #32]
 8008776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008778:	9204      	str	r2, [sp, #16]
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	2300      	movs	r3, #0
 800877e:	2180      	movs	r1, #128	; 0x80
 8008780:	2080      	movs	r0, #128	; 0x80
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	9a04      	ldr	r2, [sp, #16]
 8008786:	9b05      	ldr	r3, [sp, #20]
 8008788:	9200      	str	r2, [sp, #0]
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	002f      	movs	r7, r5
 8008790:	0589      	lsls	r1, r1, #22
 8008792:	106d      	asrs	r5, r5, #1
 8008794:	4329      	orrs	r1, r5
 8008796:	0300      	lsls	r0, r0, #12
 8008798:	1809      	adds	r1, r1, r0
 800879a:	04a0      	lsls	r0, r4, #18
 800879c:	180b      	adds	r3, r1, r0
 800879e:	9800      	ldr	r0, [sp, #0]
 80087a0:	9901      	ldr	r1, [sp, #4]
 80087a2:	0014      	movs	r4, r2
 80087a4:	001d      	movs	r5, r3
 80087a6:	f7f9 fac5 	bl	8001d34 <__aeabi_dmul>
 80087aa:	0002      	movs	r2, r0
 80087ac:	000b      	movs	r3, r1
 80087ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80087b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087b2:	f7f9 fd81 	bl	80022b8 <__aeabi_dsub>
 80087b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ba:	9010      	str	r0, [sp, #64]	; 0x40
 80087bc:	9111      	str	r1, [sp, #68]	; 0x44
 80087be:	0020      	movs	r0, r4
 80087c0:	0029      	movs	r1, r5
 80087c2:	f7f9 fd79 	bl	80022b8 <__aeabi_dsub>
 80087c6:	0002      	movs	r2, r0
 80087c8:	000b      	movs	r3, r1
 80087ca:	0030      	movs	r0, r6
 80087cc:	0039      	movs	r1, r7
 80087ce:	f7f9 fd73 	bl	80022b8 <__aeabi_dsub>
 80087d2:	9a00      	ldr	r2, [sp, #0]
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	f7f9 faad 	bl	8001d34 <__aeabi_dmul>
 80087da:	0002      	movs	r2, r0
 80087dc:	000b      	movs	r3, r1
 80087de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80087e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087e2:	f7f9 fd69 	bl	80022b8 <__aeabi_dsub>
 80087e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ea:	f7f9 faa3 	bl	8001d34 <__aeabi_dmul>
 80087ee:	9a08      	ldr	r2, [sp, #32]
 80087f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f2:	900a      	str	r0, [sp, #40]	; 0x28
 80087f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80087f6:	0010      	movs	r0, r2
 80087f8:	0019      	movs	r1, r3
 80087fa:	f7f9 fa9b 	bl	8001d34 <__aeabi_dmul>
 80087fe:	0006      	movs	r6, r0
 8008800:	000f      	movs	r7, r1
 8008802:	4a7e      	ldr	r2, [pc, #504]	; (80089fc <__ieee754_pow+0x724>)
 8008804:	4b7e      	ldr	r3, [pc, #504]	; (8008a00 <__ieee754_pow+0x728>)
 8008806:	f7f9 fa95 	bl	8001d34 <__aeabi_dmul>
 800880a:	4a7e      	ldr	r2, [pc, #504]	; (8008a04 <__ieee754_pow+0x72c>)
 800880c:	4b7e      	ldr	r3, [pc, #504]	; (8008a08 <__ieee754_pow+0x730>)
 800880e:	f7f8 fb37 	bl	8000e80 <__aeabi_dadd>
 8008812:	0032      	movs	r2, r6
 8008814:	003b      	movs	r3, r7
 8008816:	f7f9 fa8d 	bl	8001d34 <__aeabi_dmul>
 800881a:	4a7c      	ldr	r2, [pc, #496]	; (8008a0c <__ieee754_pow+0x734>)
 800881c:	4b7c      	ldr	r3, [pc, #496]	; (8008a10 <__ieee754_pow+0x738>)
 800881e:	f7f8 fb2f 	bl	8000e80 <__aeabi_dadd>
 8008822:	0032      	movs	r2, r6
 8008824:	003b      	movs	r3, r7
 8008826:	f7f9 fa85 	bl	8001d34 <__aeabi_dmul>
 800882a:	4a7a      	ldr	r2, [pc, #488]	; (8008a14 <__ieee754_pow+0x73c>)
 800882c:	4b7a      	ldr	r3, [pc, #488]	; (8008a18 <__ieee754_pow+0x740>)
 800882e:	f7f8 fb27 	bl	8000e80 <__aeabi_dadd>
 8008832:	0032      	movs	r2, r6
 8008834:	003b      	movs	r3, r7
 8008836:	f7f9 fa7d 	bl	8001d34 <__aeabi_dmul>
 800883a:	4a78      	ldr	r2, [pc, #480]	; (8008a1c <__ieee754_pow+0x744>)
 800883c:	4b78      	ldr	r3, [pc, #480]	; (8008a20 <__ieee754_pow+0x748>)
 800883e:	f7f8 fb1f 	bl	8000e80 <__aeabi_dadd>
 8008842:	0032      	movs	r2, r6
 8008844:	003b      	movs	r3, r7
 8008846:	f7f9 fa75 	bl	8001d34 <__aeabi_dmul>
 800884a:	4a76      	ldr	r2, [pc, #472]	; (8008a24 <__ieee754_pow+0x74c>)
 800884c:	4b76      	ldr	r3, [pc, #472]	; (8008a28 <__ieee754_pow+0x750>)
 800884e:	f7f8 fb17 	bl	8000e80 <__aeabi_dadd>
 8008852:	0032      	movs	r2, r6
 8008854:	0004      	movs	r4, r0
 8008856:	000d      	movs	r5, r1
 8008858:	003b      	movs	r3, r7
 800885a:	0030      	movs	r0, r6
 800885c:	0039      	movs	r1, r7
 800885e:	f7f9 fa69 	bl	8001d34 <__aeabi_dmul>
 8008862:	0002      	movs	r2, r0
 8008864:	000b      	movs	r3, r1
 8008866:	0020      	movs	r0, r4
 8008868:	0029      	movs	r1, r5
 800886a:	f7f9 fa63 	bl	8001d34 <__aeabi_dmul>
 800886e:	9a00      	ldr	r2, [sp, #0]
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	0004      	movs	r4, r0
 8008874:	000d      	movs	r5, r1
 8008876:	9808      	ldr	r0, [sp, #32]
 8008878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887a:	f7f8 fb01 	bl	8000e80 <__aeabi_dadd>
 800887e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008882:	f7f9 fa57 	bl	8001d34 <__aeabi_dmul>
 8008886:	0022      	movs	r2, r4
 8008888:	002b      	movs	r3, r5
 800888a:	f7f8 faf9 	bl	8000e80 <__aeabi_dadd>
 800888e:	9a00      	ldr	r2, [sp, #0]
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	9010      	str	r0, [sp, #64]	; 0x40
 8008894:	9111      	str	r1, [sp, #68]	; 0x44
 8008896:	0010      	movs	r0, r2
 8008898:	0019      	movs	r1, r3
 800889a:	f7f9 fa4b 	bl	8001d34 <__aeabi_dmul>
 800889e:	2200      	movs	r2, #0
 80088a0:	4b62      	ldr	r3, [pc, #392]	; (8008a2c <__ieee754_pow+0x754>)
 80088a2:	0004      	movs	r4, r0
 80088a4:	000d      	movs	r5, r1
 80088a6:	f7f8 faeb 	bl	8000e80 <__aeabi_dadd>
 80088aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ae:	f7f8 fae7 	bl	8000e80 <__aeabi_dadd>
 80088b2:	2000      	movs	r0, #0
 80088b4:	000f      	movs	r7, r1
 80088b6:	0006      	movs	r6, r0
 80088b8:	0002      	movs	r2, r0
 80088ba:	000b      	movs	r3, r1
 80088bc:	9800      	ldr	r0, [sp, #0]
 80088be:	9901      	ldr	r1, [sp, #4]
 80088c0:	f7f9 fa38 	bl	8001d34 <__aeabi_dmul>
 80088c4:	2200      	movs	r2, #0
 80088c6:	9000      	str	r0, [sp, #0]
 80088c8:	9101      	str	r1, [sp, #4]
 80088ca:	4b58      	ldr	r3, [pc, #352]	; (8008a2c <__ieee754_pow+0x754>)
 80088cc:	0030      	movs	r0, r6
 80088ce:	0039      	movs	r1, r7
 80088d0:	f7f9 fcf2 	bl	80022b8 <__aeabi_dsub>
 80088d4:	0022      	movs	r2, r4
 80088d6:	002b      	movs	r3, r5
 80088d8:	f7f9 fcee 	bl	80022b8 <__aeabi_dsub>
 80088dc:	0002      	movs	r2, r0
 80088de:	000b      	movs	r3, r1
 80088e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088e4:	f7f9 fce8 	bl	80022b8 <__aeabi_dsub>
 80088e8:	9a08      	ldr	r2, [sp, #32]
 80088ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ec:	f7f9 fa22 	bl	8001d34 <__aeabi_dmul>
 80088f0:	0032      	movs	r2, r6
 80088f2:	0004      	movs	r4, r0
 80088f4:	000d      	movs	r5, r1
 80088f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088fa:	003b      	movs	r3, r7
 80088fc:	f7f9 fa1a 	bl	8001d34 <__aeabi_dmul>
 8008900:	0002      	movs	r2, r0
 8008902:	000b      	movs	r3, r1
 8008904:	0020      	movs	r0, r4
 8008906:	0029      	movs	r1, r5
 8008908:	f7f8 faba 	bl	8000e80 <__aeabi_dadd>
 800890c:	0004      	movs	r4, r0
 800890e:	000d      	movs	r5, r1
 8008910:	0002      	movs	r2, r0
 8008912:	000b      	movs	r3, r1
 8008914:	9800      	ldr	r0, [sp, #0]
 8008916:	9901      	ldr	r1, [sp, #4]
 8008918:	f7f8 fab2 	bl	8000e80 <__aeabi_dadd>
 800891c:	22e0      	movs	r2, #224	; 0xe0
 800891e:	2000      	movs	r0, #0
 8008920:	4b43      	ldr	r3, [pc, #268]	; (8008a30 <__ieee754_pow+0x758>)
 8008922:	0612      	lsls	r2, r2, #24
 8008924:	0006      	movs	r6, r0
 8008926:	000f      	movs	r7, r1
 8008928:	f7f9 fa04 	bl	8001d34 <__aeabi_dmul>
 800892c:	9008      	str	r0, [sp, #32]
 800892e:	9109      	str	r1, [sp, #36]	; 0x24
 8008930:	9a00      	ldr	r2, [sp, #0]
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	0030      	movs	r0, r6
 8008936:	0039      	movs	r1, r7
 8008938:	f7f9 fcbe 	bl	80022b8 <__aeabi_dsub>
 800893c:	0002      	movs	r2, r0
 800893e:	000b      	movs	r3, r1
 8008940:	0020      	movs	r0, r4
 8008942:	0029      	movs	r1, r5
 8008944:	f7f9 fcb8 	bl	80022b8 <__aeabi_dsub>
 8008948:	4a3a      	ldr	r2, [pc, #232]	; (8008a34 <__ieee754_pow+0x75c>)
 800894a:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <__ieee754_pow+0x758>)
 800894c:	f7f9 f9f2 	bl	8001d34 <__aeabi_dmul>
 8008950:	4a39      	ldr	r2, [pc, #228]	; (8008a38 <__ieee754_pow+0x760>)
 8008952:	0004      	movs	r4, r0
 8008954:	000d      	movs	r5, r1
 8008956:	0030      	movs	r0, r6
 8008958:	0039      	movs	r1, r7
 800895a:	4b38      	ldr	r3, [pc, #224]	; (8008a3c <__ieee754_pow+0x764>)
 800895c:	f7f9 f9ea 	bl	8001d34 <__aeabi_dmul>
 8008960:	0002      	movs	r2, r0
 8008962:	000b      	movs	r3, r1
 8008964:	0020      	movs	r0, r4
 8008966:	0029      	movs	r1, r5
 8008968:	f7f8 fa8a 	bl	8000e80 <__aeabi_dadd>
 800896c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800896e:	4b34      	ldr	r3, [pc, #208]	; (8008a40 <__ieee754_pow+0x768>)
 8008970:	189b      	adds	r3, r3, r2
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f7f8 fa83 	bl	8000e80 <__aeabi_dadd>
 800897a:	9000      	str	r0, [sp, #0]
 800897c:	9101      	str	r1, [sp, #4]
 800897e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008980:	f7fa f870 	bl	8002a64 <__aeabi_i2d>
 8008984:	0004      	movs	r4, r0
 8008986:	000d      	movs	r5, r1
 8008988:	9808      	ldr	r0, [sp, #32]
 800898a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800898e:	4b2d      	ldr	r3, [pc, #180]	; (8008a44 <__ieee754_pow+0x76c>)
 8008990:	189b      	adds	r3, r3, r2
 8008992:	681e      	ldr	r6, [r3, #0]
 8008994:	685f      	ldr	r7, [r3, #4]
 8008996:	9a00      	ldr	r2, [sp, #0]
 8008998:	9b01      	ldr	r3, [sp, #4]
 800899a:	f7f8 fa71 	bl	8000e80 <__aeabi_dadd>
 800899e:	0032      	movs	r2, r6
 80089a0:	003b      	movs	r3, r7
 80089a2:	f7f8 fa6d 	bl	8000e80 <__aeabi_dadd>
 80089a6:	0022      	movs	r2, r4
 80089a8:	002b      	movs	r3, r5
 80089aa:	f7f8 fa69 	bl	8000e80 <__aeabi_dadd>
 80089ae:	2000      	movs	r0, #0
 80089b0:	0022      	movs	r2, r4
 80089b2:	002b      	movs	r3, r5
 80089b4:	9004      	str	r0, [sp, #16]
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	f7f9 fc7e 	bl	80022b8 <__aeabi_dsub>
 80089bc:	0032      	movs	r2, r6
 80089be:	003b      	movs	r3, r7
 80089c0:	f7f9 fc7a 	bl	80022b8 <__aeabi_dsub>
 80089c4:	9a08      	ldr	r2, [sp, #32]
 80089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c8:	f7f9 fc76 	bl	80022b8 <__aeabi_dsub>
 80089cc:	0002      	movs	r2, r0
 80089ce:	000b      	movs	r3, r1
 80089d0:	9800      	ldr	r0, [sp, #0]
 80089d2:	9901      	ldr	r1, [sp, #4]
 80089d4:	e618      	b.n	8008608 <__ieee754_pow+0x330>
 80089d6:	2300      	movs	r3, #0
 80089d8:	4c03      	ldr	r4, [pc, #12]	; (80089e8 <__ieee754_pow+0x710>)
 80089da:	e621      	b.n	8008620 <__ieee754_pow+0x348>
 80089dc:	7ff00000 	.word	0x7ff00000
 80089e0:	43400000 	.word	0x43400000
 80089e4:	fffffc01 	.word	0xfffffc01
 80089e8:	3ff00000 	.word	0x3ff00000
 80089ec:	0003988e 	.word	0x0003988e
 80089f0:	000bb679 	.word	0x000bb679
 80089f4:	fff00000 	.word	0xfff00000
 80089f8:	0800a7b0 	.word	0x0800a7b0
 80089fc:	4a454eef 	.word	0x4a454eef
 8008a00:	3fca7e28 	.word	0x3fca7e28
 8008a04:	93c9db65 	.word	0x93c9db65
 8008a08:	3fcd864a 	.word	0x3fcd864a
 8008a0c:	a91d4101 	.word	0xa91d4101
 8008a10:	3fd17460 	.word	0x3fd17460
 8008a14:	518f264d 	.word	0x518f264d
 8008a18:	3fd55555 	.word	0x3fd55555
 8008a1c:	db6fabff 	.word	0xdb6fabff
 8008a20:	3fdb6db6 	.word	0x3fdb6db6
 8008a24:	33333303 	.word	0x33333303
 8008a28:	3fe33333 	.word	0x3fe33333
 8008a2c:	40080000 	.word	0x40080000
 8008a30:	3feec709 	.word	0x3feec709
 8008a34:	dc3a03fd 	.word	0xdc3a03fd
 8008a38:	145b01f5 	.word	0x145b01f5
 8008a3c:	be3e2fe0 	.word	0xbe3e2fe0
 8008a40:	0800a7d0 	.word	0x0800a7d0
 8008a44:	0800a7c0 	.word	0x0800a7c0
 8008a48:	4a90      	ldr	r2, [pc, #576]	; (8008c8c <__ieee754_pow+0x9b4>)
 8008a4a:	4b91      	ldr	r3, [pc, #580]	; (8008c90 <__ieee754_pow+0x9b8>)
 8008a4c:	0030      	movs	r0, r6
 8008a4e:	0039      	movs	r1, r7
 8008a50:	f7f8 fa16 	bl	8000e80 <__aeabi_dadd>
 8008a54:	9a04      	ldr	r2, [sp, #16]
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	9002      	str	r0, [sp, #8]
 8008a5a:	9103      	str	r1, [sp, #12]
 8008a5c:	0028      	movs	r0, r5
 8008a5e:	0021      	movs	r1, r4
 8008a60:	f7f9 fc2a 	bl	80022b8 <__aeabi_dsub>
 8008a64:	0002      	movs	r2, r0
 8008a66:	000b      	movs	r3, r1
 8008a68:	9802      	ldr	r0, [sp, #8]
 8008a6a:	9903      	ldr	r1, [sp, #12]
 8008a6c:	f7f7 fcf4 	bl	8000458 <__aeabi_dcmpgt>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d000      	beq.n	8008a76 <__ieee754_pow+0x79e>
 8008a74:	e611      	b.n	800869a <__ieee754_pow+0x3c2>
 8008a76:	2100      	movs	r1, #0
 8008a78:	4a86      	ldr	r2, [pc, #536]	; (8008c94 <__ieee754_pow+0x9bc>)
 8008a7a:	0063      	lsls	r3, r4, #1
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	9102      	str	r1, [sp, #8]
 8008a80:	4293      	cmp	r3, r2
 8008a82:	dd25      	ble.n	8008ad0 <__ieee754_pow+0x7f8>
 8008a84:	4a84      	ldr	r2, [pc, #528]	; (8008c98 <__ieee754_pow+0x9c0>)
 8008a86:	151b      	asrs	r3, r3, #20
 8008a88:	189b      	adds	r3, r3, r2
 8008a8a:	2280      	movs	r2, #128	; 0x80
 8008a8c:	0352      	lsls	r2, r2, #13
 8008a8e:	0011      	movs	r1, r2
 8008a90:	4119      	asrs	r1, r3
 8008a92:	190b      	adds	r3, r1, r4
 8008a94:	005c      	lsls	r4, r3, #1
 8008a96:	4981      	ldr	r1, [pc, #516]	; (8008c9c <__ieee754_pow+0x9c4>)
 8008a98:	4d81      	ldr	r5, [pc, #516]	; (8008ca0 <__ieee754_pow+0x9c8>)
 8008a9a:	0d64      	lsrs	r4, r4, #21
 8008a9c:	1864      	adds	r4, r4, r1
 8008a9e:	4125      	asrs	r5, r4
 8008aa0:	401d      	ands	r5, r3
 8008aa2:	031b      	lsls	r3, r3, #12
 8008aa4:	0b1b      	lsrs	r3, r3, #12
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	2214      	movs	r2, #20
 8008aaa:	1b12      	subs	r2, r2, r4
 8008aac:	4113      	asrs	r3, r2
 8008aae:	9302      	str	r3, [sp, #8]
 8008ab0:	9b08      	ldr	r3, [sp, #32]
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	0029      	movs	r1, r5
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da02      	bge.n	8008ac0 <__ieee754_pow+0x7e8>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	425b      	negs	r3, r3
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	000b      	movs	r3, r1
 8008ac4:	9804      	ldr	r0, [sp, #16]
 8008ac6:	9905      	ldr	r1, [sp, #20]
 8008ac8:	f7f9 fbf6 	bl	80022b8 <__aeabi_dsub>
 8008acc:	9006      	str	r0, [sp, #24]
 8008ace:	9107      	str	r1, [sp, #28]
 8008ad0:	9806      	ldr	r0, [sp, #24]
 8008ad2:	9907      	ldr	r1, [sp, #28]
 8008ad4:	0032      	movs	r2, r6
 8008ad6:	003b      	movs	r3, r7
 8008ad8:	f7f8 f9d2 	bl	8000e80 <__aeabi_dadd>
 8008adc:	2000      	movs	r0, #0
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4b70      	ldr	r3, [pc, #448]	; (8008ca4 <__ieee754_pow+0x9cc>)
 8008ae2:	9004      	str	r0, [sp, #16]
 8008ae4:	9105      	str	r1, [sp, #20]
 8008ae6:	f7f9 f925 	bl	8001d34 <__aeabi_dmul>
 8008aea:	9a06      	ldr	r2, [sp, #24]
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	9008      	str	r0, [sp, #32]
 8008af0:	9109      	str	r1, [sp, #36]	; 0x24
 8008af2:	9804      	ldr	r0, [sp, #16]
 8008af4:	9905      	ldr	r1, [sp, #20]
 8008af6:	f7f9 fbdf 	bl	80022b8 <__aeabi_dsub>
 8008afa:	0002      	movs	r2, r0
 8008afc:	000b      	movs	r3, r1
 8008afe:	0030      	movs	r0, r6
 8008b00:	0039      	movs	r1, r7
 8008b02:	f7f9 fbd9 	bl	80022b8 <__aeabi_dsub>
 8008b06:	4a68      	ldr	r2, [pc, #416]	; (8008ca8 <__ieee754_pow+0x9d0>)
 8008b08:	4b68      	ldr	r3, [pc, #416]	; (8008cac <__ieee754_pow+0x9d4>)
 8008b0a:	f7f9 f913 	bl	8001d34 <__aeabi_dmul>
 8008b0e:	4a68      	ldr	r2, [pc, #416]	; (8008cb0 <__ieee754_pow+0x9d8>)
 8008b10:	0004      	movs	r4, r0
 8008b12:	000d      	movs	r5, r1
 8008b14:	9804      	ldr	r0, [sp, #16]
 8008b16:	9905      	ldr	r1, [sp, #20]
 8008b18:	4b66      	ldr	r3, [pc, #408]	; (8008cb4 <__ieee754_pow+0x9dc>)
 8008b1a:	f7f9 f90b 	bl	8001d34 <__aeabi_dmul>
 8008b1e:	0002      	movs	r2, r0
 8008b20:	000b      	movs	r3, r1
 8008b22:	0020      	movs	r0, r4
 8008b24:	0029      	movs	r1, r5
 8008b26:	f7f8 f9ab 	bl	8000e80 <__aeabi_dadd>
 8008b2a:	0004      	movs	r4, r0
 8008b2c:	000d      	movs	r5, r1
 8008b2e:	0002      	movs	r2, r0
 8008b30:	000b      	movs	r3, r1
 8008b32:	9808      	ldr	r0, [sp, #32]
 8008b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b36:	f7f8 f9a3 	bl	8000e80 <__aeabi_dadd>
 8008b3a:	9a08      	ldr	r2, [sp, #32]
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	0006      	movs	r6, r0
 8008b40:	000f      	movs	r7, r1
 8008b42:	f7f9 fbb9 	bl	80022b8 <__aeabi_dsub>
 8008b46:	0002      	movs	r2, r0
 8008b48:	000b      	movs	r3, r1
 8008b4a:	0020      	movs	r0, r4
 8008b4c:	0029      	movs	r1, r5
 8008b4e:	f7f9 fbb3 	bl	80022b8 <__aeabi_dsub>
 8008b52:	0032      	movs	r2, r6
 8008b54:	9004      	str	r0, [sp, #16]
 8008b56:	9105      	str	r1, [sp, #20]
 8008b58:	003b      	movs	r3, r7
 8008b5a:	0030      	movs	r0, r6
 8008b5c:	0039      	movs	r1, r7
 8008b5e:	f7f9 f8e9 	bl	8001d34 <__aeabi_dmul>
 8008b62:	0004      	movs	r4, r0
 8008b64:	000d      	movs	r5, r1
 8008b66:	4a54      	ldr	r2, [pc, #336]	; (8008cb8 <__ieee754_pow+0x9e0>)
 8008b68:	4b54      	ldr	r3, [pc, #336]	; (8008cbc <__ieee754_pow+0x9e4>)
 8008b6a:	f7f9 f8e3 	bl	8001d34 <__aeabi_dmul>
 8008b6e:	4a54      	ldr	r2, [pc, #336]	; (8008cc0 <__ieee754_pow+0x9e8>)
 8008b70:	4b54      	ldr	r3, [pc, #336]	; (8008cc4 <__ieee754_pow+0x9ec>)
 8008b72:	f7f9 fba1 	bl	80022b8 <__aeabi_dsub>
 8008b76:	0022      	movs	r2, r4
 8008b78:	002b      	movs	r3, r5
 8008b7a:	f7f9 f8db 	bl	8001d34 <__aeabi_dmul>
 8008b7e:	4a52      	ldr	r2, [pc, #328]	; (8008cc8 <__ieee754_pow+0x9f0>)
 8008b80:	4b52      	ldr	r3, [pc, #328]	; (8008ccc <__ieee754_pow+0x9f4>)
 8008b82:	f7f8 f97d 	bl	8000e80 <__aeabi_dadd>
 8008b86:	0022      	movs	r2, r4
 8008b88:	002b      	movs	r3, r5
 8008b8a:	f7f9 f8d3 	bl	8001d34 <__aeabi_dmul>
 8008b8e:	4a50      	ldr	r2, [pc, #320]	; (8008cd0 <__ieee754_pow+0x9f8>)
 8008b90:	4b50      	ldr	r3, [pc, #320]	; (8008cd4 <__ieee754_pow+0x9fc>)
 8008b92:	f7f9 fb91 	bl	80022b8 <__aeabi_dsub>
 8008b96:	0022      	movs	r2, r4
 8008b98:	002b      	movs	r3, r5
 8008b9a:	f7f9 f8cb 	bl	8001d34 <__aeabi_dmul>
 8008b9e:	4a4e      	ldr	r2, [pc, #312]	; (8008cd8 <__ieee754_pow+0xa00>)
 8008ba0:	4b4e      	ldr	r3, [pc, #312]	; (8008cdc <__ieee754_pow+0xa04>)
 8008ba2:	f7f8 f96d 	bl	8000e80 <__aeabi_dadd>
 8008ba6:	0022      	movs	r2, r4
 8008ba8:	002b      	movs	r3, r5
 8008baa:	f7f9 f8c3 	bl	8001d34 <__aeabi_dmul>
 8008bae:	0002      	movs	r2, r0
 8008bb0:	000b      	movs	r3, r1
 8008bb2:	0030      	movs	r0, r6
 8008bb4:	0039      	movs	r1, r7
 8008bb6:	f7f9 fb7f 	bl	80022b8 <__aeabi_dsub>
 8008bba:	0004      	movs	r4, r0
 8008bbc:	000d      	movs	r5, r1
 8008bbe:	0002      	movs	r2, r0
 8008bc0:	000b      	movs	r3, r1
 8008bc2:	0030      	movs	r0, r6
 8008bc4:	0039      	movs	r1, r7
 8008bc6:	f7f9 f8b5 	bl	8001d34 <__aeabi_dmul>
 8008bca:	2380      	movs	r3, #128	; 0x80
 8008bcc:	9006      	str	r0, [sp, #24]
 8008bce:	9107      	str	r1, [sp, #28]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	0020      	movs	r0, r4
 8008bd4:	0029      	movs	r1, r5
 8008bd6:	05db      	lsls	r3, r3, #23
 8008bd8:	f7f9 fb6e 	bl	80022b8 <__aeabi_dsub>
 8008bdc:	0002      	movs	r2, r0
 8008bde:	000b      	movs	r3, r1
 8008be0:	9806      	ldr	r0, [sp, #24]
 8008be2:	9907      	ldr	r1, [sp, #28]
 8008be4:	f7f8 fcac 	bl	8001540 <__aeabi_ddiv>
 8008be8:	9a04      	ldr	r2, [sp, #16]
 8008bea:	9b05      	ldr	r3, [sp, #20]
 8008bec:	0004      	movs	r4, r0
 8008bee:	000d      	movs	r5, r1
 8008bf0:	0030      	movs	r0, r6
 8008bf2:	0039      	movs	r1, r7
 8008bf4:	f7f9 f89e 	bl	8001d34 <__aeabi_dmul>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	f7f8 f940 	bl	8000e80 <__aeabi_dadd>
 8008c00:	0002      	movs	r2, r0
 8008c02:	000b      	movs	r3, r1
 8008c04:	0020      	movs	r0, r4
 8008c06:	0029      	movs	r1, r5
 8008c08:	f7f9 fb56 	bl	80022b8 <__aeabi_dsub>
 8008c0c:	0032      	movs	r2, r6
 8008c0e:	003b      	movs	r3, r7
 8008c10:	f7f9 fb52 	bl	80022b8 <__aeabi_dsub>
 8008c14:	0002      	movs	r2, r0
 8008c16:	000b      	movs	r3, r1
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4931      	ldr	r1, [pc, #196]	; (8008ce0 <__ieee754_pow+0xa08>)
 8008c1c:	f7f9 fb4c 	bl	80022b8 <__aeabi_dsub>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	051b      	lsls	r3, r3, #20
 8008c24:	185b      	adds	r3, r3, r1
 8008c26:	151a      	asrs	r2, r3, #20
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	dc25      	bgt.n	8008c78 <__ieee754_pow+0x9a0>
 8008c2c:	9a02      	ldr	r2, [sp, #8]
 8008c2e:	f000 f861 	bl	8008cf4 <scalbn>
 8008c32:	9a00      	ldr	r2, [sp, #0]
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	f7ff fc33 	bl	80084a0 <__ieee754_pow+0x1c8>
 8008c3a:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <__ieee754_pow+0xa0c>)
 8008c3c:	004b      	lsls	r3, r1, #1
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	4293      	cmp	r3, r2
 8008c42:	dc00      	bgt.n	8008c46 <__ieee754_pow+0x96e>
 8008c44:	e717      	b.n	8008a76 <__ieee754_pow+0x79e>
 8008c46:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <__ieee754_pow+0xa10>)
 8008c48:	18cb      	adds	r3, r1, r3
 8008c4a:	4303      	orrs	r3, r0
 8008c4c:	d008      	beq.n	8008c60 <__ieee754_pow+0x988>
 8008c4e:	9800      	ldr	r0, [sp, #0]
 8008c50:	9901      	ldr	r1, [sp, #4]
 8008c52:	2300      	movs	r3, #0
 8008c54:	2200      	movs	r2, #0
 8008c56:	f7f7 fbeb 	bl	8000430 <__aeabi_dcmplt>
 8008c5a:	1e43      	subs	r3, r0, #1
 8008c5c:	4198      	sbcs	r0, r3
 8008c5e:	e462      	b.n	8008526 <__ieee754_pow+0x24e>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	9b05      	ldr	r3, [sp, #20]
 8008c64:	f7f9 fb28 	bl	80022b8 <__aeabi_dsub>
 8008c68:	0032      	movs	r2, r6
 8008c6a:	003b      	movs	r3, r7
 8008c6c:	f7f7 fbfe 	bl	800046c <__aeabi_dcmpge>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d100      	bne.n	8008c76 <__ieee754_pow+0x99e>
 8008c74:	e6ff      	b.n	8008a76 <__ieee754_pow+0x79e>
 8008c76:	e7ea      	b.n	8008c4e <__ieee754_pow+0x976>
 8008c78:	0019      	movs	r1, r3
 8008c7a:	e7da      	b.n	8008c32 <__ieee754_pow+0x95a>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4c18      	ldr	r4, [pc, #96]	; (8008ce0 <__ieee754_pow+0xa08>)
 8008c80:	f7ff fbf1 	bl	8008466 <__ieee754_pow+0x18e>
 8008c84:	2300      	movs	r3, #0
 8008c86:	2400      	movs	r4, #0
 8008c88:	f7ff fbed 	bl	8008466 <__ieee754_pow+0x18e>
 8008c8c:	652b82fe 	.word	0x652b82fe
 8008c90:	3c971547 	.word	0x3c971547
 8008c94:	3fe00000 	.word	0x3fe00000
 8008c98:	fffffc02 	.word	0xfffffc02
 8008c9c:	fffffc01 	.word	0xfffffc01
 8008ca0:	fff00000 	.word	0xfff00000
 8008ca4:	3fe62e43 	.word	0x3fe62e43
 8008ca8:	fefa39ef 	.word	0xfefa39ef
 8008cac:	3fe62e42 	.word	0x3fe62e42
 8008cb0:	0ca86c39 	.word	0x0ca86c39
 8008cb4:	be205c61 	.word	0xbe205c61
 8008cb8:	72bea4d0 	.word	0x72bea4d0
 8008cbc:	3e663769 	.word	0x3e663769
 8008cc0:	c5d26bf1 	.word	0xc5d26bf1
 8008cc4:	3ebbbd41 	.word	0x3ebbbd41
 8008cc8:	af25de2c 	.word	0xaf25de2c
 8008ccc:	3f11566a 	.word	0x3f11566a
 8008cd0:	16bebd93 	.word	0x16bebd93
 8008cd4:	3f66c16c 	.word	0x3f66c16c
 8008cd8:	5555553e 	.word	0x5555553e
 8008cdc:	3fc55555 	.word	0x3fc55555
 8008ce0:	3ff00000 	.word	0x3ff00000
 8008ce4:	4090cbff 	.word	0x4090cbff
 8008ce8:	3f6f3400 	.word	0x3f6f3400

08008cec <fabs>:
 8008cec:	0049      	lsls	r1, r1, #1
 8008cee:	084b      	lsrs	r3, r1, #1
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	4770      	bx	lr

08008cf4 <scalbn>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	0014      	movs	r4, r2
 8008cf8:	004a      	lsls	r2, r1, #1
 8008cfa:	000b      	movs	r3, r1
 8008cfc:	0d52      	lsrs	r2, r2, #21
 8008cfe:	d10f      	bne.n	8008d20 <scalbn+0x2c>
 8008d00:	004b      	lsls	r3, r1, #1
 8008d02:	085b      	lsrs	r3, r3, #1
 8008d04:	4303      	orrs	r3, r0
 8008d06:	d011      	beq.n	8008d2c <scalbn+0x38>
 8008d08:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <scalbn+0xa0>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7f9 f812 	bl	8001d34 <__aeabi_dmul>
 8008d10:	4b21      	ldr	r3, [pc, #132]	; (8008d98 <scalbn+0xa4>)
 8008d12:	429c      	cmp	r4, r3
 8008d14:	da0b      	bge.n	8008d2e <scalbn+0x3a>
 8008d16:	4a21      	ldr	r2, [pc, #132]	; (8008d9c <scalbn+0xa8>)
 8008d18:	4b21      	ldr	r3, [pc, #132]	; (8008da0 <scalbn+0xac>)
 8008d1a:	f7f9 f80b 	bl	8001d34 <__aeabi_dmul>
 8008d1e:	e005      	b.n	8008d2c <scalbn+0x38>
 8008d20:	4d20      	ldr	r5, [pc, #128]	; (8008da4 <scalbn+0xb0>)
 8008d22:	42aa      	cmp	r2, r5
 8008d24:	d107      	bne.n	8008d36 <scalbn+0x42>
 8008d26:	0002      	movs	r2, r0
 8008d28:	f7f8 f8aa 	bl	8000e80 <__aeabi_dadd>
 8008d2c:	bd70      	pop	{r4, r5, r6, pc}
 8008d2e:	000b      	movs	r3, r1
 8008d30:	004a      	lsls	r2, r1, #1
 8008d32:	0d52      	lsrs	r2, r2, #21
 8008d34:	3a36      	subs	r2, #54	; 0x36
 8008d36:	4d1c      	ldr	r5, [pc, #112]	; (8008da8 <scalbn+0xb4>)
 8008d38:	42ac      	cmp	r4, r5
 8008d3a:	dd0a      	ble.n	8008d52 <scalbn+0x5e>
 8008d3c:	4c1b      	ldr	r4, [pc, #108]	; (8008dac <scalbn+0xb8>)
 8008d3e:	4d1c      	ldr	r5, [pc, #112]	; (8008db0 <scalbn+0xbc>)
 8008d40:	2900      	cmp	r1, #0
 8008d42:	da01      	bge.n	8008d48 <scalbn+0x54>
 8008d44:	4c19      	ldr	r4, [pc, #100]	; (8008dac <scalbn+0xb8>)
 8008d46:	4d1b      	ldr	r5, [pc, #108]	; (8008db4 <scalbn+0xc0>)
 8008d48:	4a18      	ldr	r2, [pc, #96]	; (8008dac <scalbn+0xb8>)
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <scalbn+0xbc>)
 8008d4c:	0020      	movs	r0, r4
 8008d4e:	0029      	movs	r1, r5
 8008d50:	e7e3      	b.n	8008d1a <scalbn+0x26>
 8008d52:	18a2      	adds	r2, r4, r2
 8008d54:	4c18      	ldr	r4, [pc, #96]	; (8008db8 <scalbn+0xc4>)
 8008d56:	42a2      	cmp	r2, r4
 8008d58:	dcf0      	bgt.n	8008d3c <scalbn+0x48>
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	dd05      	ble.n	8008d6a <scalbn+0x76>
 8008d5e:	4c17      	ldr	r4, [pc, #92]	; (8008dbc <scalbn+0xc8>)
 8008d60:	0512      	lsls	r2, r2, #20
 8008d62:	4023      	ands	r3, r4
 8008d64:	4313      	orrs	r3, r2
 8008d66:	0019      	movs	r1, r3
 8008d68:	e7e0      	b.n	8008d2c <scalbn+0x38>
 8008d6a:	0014      	movs	r4, r2
 8008d6c:	3435      	adds	r4, #53	; 0x35
 8008d6e:	da08      	bge.n	8008d82 <scalbn+0x8e>
 8008d70:	4c0a      	ldr	r4, [pc, #40]	; (8008d9c <scalbn+0xa8>)
 8008d72:	4d0b      	ldr	r5, [pc, #44]	; (8008da0 <scalbn+0xac>)
 8008d74:	2900      	cmp	r1, #0
 8008d76:	da01      	bge.n	8008d7c <scalbn+0x88>
 8008d78:	4c08      	ldr	r4, [pc, #32]	; (8008d9c <scalbn+0xa8>)
 8008d7a:	4d11      	ldr	r5, [pc, #68]	; (8008dc0 <scalbn+0xcc>)
 8008d7c:	4a07      	ldr	r2, [pc, #28]	; (8008d9c <scalbn+0xa8>)
 8008d7e:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <scalbn+0xac>)
 8008d80:	e7e4      	b.n	8008d4c <scalbn+0x58>
 8008d82:	4c0e      	ldr	r4, [pc, #56]	; (8008dbc <scalbn+0xc8>)
 8008d84:	3236      	adds	r2, #54	; 0x36
 8008d86:	4023      	ands	r3, r4
 8008d88:	0512      	lsls	r2, r2, #20
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	0011      	movs	r1, r2
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <scalbn+0xd0>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	e7c2      	b.n	8008d1a <scalbn+0x26>
 8008d94:	43500000 	.word	0x43500000
 8008d98:	ffff3cb0 	.word	0xffff3cb0
 8008d9c:	c2f8f359 	.word	0xc2f8f359
 8008da0:	01a56e1f 	.word	0x01a56e1f
 8008da4:	000007ff 	.word	0x000007ff
 8008da8:	0000c350 	.word	0x0000c350
 8008dac:	8800759c 	.word	0x8800759c
 8008db0:	7e37e43c 	.word	0x7e37e43c
 8008db4:	fe37e43c 	.word	0xfe37e43c
 8008db8:	000007fe 	.word	0x000007fe
 8008dbc:	800fffff 	.word	0x800fffff
 8008dc0:	81a56e1f 	.word	0x81a56e1f
 8008dc4:	3c900000 	.word	0x3c900000

08008dc8 <with_errno>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	000d      	movs	r5, r1
 8008dcc:	0016      	movs	r6, r2
 8008dce:	0004      	movs	r4, r0
 8008dd0:	f7ff f9e2 	bl	8008198 <__errno>
 8008dd4:	0029      	movs	r1, r5
 8008dd6:	6006      	str	r6, [r0, #0]
 8008dd8:	0020      	movs	r0, r4
 8008dda:	bd70      	pop	{r4, r5, r6, pc}

08008ddc <xflow>:
 8008ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dde:	0015      	movs	r5, r2
 8008de0:	001c      	movs	r4, r3
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d010      	beq.n	8008e08 <xflow+0x2c>
 8008de6:	2380      	movs	r3, #128	; 0x80
 8008de8:	0010      	movs	r0, r2
 8008dea:	061b      	lsls	r3, r3, #24
 8008dec:	18e1      	adds	r1, r4, r3
 8008dee:	9000      	str	r0, [sp, #0]
 8008df0:	9101      	str	r1, [sp, #4]
 8008df2:	9a00      	ldr	r2, [sp, #0]
 8008df4:	9b01      	ldr	r3, [sp, #4]
 8008df6:	0028      	movs	r0, r5
 8008df8:	0021      	movs	r1, r4
 8008dfa:	f7f8 ff9b 	bl	8001d34 <__aeabi_dmul>
 8008dfe:	2222      	movs	r2, #34	; 0x22
 8008e00:	f7ff ffe2 	bl	8008dc8 <with_errno>
 8008e04:	b003      	add	sp, #12
 8008e06:	bd30      	pop	{r4, r5, pc}
 8008e08:	0010      	movs	r0, r2
 8008e0a:	0019      	movs	r1, r3
 8008e0c:	e7ef      	b.n	8008dee <xflow+0x12>

08008e0e <__math_uflow>:
 8008e0e:	2380      	movs	r3, #128	; 0x80
 8008e10:	b510      	push	{r4, lr}
 8008e12:	2200      	movs	r2, #0
 8008e14:	055b      	lsls	r3, r3, #21
 8008e16:	f7ff ffe1 	bl	8008ddc <xflow>
 8008e1a:	bd10      	pop	{r4, pc}

08008e1c <__math_oflow>:
 8008e1c:	23e0      	movs	r3, #224	; 0xe0
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	2200      	movs	r2, #0
 8008e22:	05db      	lsls	r3, r3, #23
 8008e24:	f7ff ffda 	bl	8008ddc <xflow>
 8008e28:	bd10      	pop	{r4, pc}
	...

08008e2c <__ieee754_sqrt>:
 8008e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e2e:	000a      	movs	r2, r1
 8008e30:	000c      	movs	r4, r1
 8008e32:	496f      	ldr	r1, [pc, #444]	; (8008ff0 <__ieee754_sqrt+0x1c4>)
 8008e34:	0005      	movs	r5, r0
 8008e36:	0003      	movs	r3, r0
 8008e38:	0008      	movs	r0, r1
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	4020      	ands	r0, r4
 8008e3e:	4288      	cmp	r0, r1
 8008e40:	d111      	bne.n	8008e66 <__ieee754_sqrt+0x3a>
 8008e42:	002a      	movs	r2, r5
 8008e44:	0023      	movs	r3, r4
 8008e46:	0028      	movs	r0, r5
 8008e48:	0021      	movs	r1, r4
 8008e4a:	f7f8 ff73 	bl	8001d34 <__aeabi_dmul>
 8008e4e:	0002      	movs	r2, r0
 8008e50:	000b      	movs	r3, r1
 8008e52:	0028      	movs	r0, r5
 8008e54:	0021      	movs	r1, r4
 8008e56:	f7f8 f813 	bl	8000e80 <__aeabi_dadd>
 8008e5a:	0005      	movs	r5, r0
 8008e5c:	000c      	movs	r4, r1
 8008e5e:	0028      	movs	r0, r5
 8008e60:	0021      	movs	r1, r4
 8008e62:	b007      	add	sp, #28
 8008e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	dc12      	bgt.n	8008e90 <__ieee754_sqrt+0x64>
 8008e6a:	0061      	lsls	r1, r4, #1
 8008e6c:	0849      	lsrs	r1, r1, #1
 8008e6e:	4329      	orrs	r1, r5
 8008e70:	d0f5      	beq.n	8008e5e <__ieee754_sqrt+0x32>
 8008e72:	2100      	movs	r1, #0
 8008e74:	428c      	cmp	r4, r1
 8008e76:	d100      	bne.n	8008e7a <__ieee754_sqrt+0x4e>
 8008e78:	e09f      	b.n	8008fba <__ieee754_sqrt+0x18e>
 8008e7a:	002a      	movs	r2, r5
 8008e7c:	0023      	movs	r3, r4
 8008e7e:	0028      	movs	r0, r5
 8008e80:	0021      	movs	r1, r4
 8008e82:	f7f9 fa19 	bl	80022b8 <__aeabi_dsub>
 8008e86:	0002      	movs	r2, r0
 8008e88:	000b      	movs	r3, r1
 8008e8a:	f7f8 fb59 	bl	8001540 <__aeabi_ddiv>
 8008e8e:	e7e4      	b.n	8008e5a <__ieee754_sqrt+0x2e>
 8008e90:	1521      	asrs	r1, r4, #20
 8008e92:	d100      	bne.n	8008e96 <__ieee754_sqrt+0x6a>
 8008e94:	e091      	b.n	8008fba <__ieee754_sqrt+0x18e>
 8008e96:	4857      	ldr	r0, [pc, #348]	; (8008ff4 <__ieee754_sqrt+0x1c8>)
 8008e98:	0312      	lsls	r2, r2, #12
 8008e9a:	180c      	adds	r4, r1, r0
 8008e9c:	2080      	movs	r0, #128	; 0x80
 8008e9e:	0b12      	lsrs	r2, r2, #12
 8008ea0:	0340      	lsls	r0, r0, #13
 8008ea2:	4310      	orrs	r0, r2
 8008ea4:	07c9      	lsls	r1, r1, #31
 8008ea6:	d403      	bmi.n	8008eb0 <__ieee754_sqrt+0x84>
 8008ea8:	0fda      	lsrs	r2, r3, #31
 8008eaa:	0040      	lsls	r0, r0, #1
 8008eac:	1810      	adds	r0, r2, r0
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	2500      	movs	r5, #0
 8008eb2:	1062      	asrs	r2, r4, #1
 8008eb4:	0040      	lsls	r0, r0, #1
 8008eb6:	2480      	movs	r4, #128	; 0x80
 8008eb8:	9205      	str	r2, [sp, #20]
 8008eba:	0fda      	lsrs	r2, r3, #31
 8008ebc:	1812      	adds	r2, r2, r0
 8008ebe:	0029      	movs	r1, r5
 8008ec0:	2016      	movs	r0, #22
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	03a4      	lsls	r4, r4, #14
 8008ec6:	190e      	adds	r6, r1, r4
 8008ec8:	4296      	cmp	r6, r2
 8008eca:	dc02      	bgt.n	8008ed2 <__ieee754_sqrt+0xa6>
 8008ecc:	1931      	adds	r1, r6, r4
 8008ece:	1b92      	subs	r2, r2, r6
 8008ed0:	192d      	adds	r5, r5, r4
 8008ed2:	0fde      	lsrs	r6, r3, #31
 8008ed4:	0052      	lsls	r2, r2, #1
 8008ed6:	3801      	subs	r0, #1
 8008ed8:	18b2      	adds	r2, r6, r2
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	0864      	lsrs	r4, r4, #1
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d1f1      	bne.n	8008ec6 <__ieee754_sqrt+0x9a>
 8008ee2:	2620      	movs	r6, #32
 8008ee4:	2780      	movs	r7, #128	; 0x80
 8008ee6:	0004      	movs	r4, r0
 8008ee8:	9604      	str	r6, [sp, #16]
 8008eea:	063f      	lsls	r7, r7, #24
 8008eec:	183e      	adds	r6, r7, r0
 8008eee:	46b4      	mov	ip, r6
 8008ef0:	428a      	cmp	r2, r1
 8008ef2:	dc02      	bgt.n	8008efa <__ieee754_sqrt+0xce>
 8008ef4:	d114      	bne.n	8008f20 <__ieee754_sqrt+0xf4>
 8008ef6:	429e      	cmp	r6, r3
 8008ef8:	d812      	bhi.n	8008f20 <__ieee754_sqrt+0xf4>
 8008efa:	4660      	mov	r0, ip
 8008efc:	4666      	mov	r6, ip
 8008efe:	19c0      	adds	r0, r0, r7
 8008f00:	9100      	str	r1, [sp, #0]
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	da03      	bge.n	8008f0e <__ieee754_sqrt+0xe2>
 8008f06:	43c6      	mvns	r6, r0
 8008f08:	0ff6      	lsrs	r6, r6, #31
 8008f0a:	198e      	adds	r6, r1, r6
 8008f0c:	9600      	str	r6, [sp, #0]
 8008f0e:	1a52      	subs	r2, r2, r1
 8008f10:	4563      	cmp	r3, ip
 8008f12:	4189      	sbcs	r1, r1
 8008f14:	4249      	negs	r1, r1
 8008f16:	1a52      	subs	r2, r2, r1
 8008f18:	4661      	mov	r1, ip
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	9900      	ldr	r1, [sp, #0]
 8008f1e:	19e4      	adds	r4, r4, r7
 8008f20:	0fde      	lsrs	r6, r3, #31
 8008f22:	0052      	lsls	r2, r2, #1
 8008f24:	18b2      	adds	r2, r6, r2
 8008f26:	9e04      	ldr	r6, [sp, #16]
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	3e01      	subs	r6, #1
 8008f2c:	087f      	lsrs	r7, r7, #1
 8008f2e:	9604      	str	r6, [sp, #16]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	d1db      	bne.n	8008eec <__ieee754_sqrt+0xc0>
 8008f34:	431a      	orrs	r2, r3
 8008f36:	d01f      	beq.n	8008f78 <__ieee754_sqrt+0x14c>
 8008f38:	4e2f      	ldr	r6, [pc, #188]	; (8008ff8 <__ieee754_sqrt+0x1cc>)
 8008f3a:	4f30      	ldr	r7, [pc, #192]	; (8008ffc <__ieee754_sqrt+0x1d0>)
 8008f3c:	6830      	ldr	r0, [r6, #0]
 8008f3e:	6871      	ldr	r1, [r6, #4]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	9200      	str	r2, [sp, #0]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	6832      	ldr	r2, [r6, #0]
 8008f4a:	6873      	ldr	r3, [r6, #4]
 8008f4c:	9202      	str	r2, [sp, #8]
 8008f4e:	9303      	str	r3, [sp, #12]
 8008f50:	9a00      	ldr	r2, [sp, #0]
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	f7f9 f9b0 	bl	80022b8 <__aeabi_dsub>
 8008f58:	0002      	movs	r2, r0
 8008f5a:	000b      	movs	r3, r1
 8008f5c:	9802      	ldr	r0, [sp, #8]
 8008f5e:	9903      	ldr	r1, [sp, #12]
 8008f60:	f7f7 fa70 	bl	8000444 <__aeabi_dcmple>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d007      	beq.n	8008f78 <__ieee754_sqrt+0x14c>
 8008f68:	6830      	ldr	r0, [r6, #0]
 8008f6a:	6871      	ldr	r1, [r6, #4]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	1c67      	adds	r7, r4, #1
 8008f72:	d127      	bne.n	8008fc4 <__ieee754_sqrt+0x198>
 8008f74:	9c04      	ldr	r4, [sp, #16]
 8008f76:	3501      	adds	r5, #1
 8008f78:	4b21      	ldr	r3, [pc, #132]	; (8009000 <__ieee754_sqrt+0x1d4>)
 8008f7a:	1069      	asrs	r1, r5, #1
 8008f7c:	18c9      	adds	r1, r1, r3
 8008f7e:	0864      	lsrs	r4, r4, #1
 8008f80:	07ed      	lsls	r5, r5, #31
 8008f82:	d502      	bpl.n	8008f8a <__ieee754_sqrt+0x15e>
 8008f84:	2380      	movs	r3, #128	; 0x80
 8008f86:	061b      	lsls	r3, r3, #24
 8008f88:	431c      	orrs	r4, r3
 8008f8a:	9b05      	ldr	r3, [sp, #20]
 8008f8c:	0025      	movs	r5, r4
 8008f8e:	0518      	lsls	r0, r3, #20
 8008f90:	1843      	adds	r3, r0, r1
 8008f92:	001c      	movs	r4, r3
 8008f94:	e763      	b.n	8008e5e <__ieee754_sqrt+0x32>
 8008f96:	0ada      	lsrs	r2, r3, #11
 8008f98:	3815      	subs	r0, #21
 8008f9a:	055b      	lsls	r3, r3, #21
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d0fa      	beq.n	8008f96 <__ieee754_sqrt+0x16a>
 8008fa0:	2480      	movs	r4, #128	; 0x80
 8008fa2:	0364      	lsls	r4, r4, #13
 8008fa4:	4222      	tst	r2, r4
 8008fa6:	d00a      	beq.n	8008fbe <__ieee754_sqrt+0x192>
 8008fa8:	2420      	movs	r4, #32
 8008faa:	001e      	movs	r6, r3
 8008fac:	1a64      	subs	r4, r4, r1
 8008fae:	40e6      	lsrs	r6, r4
 8008fb0:	1e4d      	subs	r5, r1, #1
 8008fb2:	408b      	lsls	r3, r1
 8008fb4:	4332      	orrs	r2, r6
 8008fb6:	1b41      	subs	r1, r0, r5
 8008fb8:	e76d      	b.n	8008e96 <__ieee754_sqrt+0x6a>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e7ee      	b.n	8008f9c <__ieee754_sqrt+0x170>
 8008fbe:	0052      	lsls	r2, r2, #1
 8008fc0:	3101      	adds	r1, #1
 8008fc2:	e7ef      	b.n	8008fa4 <__ieee754_sqrt+0x178>
 8008fc4:	f7f7 ff5c 	bl	8000e80 <__aeabi_dadd>
 8008fc8:	6877      	ldr	r7, [r6, #4]
 8008fca:	6836      	ldr	r6, [r6, #0]
 8008fcc:	0002      	movs	r2, r0
 8008fce:	000b      	movs	r3, r1
 8008fd0:	0030      	movs	r0, r6
 8008fd2:	0039      	movs	r1, r7
 8008fd4:	f7f7 fa2c 	bl	8000430 <__aeabi_dcmplt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d004      	beq.n	8008fe6 <__ieee754_sqrt+0x1ba>
 8008fdc:	3402      	adds	r4, #2
 8008fde:	4263      	negs	r3, r4
 8008fe0:	4163      	adcs	r3, r4
 8008fe2:	18ed      	adds	r5, r5, r3
 8008fe4:	e7c8      	b.n	8008f78 <__ieee754_sqrt+0x14c>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	3401      	adds	r4, #1
 8008fea:	439c      	bics	r4, r3
 8008fec:	e7c4      	b.n	8008f78 <__ieee754_sqrt+0x14c>
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	7ff00000 	.word	0x7ff00000
 8008ff4:	fffffc01 	.word	0xfffffc01
 8008ff8:	200000a8 	.word	0x200000a8
 8008ffc:	200000b0 	.word	0x200000b0
 8009000:	3fe00000 	.word	0x3fe00000

08009004 <_init>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr

08009010 <_fini>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr
